{"version":3,"file":"ngx-joyride.esm.js","sources":["../../src/models/joyride-step.class.ts","../../src/services/joyride-steps-container.service.ts","../../src/services/joyride-options.service.ts","../../src/services/logger.service.ts","../../src/models/joyride-error.class.ts","../../src/services/dom.service.ts","../../src/services/templates.service.ts","../../src/directives/joyride.directive.ts","../../src/services/document.service.ts","../../src/services/joyride-backdrop.service.ts","../../src/services/event-listener.service.ts","../../src/components/step/joyride-step.component.ts","../../src/services/step-drawer.service.ts","../../src/services/joyride-step.service.ts","../../../../node_modules/tslib/tslib.es6.js","../../../../node_modules/rxjs/_esm5/internal/util/errorObject.js","../../../../node_modules/rxjs/_esm5/internal/util/tryCatch.js","../../../../node_modules/rxjs/_esm5/internal/util/isFunction.js","../../../../node_modules/rxjs/_esm5/internal/config.js","../../../../node_modules/rxjs/_esm5/internal/util/hostReportError.js","../../../../node_modules/rxjs/_esm5/internal/Observer.js","../../../../node_modules/rxjs/_esm5/internal/util/isArray.js","../../../../node_modules/rxjs/_esm5/internal/util/isObject.js","../../../../node_modules/rxjs/_esm5/internal/util/UnsubscriptionError.js","../../../../node_modules/rxjs/_esm5/internal/Subscription.js","../../../../node_modules/rxjs/_esm5/internal/symbol/rxSubscriber.js","../../../../node_modules/rxjs/_esm5/internal/Subscriber.js","../../../../node_modules/rxjs/_esm5/internal/OuterSubscriber.js","../../../../node_modules/rxjs/_esm5/internal/InnerSubscriber.js","../../../../node_modules/rxjs/_esm5/internal/util/toSubscriber.js","../../../../node_modules/rxjs/_esm5/internal/symbol/observable.js","../../../../node_modules/rxjs/_esm5/internal/util/noop.js","../../../../node_modules/rxjs/_esm5/internal/util/pipe.js","../../../../node_modules/rxjs/_esm5/internal/Observable.js","../../../../node_modules/rxjs/_esm5/internal/util/subscribeToArray.js","../../../../node_modules/rxjs/_esm5/internal/util/subscribeToPromise.js","../../../../node_modules/rxjs/_esm5/internal/symbol/iterator.js","../../../../node_modules/rxjs/_esm5/internal/util/subscribeToIterable.js","../../../../node_modules/rxjs/_esm5/internal/util/subscribeToObservable.js","../../../../node_modules/rxjs/_esm5/internal/util/isArrayLike.js","../../../../node_modules/rxjs/_esm5/internal/util/isPromise.js","../../../../node_modules/rxjs/_esm5/internal/util/subscribeTo.js","../../../../node_modules/rxjs/_esm5/internal/util/subscribeToResult.js","../../../../node_modules/rxjs/_esm5/internal/operators/audit.js","../../../../node_modules/rxjs/_esm5/internal/scheduler/Action.js","../../../../node_modules/rxjs/_esm5/internal/scheduler/AsyncAction.js","../../../../node_modules/rxjs/_esm5/internal/Scheduler.js","../../../../node_modules/rxjs/_esm5/internal/scheduler/AsyncScheduler.js","../../../../node_modules/rxjs/_esm5/internal/scheduler/async.js","../../../../node_modules/rxjs/_esm5/internal/util/isNumeric.js","../../../../node_modules/rxjs/_esm5/internal/util/isScheduler.js","../../../../node_modules/rxjs/_esm5/internal/operators/buffer.js","../../../../node_modules/rxjs/_esm5/internal/operators/bufferCount.js","../../../../node_modules/rxjs/_esm5/internal/operators/bufferTime.js","../../../../node_modules/rxjs/_esm5/internal/operators/bufferToggle.js","../../../../node_modules/rxjs/_esm5/internal/operators/bufferWhen.js","../../../../node_modules/rxjs/_esm5/internal/operators/catchError.js","../../../../node_modules/rxjs/_esm5/internal/observable/fromArray.js","../../../../node_modules/rxjs/_esm5/internal/observable/combineLatest.js","../../../../node_modules/rxjs/_esm5/internal/observable/empty.js","../../../../node_modules/rxjs/_esm5/internal/observable/scalar.js","../../../../node_modules/rxjs/_esm5/internal/observable/of.js","../../../../node_modules/rxjs/_esm5/internal/operators/map.js","../../../../node_modules/rxjs/_esm5/internal/operators/mergeMap.js","../../../../node_modules/rxjs/_esm5/internal/operators/count.js","../../../../node_modules/rxjs/_esm5/internal/operators/debounce.js","../../../../node_modules/rxjs/_esm5/internal/operators/debounceTime.js","../../../../node_modules/rxjs/_esm5/internal/operators/defaultIfEmpty.js","../../../../node_modules/rxjs/_esm5/internal/observable/throwError.js","../../../../node_modules/rxjs/_esm5/internal/Notification.js","../../../../node_modules/rxjs/_esm5/internal/operators/delay.js","../../../../node_modules/rxjs/_esm5/internal/operators/delayWhen.js","../../../../node_modules/rxjs/_esm5/internal/operators/dematerialize.js","../../../../node_modules/rxjs/_esm5/internal/operators/distinct.js","../../../../node_modules/rxjs/_esm5/internal/operators/distinctUntilChanged.js","../../../../node_modules/rxjs/_esm5/internal/util/ArgumentOutOfRangeError.js","../../../../node_modules/rxjs/_esm5/internal/operators/filter.js","../../../../node_modules/rxjs/_esm5/internal/operators/tap.js","../../../../node_modules/rxjs/_esm5/internal/util/EmptyError.js","../../../../node_modules/rxjs/_esm5/internal/operators/take.js","../../../../node_modules/rxjs/_esm5/internal/operators/every.js","../../../../node_modules/rxjs/_esm5/internal/operators/exhaust.js","../../../../node_modules/rxjs/_esm5/internal/operators/exhaustMap.js","../../../../node_modules/rxjs/_esm5/internal/operators/expand.js","../../../../node_modules/rxjs/_esm5/internal/operators/finalize.js","../../../../node_modules/rxjs/_esm5/internal/operators/find.js","../../../../node_modules/rxjs/_esm5/internal/util/ObjectUnsubscribedError.js","../../../../node_modules/rxjs/_esm5/internal/SubjectSubscription.js","../../../../node_modules/rxjs/_esm5/internal/Subject.js","../../../../node_modules/rxjs/_esm5/internal/operators/groupBy.js","../../../../node_modules/rxjs/_esm5/internal/operators/ignoreElements.js","../../../../node_modules/rxjs/_esm5/internal/operators/isEmpty.js","../../../../node_modules/rxjs/_esm5/internal/operators/takeLast.js","../../../../node_modules/rxjs/_esm5/internal/operators/mapTo.js","../../../../node_modules/rxjs/_esm5/internal/operators/materialize.js","../../../../node_modules/rxjs/_esm5/internal/operators/scan.js","../../../../node_modules/rxjs/_esm5/internal/operators/mergeScan.js","../../../../node_modules/rxjs/_esm5/internal/operators/refCount.js","../../../../node_modules/rxjs/_esm5/internal/observable/ConnectableObservable.js","../../../../node_modules/rxjs/_esm5/internal/operators/observeOn.js","../../../../node_modules/rxjs/_esm5/internal/operators/onErrorResumeNext.js","../../../../node_modules/rxjs/_esm5/internal/operators/pairwise.js","../../../../node_modules/rxjs/_esm5/internal/BehaviorSubject.js","../../../../node_modules/rxjs/_esm5/internal/AsyncSubject.js","../../../../node_modules/rxjs/_esm5/internal/scheduler/QueueAction.js","../../../../node_modules/rxjs/_esm5/internal/scheduler/QueueScheduler.js","../../../../node_modules/rxjs/_esm5/internal/scheduler/queue.js","../../../../node_modules/rxjs/_esm5/internal/ReplaySubject.js","../../../../node_modules/rxjs/_esm5/internal/observable/race.js","../../../../node_modules/rxjs/_esm5/internal/operators/repeat.js","../../../../node_modules/rxjs/_esm5/internal/operators/repeatWhen.js","../../../../node_modules/rxjs/_esm5/internal/operators/retry.js","../../../../node_modules/rxjs/_esm5/internal/operators/retryWhen.js","../../../../node_modules/rxjs/_esm5/internal/operators/sample.js","../../../../node_modules/rxjs/_esm5/internal/operators/sampleTime.js","../../../../node_modules/rxjs/_esm5/internal/operators/sequenceEqual.js","../../../../node_modules/rxjs/_esm5/internal/operators/single.js","../../../../node_modules/rxjs/_esm5/internal/operators/skip.js","../../../../node_modules/rxjs/_esm5/internal/operators/skipLast.js","../../../../node_modules/rxjs/_esm5/internal/operators/skipUntil.js","../../../../node_modules/rxjs/_esm5/internal/operators/skipWhile.js","../../../../node_modules/rxjs/_esm5/internal/util/Immediate.js","../../../../node_modules/rxjs/_esm5/internal/scheduler/AsapAction.js","../../../../node_modules/rxjs/_esm5/internal/scheduler/AsapScheduler.js","../../../../node_modules/rxjs/_esm5/internal/scheduler/asap.js","../../../../node_modules/rxjs/_esm5/internal/observable/SubscribeOnObservable.js","../../../../node_modules/rxjs/_esm5/internal/operators/switchMap.js","../../../../node_modules/rxjs/_esm5/internal/operators/takeUntil.js","../../../../node_modules/rxjs/_esm5/internal/operators/takeWhile.js","../../../../node_modules/rxjs/_esm5/internal/operators/throttle.js","../../../../node_modules/rxjs/_esm5/internal/operators/throttleTime.js","../../../../node_modules/rxjs/_esm5/internal/util/TimeoutError.js","../../../../node_modules/rxjs/_esm5/internal/operators/timeoutWith.js","../../../../node_modules/rxjs/_esm5/internal/operators/window.js","../../../../node_modules/rxjs/_esm5/internal/operators/windowCount.js","../../../../node_modules/rxjs/_esm5/internal/operators/windowTime.js","../../../../node_modules/rxjs/_esm5/internal/operators/windowToggle.js","../../../../node_modules/rxjs/_esm5/internal/operators/windowWhen.js","../../../../node_modules/rxjs/_esm5/internal/operators/withLatestFrom.js","../../../../node_modules/rxjs/_esm5/internal/observable/zip.js","../../src/models/joyride-step-info.class.ts","../../src/services/joyride.service.ts","../../src/components/button/button.component.ts","../../src/components/close-button/close-button.component.ts","../../src/components/arrow/arrow.component.ts","../../src/joyride.module.ts"],"sourcesContent":["import { ViewContainerRef, TemplateRef, EventEmitter } from '@angular/core';\r\nimport { JoyrideStepComponent } from '../components/step/joyride-step.component';\r\nimport { ReplaySubject } from 'rxjs';\r\n\r\nexport class JoyrideStep {\r\n    constructor() {\r\n        this.title = new ReplaySubject<string>();\r\n        this.text = new ReplaySubject<string>();\r\n    }\r\n    name: string;\r\n    route: string;\r\n    position: string;\r\n    title: ReplaySubject<string>;\r\n    text: ReplaySubject<string>;\r\n    stepContent: TemplateRef<any>;\r\n    stepContentParams: Object;\r\n    nextClicked: EventEmitter<any>;\r\n    prevCliked: EventEmitter<any>;\r\n    tourDone: EventEmitter<any>;\r\n    transformCssStyle: string;\r\n    isElementOrAncestorFixed: boolean;\r\n    targetViewContainer: ViewContainerRef;\r\n    stepInstance: JoyrideStepComponent;\r\n}","import { Injectable } from '@angular/core';\r\nimport { JoyrideStep } from '../models/joyride-step.class';\r\nimport { Subject } from 'rxjs';\r\nimport { JoyrideOptionsService } from './joyride-options.service';\r\nimport { LoggerService } from './logger.service';\r\nimport { JoyrideError, JoyrideStepOutOfRange } from '../models/joyride-error.class';\r\n\r\nconst ROUTE_SEPARATOR = '@';\r\n\r\nclass Step {\r\n    id: string;\r\n    step: JoyrideStep;\r\n}\r\n\r\nexport enum StepActionType {\r\n    NEXT = 'NEXT',\r\n    PREV = 'PREV'\r\n}\r\n\r\n@Injectable()\r\nexport class JoyrideStepsContainerService {\r\n    protected steps: Step[];\r\n    protected tempSteps: JoyrideStep[] = [];\r\n    protected currentStepIndex: number = -2;\r\n    stepHasBeenModified: Subject<JoyrideStep> = new Subject<JoyrideStep>();\r\n\r\n    constructor(protected readonly stepOptions: JoyrideOptionsService, protected readonly logger: LoggerService) {}\r\n\r\n    protected getFirstStepIndex(): number {\r\n        let firstStep = this.stepOptions.getFirstStep();\r\n        let stepIds = this.stepOptions.getStepsOrder();\r\n\r\n        let index = stepIds.indexOf(firstStep);\r\n        if (index < 0) {\r\n            index = 0;\r\n            if (firstStep !== undefined) this.logger.warn(`The step ${firstStep} does not exist. Check in your step list if it's present.`);\r\n        }\r\n\r\n        return index;\r\n    }\r\n\r\n    init() {\r\n        this.logger.info('Initializing the steps array.');\r\n        this.steps = [];\r\n        this.currentStepIndex = this.getFirstStepIndex() - 1;\r\n        let stepIds = this.stepOptions.getStepsOrder();\r\n        stepIds.forEach(stepId => this.steps.push({ id: stepId, step: null }));\r\n    }\r\n\r\n    addStep(stepToAdd: JoyrideStep) {\r\n        let stepExist = this.tempSteps.filter(step => step.name === stepToAdd.name).length > 0;\r\n        if (!stepExist) {\r\n            this.logger.info(`Adding step ${stepToAdd.name} to the steps list.`);\r\n            this.tempSteps.push(stepToAdd);\r\n        } else {\r\n            let stepIndexToReplace = this.tempSteps.findIndex(step => step.name === stepToAdd.name);\r\n            this.tempSteps[stepIndexToReplace] = stepToAdd;\r\n        }\r\n    }\r\n    get(action: StepActionType): JoyrideStep {\r\n        if (action === StepActionType.NEXT) this.currentStepIndex++;\r\n        else this.currentStepIndex--;\r\n\r\n        if (this.currentStepIndex < 0 || this.currentStepIndex >= this.steps.length)\r\n            throw new JoyrideStepOutOfRange('The first or last step of the tour cannot be found!');\r\n\r\n        const stepName = this.getStepName(this.steps[this.currentStepIndex].id);\r\n        const index = this.tempSteps.findIndex(step => step.name === stepName);\r\n        let stepFound = this.tempSteps[index];\r\n        this.steps[this.currentStepIndex].step = stepFound;\r\n\r\n        if (stepFound == null) {\r\n            this.logger.warn(`Step ${this.steps[this.currentStepIndex].id} not found in the DOM. Check if it's hidden by *ngIf directive.`);\r\n        }\r\n\r\n        return stepFound;\r\n    }\r\n\r\n    getStepRoute(action: StepActionType) {\r\n        let stepID: string;\r\n        if (action === StepActionType.NEXT) {\r\n            stepID = this.steps[this.currentStepIndex + 1] ? this.steps[this.currentStepIndex + 1].id : null;\r\n        } else {\r\n            stepID = this.steps[this.currentStepIndex - 1] ? this.steps[this.currentStepIndex - 1].id : null;\r\n        }\r\n        let stepRoute = stepID && stepID.includes(ROUTE_SEPARATOR) ? stepID.split(ROUTE_SEPARATOR)[1] : '';\r\n\r\n        return stepRoute;\r\n    }\r\n\r\n    updatePosition(stepName: string, position: string) {\r\n        let index = this.getStepIndex(stepName);\r\n        if (this.steps[index].step) {\r\n            this.steps[index].step.position = position;\r\n            this.stepHasBeenModified.next(this.steps[index].step);\r\n        } else {\r\n            this.logger.warn(\r\n                `Trying to modify the position of ${stepName} to ${position}. Step not found!Is this step located in a different route?`\r\n            );\r\n        }\r\n    }\r\n    getStepNumber(stepName: string): number {\r\n        return this.getStepIndex(stepName) + 1;\r\n    }\r\n\r\n    getStepsCount() {\r\n        let stepsOrder = this.stepOptions.getStepsOrder();\r\n        return stepsOrder.length;\r\n    }\r\n\r\n    protected getStepIndex(stepName: string): number {\r\n        const index = this.steps\r\n            .map(step => (step.id.includes(ROUTE_SEPARATOR) ? step.id.split(ROUTE_SEPARATOR)[0] : step.id))\r\n            .findIndex(name => stepName === name);\r\n        if (index === -1) throw new JoyrideError(`The step with name: ${stepName} does not exist in the step list.`);\r\n        return index;\r\n    }\r\n\r\n    protected getStepName(stepID: string): string {\r\n        let stepName = stepID && stepID.includes(ROUTE_SEPARATOR) ? stepID.split(ROUTE_SEPARATOR)[0] : stepID;\r\n        return stepName;\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { JoyrideOptions, CustomTexts, ICustomTexts } from '../models/joyride-options.class';\r\nimport { of, Observable } from 'rxjs';\r\n\r\nexport const DEFAULT_THEME_COLOR = '#3b5560';\r\nexport const STEP_DEFAULT_POSITION = 'bottom';\r\nexport const DEFAULT_TIMEOUT_BETWEEN_STEPS = 1;\r\n\r\nexport class ObservableCustomTexts implements ICustomTexts {\r\n    prev: Observable<string>;\r\n    next: Observable<string>;\r\n    done: Observable<string>;\r\n    close: Observable<string>;\r\n}\r\nexport const DEFAULT_TEXTS: ObservableCustomTexts = {\r\n    prev: of('prev'),\r\n    next: of('next'),\r\n    done: of('done'),\r\n    close: of(null)\r\n};\r\n\r\nexport interface IJoyrideOptionsService {\r\n    setOptions(options: JoyrideOptions): void;\r\n    getBackdropColor(): string;\r\n    getThemeColor(): string;\r\n    getStepDefaultPosition();\r\n    getStepsOrder(): string[];\r\n    getFirstStep(): string;\r\n    getWaitingTime(): number;\r\n    areLogsEnabled(): boolean;\r\n    isCounterVisible(): boolean;\r\n    isPrevButtonVisible(): boolean;\r\n    getCustomTexts(): ObservableCustomTexts;\r\n}\r\n\r\n@Injectable()\r\nexport class JoyrideOptionsService implements IJoyrideOptionsService {\r\n    protected themeColor: string = DEFAULT_THEME_COLOR;\r\n    protected stepDefaultPosition: string = STEP_DEFAULT_POSITION;\r\n    protected logsEnabled: boolean = true;\r\n    protected showCounter: boolean = true;\r\n    protected showPrevButton: boolean = true;\r\n    protected stepsOrder: string[] = [];\r\n    protected firstStep: string;\r\n    protected waitingTime: number;\r\n    protected customTexts: ObservableCustomTexts;\r\n\r\n    setOptions(options: JoyrideOptions) {\r\n        this.stepsOrder = options.steps;\r\n        this.stepDefaultPosition = options.stepDefaultPosition ? options.stepDefaultPosition : this.stepDefaultPosition;\r\n        this.logsEnabled = typeof options.logsEnabled !== 'undefined' ? options.logsEnabled : this.logsEnabled;\r\n        this.showCounter = typeof options.showCounter !== 'undefined' ? options.showCounter : this.showCounter;\r\n        this.showPrevButton = typeof options.showPrevButton !== 'undefined' ? options.showPrevButton : this.showPrevButton;\r\n        this.themeColor = options.themeColor ? options.themeColor : this.themeColor;\r\n        this.firstStep = options.startWith;\r\n        this.waitingTime = typeof options.waitingTime !== 'undefined' ? options.waitingTime : DEFAULT_TIMEOUT_BETWEEN_STEPS;\r\n        typeof options.customTexts !== 'undefined' ? this.setCustomText(options.customTexts) : this.setCustomText(DEFAULT_TEXTS);\r\n    }\r\n\r\n    getBackdropColor() {\r\n        return this.hexToRgb(this.themeColor);\r\n    }\r\n\r\n    getThemeColor() {\r\n        return this.themeColor;\r\n    }\r\n\r\n    getStepDefaultPosition() {\r\n        return this.stepDefaultPosition;\r\n    }\r\n\r\n    getStepsOrder() {\r\n        return this.stepsOrder;\r\n    }\r\n\r\n    getFirstStep() {\r\n        return this.firstStep;\r\n    }\r\n\r\n    getWaitingTime() {\r\n        return this.waitingTime;\r\n    }\r\n\r\n    areLogsEnabled() {\r\n        return this.logsEnabled;\r\n    }\r\n\r\n    isCounterVisible() {\r\n        return this.showCounter;\r\n    }\r\n\r\n    isPrevButtonVisible() {\r\n        return this.showPrevButton;\r\n    }\r\n\r\n    getCustomTexts(): ObservableCustomTexts {\r\n        return this.customTexts;\r\n    }\r\n\r\n    protected setCustomText(texts: CustomTexts) {\r\n        let prev, next, done, close: string | Observable<string>;\r\n        prev = texts.prev ? texts.prev : DEFAULT_TEXTS.prev;\r\n        next = texts.next ? texts.next : DEFAULT_TEXTS.next;\r\n        done = texts.done ? texts.done : DEFAULT_TEXTS.done;\r\n        close = texts.close ? texts.close : DEFAULT_TEXTS.close;\r\n        this.customTexts = <ObservableCustomTexts>{\r\n            prev: this.toObservable(prev),\r\n            next: this.toObservable(next),\r\n            done: this.toObservable(done),\r\n            close: this.toObservable(close)\r\n        };\r\n    }\r\n\r\n    protected toObservable(value: string | Observable<string>) {\r\n        return value instanceof Observable ? value : of(value);\r\n    }\r\n\r\n    protected hexToRgb(hex: any): string {\r\n        var shorthandRegex = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\r\n        hex = hex.replace(shorthandRegex, (m: any, r: any, g: any, b: any) => {\r\n            return r + r + g + g + b + b;\r\n        });\r\n\r\n        var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\r\n        return result ? `${parseInt(result[1], 16)}, ${parseInt(result[2], 16)}, ${parseInt(result[3], 16)}` : null;\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { JoyrideOptionsService } from './joyride-options.service';\r\n\r\nconst JOYRIDE = 'ngx-joyride:::';\r\n\r\n@Injectable()\r\nexport class LoggerService {\r\n\r\n    constructor(protected readonly optionService: JoyrideOptionsService) { }\r\n\r\n    debug(message?: string, data: any = \"\") {\r\n        if (this.optionService.areLogsEnabled()) {\r\n            console.debug(JOYRIDE + message, data);\r\n        }\r\n    }\r\n\r\n    info(message?: string, data: any = \"\") {\r\n        if (this.optionService.areLogsEnabled()) {\r\n            console.info(JOYRIDE + message, data);\r\n        }\r\n    }\r\n\r\n    warn(message?: string, data: any = \"\") {\r\n        if (this.optionService.areLogsEnabled()) {\r\n            console.warn(JOYRIDE + message, data);\r\n        }\r\n    }\r\n\r\n    error(message?: string, data: any = \"\") {\r\n        if (this.optionService.areLogsEnabled()) {\r\n            console.error(JOYRIDE + message, data);\r\n        }\r\n    }\r\n\r\n}\r\n","export class JoyrideError extends Error {\r\n    constructor(message: string) {\r\n        super(message);\r\n        Object.setPrototypeOf(this, JoyrideError.prototype);\r\n    }\r\n}\r\n\r\nexport class JoyrideStepDoesNotExist extends Error {\r\n    constructor(message: string) {\r\n        super(message);\r\n        Object.setPrototypeOf(this, JoyrideStepDoesNotExist.prototype);\r\n    }\r\n}\r\n\r\nexport class JoyrideStepOutOfRange extends Error {\r\n    constructor(message: string) {\r\n        super(message);\r\n        Object.setPrototypeOf(this, JoyrideStepOutOfRange.prototype);\r\n    }\r\n}\r\n","import { Injectable, Inject, PLATFORM_ID } from '@angular/core';\r\nimport { isPlatformBrowser } from '@angular/common';\r\n\r\n@Injectable()\r\nexport class DomRefService {\r\n    protected fakeDocument: Document = <Document>{ body: {}, documentElement: {} };\r\n    protected fakeWindow: Window = <Window>{ document: this.fakeDocument, navigator: {} };\r\n    constructor(@Inject(PLATFORM_ID) protected platformId: Object) {}\r\n    getNativeWindow(): Window {\r\n        if (isPlatformBrowser(this.platformId)) return window;\r\n        else return this.fakeWindow;\r\n    }\r\n\r\n    getNativeDocument() {\r\n        if (isPlatformBrowser(this.platformId)) return document;\r\n        else return this.fakeDocument;\r\n    }\r\n}\r\n","import { Injectable, TemplateRef } from \"@angular/core\";\r\n\r\n@Injectable()\r\nexport class TemplatesService {\r\n    protected _prevButton: TemplateRef<any>;\r\n    protected _nextButton: TemplateRef<any>;\r\n    protected _doneButton: TemplateRef<any>;\r\n    protected _counter: TemplateRef<any>;\r\n    \r\n    setPrevButton(template: TemplateRef<any>) {\r\n        this._prevButton = template;\r\n    }\r\n\r\n    getPrevButton() {\r\n        return this._prevButton;\r\n    }\r\n\r\n    setNextButton(template: TemplateRef<any>) {\r\n        this._nextButton = template;\r\n    }\r\n\r\n    getNextButton() {\r\n        return this._nextButton;\r\n    }\r\n\r\n    setDoneButton(template: TemplateRef<any>) {\r\n        this._doneButton = template;\r\n    }\r\n\r\n    getDoneButton() {\r\n        return this._doneButton;\r\n    }\r\n    setCounter(template: TemplateRef<any>) {\r\n        this._counter = template;\r\n    }\r\n\r\n    getCounter() {\r\n        return this._counter;\r\n    }\r\n}\r\n","import {\r\n    Directive,\r\n    ElementRef,\r\n    AfterViewInit,\r\n    Input,\r\n    ViewContainerRef,\r\n    TemplateRef,\r\n    Output,\r\n    EventEmitter,\r\n    Inject,\r\n    PLATFORM_ID,\r\n    OnChanges,\r\n    SimpleChanges,\r\n    OnDestroy\r\n} from '@angular/core';\r\nimport { JoyrideStep } from '../models/joyride-step.class';\r\nimport { JoyrideStepsContainerService } from '../services/joyride-steps-container.service';\r\nimport { JoyrideError } from '../models/joyride-error.class';\r\nimport { Router } from '@angular/router';\r\nimport { DomRefService } from '../services/dom.service';\r\nimport { isPlatformBrowser } from '@angular/common';\r\nimport { TemplatesService } from '../services/templates.service';\r\nimport { Observable, Subscription } from 'rxjs';\r\n\r\nexport const NO_POSITION = 'NO_POSITION';\r\n\r\n@Directive({\r\n    selector: 'joyrideStep, [joyrideStep]'\r\n})\r\nexport class JoyrideDirective implements AfterViewInit, OnChanges, OnDestroy {\r\n    @Input('joyrideStep')\r\n    name: string;\r\n\r\n    @Input()\r\n    nextStep?: string;\r\n\r\n    @Input()\r\n    title?: string | Observable<string>;\r\n\r\n    @Input()\r\n    text?: string | Observable<string>;\r\n\r\n    @Input()\r\n    stepPosition?: string = NO_POSITION;\r\n\r\n    @Input()\r\n    stepContent?: TemplateRef<any>;\r\n\r\n    @Input()\r\n    stepContentParams?: Object;\r\n\r\n    @Input()\r\n    prevTemplate?: TemplateRef<any>;\r\n\r\n    @Input()\r\n    nextTemplate?: TemplateRef<any>;\r\n\r\n    @Input()\r\n    doneTemplate?: TemplateRef<any>;\r\n\r\n    @Input()\r\n    counterTemplate?: TemplateRef<any>;\r\n\r\n    @Output()\r\n    prev?: EventEmitter<any> = new EventEmitter<any>();\r\n\r\n    @Output()\r\n    next?: EventEmitter<any> = new EventEmitter<any>();\r\n\r\n    @Output()\r\n    done?: EventEmitter<any> = new EventEmitter<any>();\r\n\r\n    protected windowRef: Window;\r\n    protected step: JoyrideStep;\r\n    protected subscriptions: Subscription[] = [];\r\n\r\n    constructor(\r\n        protected readonly joyrideStepsContainer: JoyrideStepsContainerService,\r\n        protected viewContainerRef: ViewContainerRef,\r\n        protected readonly domService: DomRefService,\r\n        protected readonly router: Router,\r\n        protected readonly templateService: TemplatesService,\r\n        @Inject(PLATFORM_ID) protected platformId: Object\r\n    ) {\r\n        this.windowRef = this.domService.getNativeWindow();\r\n        this.step = new JoyrideStep();\r\n    }\r\n\r\n    ngAfterViewInit() {\r\n        if (!isPlatformBrowser(this.platformId)) return;\r\n        if (this.prevTemplate) this.templateService.setPrevButton(this.prevTemplate);\r\n        if (this.nextTemplate) this.templateService.setNextButton(this.nextTemplate);\r\n        if (this.doneTemplate) this.templateService.setDoneButton(this.doneTemplate);\r\n        if (this.counterTemplate) this.templateService.setCounter(this.counterTemplate);\r\n        this.step.position = this.stepPosition;\r\n        this.step.targetViewContainer = this.viewContainerRef;\r\n        this.setAsyncFields(this.step);\r\n        this.step.stepContent = this.stepContent;\r\n        this.step.stepContentParams = this.stepContentParams;\r\n        this.step.nextClicked = this.next;\r\n        this.step.prevCliked = this.prev;\r\n        this.step.tourDone = this.done;\r\n        if (!this.name) throw new JoyrideError(\"All the steps should have the 'joyrideStep' property set with a custom name.\");\r\n        this.step.name = this.name;\r\n        this.step.route = this.router.url.substr(0, 1) === '/' ? this.router.url.substr(1) : this.router.url;\r\n        this.step.transformCssStyle = this.windowRef.getComputedStyle(this.viewContainerRef.element.nativeElement).transform;\r\n        this.step.isElementOrAncestorFixed =\r\n            this.isElementFixed(this.viewContainerRef.element) ||\r\n            this.isAncestorsFixed(this.viewContainerRef.element.nativeElement.parentElement);\r\n\r\n        this.joyrideStepsContainer.addStep(this.step);\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if (changes['title'] || changes['text']) {\r\n            this.setAsyncFields(this.step);\r\n        }\r\n    }\r\n\r\n    protected isElementFixed(element: ElementRef) {\r\n        return this.windowRef.getComputedStyle(element.nativeElement).position === 'fixed';\r\n    }\r\n\r\n    protected setAsyncFields(step: JoyrideStep) {\r\n        if (this.title instanceof Observable) {\r\n            this.subscriptions.push(\r\n                this.title.subscribe(title => {\r\n                    step.title.next(title);\r\n                })\r\n            );\r\n        } else {\r\n            step.title.next(this.title);\r\n        }\r\n        if (this.text instanceof Observable) {\r\n            this.subscriptions.push(\r\n                this.text.subscribe(text => {\r\n                    step.text.next(text);\r\n                })\r\n            );\r\n        } else {\r\n            step.text.next(this.text);\r\n        }\r\n    }\r\n\r\n    protected isAncestorsFixed(nativeElement: any): boolean {\r\n        if (!nativeElement || !nativeElement.parentElement) return false;\r\n        let isElementFixed = this.windowRef.getComputedStyle(nativeElement.parentElement).position === 'fixed';\r\n        if (nativeElement.nodeName === 'BODY') {\r\n            return isElementFixed;\r\n        }\r\n        if (isElementFixed) return true;\r\n        else return this.isAncestorsFixed(nativeElement.parentElement);\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.subscriptions.forEach(sub => {\r\n            sub.unsubscribe();\r\n        });\r\n    }\r\n}\r\n","import { Injectable, ElementRef } from '@angular/core';\r\nimport { DomRefService } from './dom.service';\r\n\r\nexport interface IDocumentService {\r\n    getElementFixedTop(elementRef: ElementRef): number;\r\n\r\n    getElementFixedLeft(elementRef: ElementRef);\r\n\r\n    getElementAbsoluteTop(elementRef: ElementRef);\r\n\r\n    getElementAbsoluteLeft(elementRef: ElementRef);\r\n\r\n    setDocumentHeight();\r\n\r\n    getDocumentHeight(): number;\r\n    isParentScrollable(elementRef: ElementRef): boolean;\r\n    isElementBeyondOthers(elementRef: ElementRef, isElementFixed: boolean, keywordToDiscard: string): number;\r\n    scrollToTheTop(elementRef: ElementRef): void;\r\n    scrollToTheBottom(elementRef: ElementRef): void;\r\n}\r\n\r\n@Injectable()\r\nexport class DocumentService implements IDocumentService {\r\n    protected documentHeight: number;\r\n\r\n    constructor(protected readonly DOMService: DomRefService) {\r\n        this.setDocumentHeight();\r\n        if (!document.elementsFromPoint) {\r\n            // IE 11 - Edge browsers\r\n            document.elementsFromPoint = this.elementsFromPoint.bind(this);\r\n        }\r\n    }\r\n\r\n    getElementFixedTop(elementRef: ElementRef) {\r\n        return elementRef.nativeElement.getBoundingClientRect().top;\r\n    }\r\n\r\n    getElementFixedLeft(elementRef: ElementRef) {\r\n        return elementRef.nativeElement.getBoundingClientRect().left;\r\n    }\r\n\r\n    getElementAbsoluteTop(elementRef: ElementRef) {\r\n        var scrollOffsets = this.getScrollOffsets();\r\n        return elementRef.nativeElement.getBoundingClientRect().top + scrollOffsets.y;\r\n    }\r\n\r\n    getElementAbsoluteLeft(elementRef: ElementRef) {\r\n        var scrollOffsets = this.getScrollOffsets();\r\n        return elementRef.nativeElement.getBoundingClientRect().left + scrollOffsets.x;\r\n    }\r\n\r\n    setDocumentHeight() {\r\n        this.documentHeight = this.calculateDocumentHeight();\r\n    }\r\n\r\n    getDocumentHeight() {\r\n        return this.documentHeight;\r\n    }\r\n\r\n    isParentScrollable(elementRef: ElementRef): boolean {\r\n        return this.getFirstScrollableParent(elementRef.nativeElement) !== this.DOMService.getNativeDocument().body;\r\n    }\r\n\r\n    isElementBeyondOthers(elementRef: ElementRef, isElementFixed: boolean, keywordToDiscard: string) {\r\n        const x1 = isElementFixed ? this.getElementFixedLeft(elementRef) : this.getElementAbsoluteLeft(elementRef);\r\n        const y1 = isElementFixed ? this.getElementFixedTop(elementRef) : this.getElementAbsoluteTop(elementRef);\r\n        const x2 = x1 + elementRef.nativeElement.getBoundingClientRect().width - 1;\r\n        const y2 = y1 + elementRef.nativeElement.getBoundingClientRect().height - 1;\r\n\r\n        const elements1 = this.DOMService.getNativeDocument().elementsFromPoint(x1, y1);\r\n        const elements2 = this.DOMService.getNativeDocument().elementsFromPoint(x2, y2);\r\n\r\n        if (elements1.length === 0 && elements2.length === 0) return 1;\r\n        if (\r\n            this.getFirstElementWithoutKeyword(elements1, keywordToDiscard) !== elementRef.nativeElement ||\r\n            this.getFirstElementWithoutKeyword(elements2, keywordToDiscard) !== elementRef.nativeElement\r\n        ) {\r\n            return 2;\r\n        }\r\n        return 3;\r\n    }\r\n\r\n    scrollIntoView(elementRef: ElementRef, isElementFixed: boolean): void {\r\n        const firstScrollableParent = this.getFirstScrollableParent(elementRef.nativeElement);\r\n        const top = isElementFixed ? this.getElementFixedTop(elementRef) : this.getElementAbsoluteTop(elementRef);\r\n        if (firstScrollableParent !== this.DOMService.getNativeDocument().body) {\r\n            if (firstScrollableParent.scrollTo) {\r\n                firstScrollableParent.scrollTo(0, top - 150);\r\n            } else {\r\n                // IE 11 - Edge browsers\r\n                firstScrollableParent.scrollTop = top - 150;\r\n            }\r\n        } else {\r\n            this.DOMService.getNativeWindow().scrollTo(0, top - 150);\r\n        }\r\n    }\r\n\r\n    scrollToTheTop(elementRef: ElementRef): void {\r\n        const firstScrollableParent = this.getFirstScrollableParent(elementRef.nativeElement);\r\n        if (firstScrollableParent !== this.DOMService.getNativeDocument().body) {\r\n            if (firstScrollableParent.scrollTo) {\r\n                firstScrollableParent.scrollTo(0, 0);\r\n            } else {\r\n                // IE 11 - Edge browsers\r\n                firstScrollableParent.scrollTop = 0;\r\n            }\r\n        } else {\r\n            this.DOMService.getNativeWindow().scrollTo(0, 0);\r\n        }\r\n    }\r\n\r\n    scrollToTheBottom(elementRef: ElementRef): void {\r\n        const firstScrollableParent = this.getFirstScrollableParent(elementRef.nativeElement);\r\n        if (firstScrollableParent !== this.DOMService.getNativeDocument().body) {\r\n            if (firstScrollableParent.scrollTo) {\r\n                firstScrollableParent.scrollTo(0, this.DOMService.getNativeDocument().body.scrollHeight);\r\n            } else {\r\n                // IE 11 - Edge browsers\r\n                firstScrollableParent.scrollTop = firstScrollableParent.scrollHeight - firstScrollableParent.clientHeight;\r\n            }\r\n        } else {\r\n            this.DOMService.getNativeWindow().scrollTo(0, this.DOMService.getNativeDocument().body.scrollHeight);\r\n        }\r\n    }\r\n\r\n    protected getFirstScrollableParent(node: any) {\r\n        const regex = /(auto|scroll|overlay)/;\r\n\r\n        const style = (node: any, prop: any) =>\r\n            this.DOMService.getNativeWindow()\r\n                .getComputedStyle(node, null)\r\n                .getPropertyValue(prop);\r\n\r\n        const scroll = (node: any) => regex.test(style(node, 'overflow') + style(node, 'overflow-y') + style(node, 'overflow-x'));\r\n\r\n        const scrollparent = (node: any): any => {\r\n            return !node || node === this.DOMService.getNativeDocument().body\r\n                ? this.DOMService.getNativeDocument().body\r\n                : scroll(node)\r\n                ? node\r\n                : scrollparent(node.parentNode);\r\n        };\r\n\r\n        return scrollparent(node);\r\n    }\r\n\r\n    protected calculateDocumentHeight() {\r\n        const documentRef = this.DOMService.getNativeDocument();\r\n        return Math.max(\r\n            documentRef.body.scrollHeight,\r\n            documentRef.documentElement.scrollHeight,\r\n            documentRef.body.offsetHeight,\r\n            documentRef.documentElement.offsetHeight,\r\n            documentRef.body.clientHeight,\r\n            documentRef.documentElement.clientHeight\r\n        );\r\n    }\r\n\r\n    protected getScrollOffsets() {\r\n        const winReference = this.DOMService.getNativeWindow();\r\n        const docReference = this.DOMService.getNativeDocument();\r\n\r\n        // This works for all browsers except IE versions 8 and before\r\n        if (winReference.pageXOffset != null) return { x: winReference.pageXOffset, y: winReference.pageYOffset };\r\n\r\n        // For IE (or any browser) in Standards mode\r\n        if (docReference.compatMode == 'CSS1Compat')\r\n            return {\r\n                x: docReference.documentElement.scrollLeft,\r\n                y: docReference.documentElement.scrollTop\r\n            };\r\n\r\n        // For browsers in Quirks mode\r\n        return { x: docReference.body.scrollLeft, y: docReference.body.scrollTop };\r\n    }\r\n\r\n    protected elementsFromPoint(x, y) {\r\n        var parents = [];\r\n        var parent = void 0;\r\n        do {\r\n            const elem = this.DOMService.getNativeDocument().elementFromPoint(x, y);\r\n            if (elem && parent !== elem) {\r\n                parent = elem;\r\n                parents.push(parent);\r\n                parent.style.pointerEvents = 'none';\r\n            } else {\r\n                parent = false;\r\n            }\r\n        } while (parent);\r\n        parents.forEach(function(parent) {\r\n            return (parent.style.pointerEvents = 'all');\r\n        });\r\n        return parents;\r\n    }\r\n\r\n    protected getFirstElementWithoutKeyword(elements: Element[], keyword: string): Element {\r\n        while (elements[0] && elements[0].classList.toString().includes(keyword)) {\r\n            elements.shift();\r\n        }\r\n        return elements[0];\r\n    }\r\n}\r\n","import { Injectable, Renderer2, RendererFactory2, ViewContainerRef } from '@angular/core';\r\nimport { DocumentService } from './document.service';\r\nimport { Scroll } from './event-listener.service';\r\nimport { JoyrideOptionsService } from './joyride-options.service';\r\nimport { JoyrideStep } from '../models/joyride-step.class';\r\n\r\n@Injectable()\r\nexport class JoyrideBackdropService {\r\n    protected renderer: Renderer2;\r\n    protected currentBackdropContainer: any;\r\n    protected lastBackdropContainer: any;\r\n    protected backdropContent: any;\r\n    protected backdropTop: any;\r\n    protected backdropBottom: any;\r\n    protected backdropMiddleContainer: any;\r\n    protected backdropMiddleContent: any;\r\n    protected leftBackdrop: any;\r\n    protected targetBackdrop: any;\r\n    protected rightBackdrop: any;\r\n    protected elementRef: ViewContainerRef;\r\n    protected targetAbsoluteTop: number;\r\n    protected targetAbsoluteLeft: number;\r\n    protected lastXScroll: number = 0;\r\n    protected lastYScroll: number = 0;\r\n\r\n    constructor(\r\n        protected readonly documentService: DocumentService,\r\n        protected readonly optionsService: JoyrideOptionsService,\r\n        protected readonly rendererFactory: RendererFactory2\r\n    ) {\r\n        this.setRenderer();\r\n    }\r\n\r\n    protected setRenderer() {\r\n        this.renderer = this.rendererFactory.createRenderer(null, null);\r\n    }\r\n\r\n    draw(step: JoyrideStep) {\r\n        this.elementRef = step.targetViewContainer;\r\n        this.targetAbsoluteTop = this.getTargetTotalTop(step);\r\n        this.targetAbsoluteLeft = this.getTargetTotalLeft(step);\r\n\r\n        this.currentBackdropContainer = this.renderer.createElement('div');\r\n        this.renderer.addClass(this.currentBackdropContainer, 'backdrop-container');\r\n        this.renderer.setStyle(this.currentBackdropContainer, 'position', 'fixed');\r\n        this.renderer.setStyle(this.currentBackdropContainer, 'top', '0px');\r\n        this.renderer.setStyle(this.currentBackdropContainer, 'left', '0px');\r\n        this.renderer.setStyle(this.currentBackdropContainer, 'width', '100%');\r\n        this.renderer.setStyle(this.currentBackdropContainer, 'height', '100%');\r\n        this.renderer.setStyle(this.currentBackdropContainer, 'z-index', '1000');\r\n        this.renderer.setAttribute(this.currentBackdropContainer, 'id', 'backdrop-' + step.name);\r\n\r\n        this.backdropContent = this.renderer.createElement('div');\r\n        this.renderer.addClass(this.backdropContent, 'backdrop-content');\r\n        this.renderer.setStyle(this.backdropContent, 'position', 'relative');\r\n        this.renderer.setStyle(this.backdropContent, 'height', '100%');\r\n        this.renderer.setStyle(this.backdropContent, 'display', 'flex');\r\n        this.renderer.setStyle(this.backdropContent, 'flex-direction', 'column');\r\n        this.renderer.appendChild(this.currentBackdropContainer, this.backdropContent);\r\n\r\n        this.backdropTop = this.renderer.createElement('div');\r\n        this.renderer.addClass(this.backdropTop, 'joyride-backdrop');\r\n        this.renderer.addClass(this.backdropTop, 'backdrop-top');\r\n        this.renderer.setStyle(this.backdropTop, 'width', '100%');\r\n        this.renderer.setStyle(this.backdropTop, 'height', this.targetAbsoluteTop - this.lastYScroll + 'px');\r\n        this.renderer.setStyle(this.backdropTop, 'flex-shrink', '0');\r\n        this.renderer.setStyle(this.backdropTop, 'background-color', `rgba(${this.optionsService.getBackdropColor()}, 0.7)`);\r\n        this.renderer.appendChild(this.backdropContent, this.backdropTop);\r\n\r\n        this.backdropMiddleContainer = this.renderer.createElement('div');\r\n        this.renderer.addClass(this.backdropMiddleContainer, 'backdrop-middle-container');\r\n        this.renderer.setStyle(this.backdropMiddleContainer, 'height', this.elementRef.element.nativeElement.offsetHeight + 'px');\r\n        this.renderer.setStyle(this.backdropMiddleContainer, 'width', '100%');\r\n        this.renderer.setStyle(this.backdropMiddleContainer, 'flex-shrink', '0');\r\n        this.renderer.appendChild(this.backdropContent, this.backdropMiddleContainer);\r\n\r\n        this.backdropMiddleContent = this.renderer.createElement('div');\r\n        this.renderer.addClass(this.backdropMiddleContent, 'backdrop-middle-content');\r\n        this.renderer.setStyle(this.backdropMiddleContent, 'display', 'flex');\r\n        this.renderer.setStyle(this.backdropMiddleContent, 'width', '100%');\r\n        this.renderer.setStyle(this.backdropMiddleContent, 'height', '100%');\r\n        this.renderer.appendChild(this.backdropMiddleContainer, this.backdropMiddleContent);\r\n\r\n        this.leftBackdrop = this.renderer.createElement('div');\r\n        this.renderer.addClass(this.leftBackdrop, 'joyride-backdrop');\r\n        this.renderer.addClass(this.leftBackdrop, 'backdrop-left');\r\n        this.renderer.setStyle(this.leftBackdrop, 'flex-shrink', '0');\r\n        this.renderer.setStyle(this.leftBackdrop, 'width', this.targetAbsoluteLeft - this.lastXScroll + 'px');\r\n        this.renderer.setStyle(this.leftBackdrop, 'background-color', `rgba(${this.optionsService.getBackdropColor()}, 0.7)`);\r\n        this.renderer.appendChild(this.backdropMiddleContent, this.leftBackdrop);\r\n\r\n        this.targetBackdrop = this.renderer.createElement('div');\r\n        this.renderer.addClass(this.targetBackdrop, 'backdrop-target');\r\n        this.renderer.setStyle(this.targetBackdrop, 'flex-shrink', '0');\r\n        this.renderer.setStyle(this.targetBackdrop, 'width', this.elementRef.element.nativeElement.offsetWidth + 'px');\r\n        this.renderer.appendChild(this.backdropMiddleContent, this.targetBackdrop);\r\n\r\n        this.rightBackdrop = this.renderer.createElement('div');\r\n        this.renderer.addClass(this.rightBackdrop, 'joyride-backdrop');\r\n        this.renderer.addClass(this.rightBackdrop, 'backdrop-right');\r\n        this.renderer.setStyle(this.rightBackdrop, 'width', '100%');\r\n        this.renderer.setStyle(this.rightBackdrop, 'background-color', `rgba(${this.optionsService.getBackdropColor()}, 0.7)`);\r\n        this.renderer.appendChild(this.backdropMiddleContent, this.rightBackdrop);\r\n\r\n        this.backdropBottom = this.renderer.createElement('div');\r\n        this.renderer.addClass(this.backdropBottom, 'joyride-backdrop');\r\n        this.renderer.addClass(this.backdropBottom, 'backdrop-bottom');\r\n        this.renderer.setStyle(this.backdropBottom, 'width', '100%');\r\n        this.renderer.setStyle(this.backdropBottom, 'height', '100%');\r\n        this.renderer.setStyle(this.backdropBottom, 'background-color', `rgba(${this.optionsService.getBackdropColor()}, 0.7)`);\r\n        this.renderer.appendChild(this.backdropContent, this.backdropBottom);\r\n\r\n        this.removeLastBackdrop();\r\n        this.drawCurrentBackdrop();\r\n        this.lastBackdropContainer = this.currentBackdropContainer;\r\n    }\r\n\r\n    remove() {\r\n        this.removeLastBackdrop();\r\n    }\r\n\r\n    redrawTarget(step: JoyrideStep) {\r\n        this.targetAbsoluteLeft = this.getTargetTotalLeft(step);\r\n        this.targetAbsoluteTop = this.getTargetTotalTop(step);\r\n        this.handleVerticalScroll(step);\r\n        this.handleHorizontalScroll(step);\r\n    }\r\n\r\n    protected getTargetTotalTop(step: JoyrideStep) {\r\n        let targetVC = step.targetViewContainer;\r\n        return step.isElementOrAncestorFixed\r\n            ? this.documentService.getElementFixedTop(targetVC.element)\r\n            : this.documentService.getElementAbsoluteTop(targetVC.element);\r\n    }\r\n\r\n    protected getTargetTotalLeft(step: JoyrideStep) {\r\n        let targetVC = step.targetViewContainer;\r\n\r\n        return step.isElementOrAncestorFixed\r\n            ? this.documentService.getElementFixedLeft(targetVC.element)\r\n            : this.documentService.getElementAbsoluteLeft(targetVC.element);\r\n    }\r\n    redraw(step: JoyrideStep, scroll: Scroll) {\r\n        if (this.lastYScroll !== scroll.scrollY) {\r\n            this.lastYScroll = scroll.scrollY;\r\n            if (this.elementRef) {\r\n                this.handleVerticalScroll(step);\r\n            }\r\n        }\r\n        if (this.lastXScroll !== scroll.scrollX) {\r\n            this.lastXScroll = scroll.scrollX;\r\n            if (this.elementRef) {\r\n                this.handleHorizontalScroll(step);\r\n            }\r\n        }\r\n    }\r\n\r\n    protected handleHorizontalScroll(step: JoyrideStep) {\r\n        let newBackdropLeftWidth = step.isElementOrAncestorFixed ? this.targetAbsoluteLeft : this.targetAbsoluteLeft - this.lastXScroll;\r\n\r\n        if (newBackdropLeftWidth >= 0) {\r\n            this.renderer.setStyle(this.leftBackdrop, 'width', newBackdropLeftWidth + 'px');\r\n            this.renderer.setStyle(this.targetBackdrop, 'width', this.elementRef.element.nativeElement.offsetWidth + 'px');\r\n        } else {\r\n            this.handleTargetPartialWidth(newBackdropLeftWidth);\r\n        }\r\n    }\r\n\r\n    protected handleTargetPartialWidth(newBackdropLeftWidth: number) {\r\n        this.renderer.setStyle(this.leftBackdrop, 'width', 0 + 'px');\r\n        let visibleTargetWidth = this.elementRef.element.nativeElement.offsetWidth + newBackdropLeftWidth;\r\n        if (visibleTargetWidth >= 0) {\r\n            this.renderer.setStyle(this.targetBackdrop, 'width', visibleTargetWidth + 'px');\r\n        } else {\r\n            this.renderer.setStyle(this.targetBackdrop, 'width', 0 + 'px');\r\n        }\r\n    }\r\n\r\n    protected handleVerticalScroll(step: JoyrideStep) {\r\n        let newBackdropTopHeight = step.isElementOrAncestorFixed ? this.targetAbsoluteTop : this.targetAbsoluteTop - this.lastYScroll;\r\n\r\n        if (newBackdropTopHeight >= 0) {\r\n            this.renderer.setStyle(this.backdropTop, 'height', newBackdropTopHeight + 'px');\r\n            this.renderer.setStyle(this.backdropMiddleContainer, 'height', this.elementRef.element.nativeElement.offsetHeight + 'px');\r\n        } else {\r\n            this.handleTargetPartialHeight(newBackdropTopHeight);\r\n        }\r\n    }\r\n\r\n    protected handleTargetPartialHeight(newBackdropTopHeight: number) {\r\n        this.renderer.setStyle(this.backdropTop, 'height', 0 + 'px');\r\n        let visibleTargetHeight = this.elementRef.element.nativeElement.offsetHeight + newBackdropTopHeight;\r\n        if (visibleTargetHeight >= 0) {\r\n            this.renderer.setStyle(this.backdropMiddleContainer, 'height', visibleTargetHeight + 'px');\r\n        } else {\r\n            this.renderer.setStyle(this.backdropMiddleContainer, 'height', 0 + 'px');\r\n        }\r\n    }\r\n\r\n    protected removeLastBackdrop() {\r\n        if (this.lastBackdropContainer) {\r\n            this.renderer.removeChild(document.body, this.lastBackdropContainer);\r\n            this.lastBackdropContainer = undefined;\r\n        }\r\n    }\r\n\r\n    protected drawCurrentBackdrop() {\r\n        this.renderer.appendChild(document.body, this.currentBackdropContainer);\r\n    }\r\n}\r\n","import { Injectable, Renderer2, RendererFactory2 } from '@angular/core';\r\nimport { Subject } from 'rxjs';\r\nimport { DomRefService } from './dom.service';\r\n\r\nexport class Scroll {\r\n    scrollX: number;\r\n    scrollY: number;\r\n}\r\n\r\n@Injectable()\r\nexport class EventListenerService {\r\n    protected renderer: Renderer2;\r\n    protected scrollUnlisten: any;\r\n    protected resizeUnlisten: any;\r\n\r\n    scrollEvent: Subject<Scroll> = new Subject<Scroll>();\r\n    resizeEvent: Subject<number> = new Subject<number>();\r\n\r\n    constructor(protected readonly rendererFactory: RendererFactory2, protected readonly DOMService: DomRefService) {\r\n        this.renderer = rendererFactory.createRenderer(null, null);\r\n    }\r\n\r\n    startListeningScrollEvents() {\r\n        this.scrollUnlisten = this.renderer.listen('document', 'scroll', evt => {\r\n            this.scrollEvent.next({\r\n                scrollX: this.DOMService.getNativeWindow().pageXOffset,\r\n                scrollY: this.DOMService.getNativeWindow().pageYOffset\r\n            });\r\n        });\r\n    }\r\n\r\n    startListeningResizeEvents() {\r\n        this.resizeUnlisten = this.renderer.listen('window', 'resize', evt => {\r\n            this.resizeEvent.next(evt);\r\n        });\r\n    }\r\n\r\n    stopListeningScrollEvents() {\r\n        this.scrollUnlisten();\r\n    }\r\n\r\n    stopListeningResizeEvents() {\r\n        this.resizeUnlisten();\r\n    }\r\n}\r\n","import {\r\n    Component,\r\n    Input,\r\n    AfterViewInit,\r\n    ViewEncapsulation,\r\n    OnInit,\r\n    OnDestroy,\r\n    ElementRef,\r\n    ViewChild,\r\n    Renderer2,\r\n    Injector,\r\n    TemplateRef\r\n} from '@angular/core';\r\nimport { JoyrideStep } from '../../models/joyride-step.class';\r\nimport { JoyrideStepService, ARROW_SIZE, DISTANCE_FROM_TARGET, IJoyrideStepService } from '../../services/joyride-step.service';\r\nimport { JoyrideStepsContainerService } from '../../services/joyride-steps-container.service';\r\nimport { EventListenerService } from '../../services/event-listener.service';\r\nimport { Subscription, Observable } from 'rxjs';\r\nimport { DocumentService } from '../../services/document.service';\r\nimport { JoyrideOptionsService } from '../../services/joyride-options.service';\r\nimport { LoggerService } from '../../services/logger.service';\r\nimport { TemplatesService } from '../../services/templates.service';\r\n\r\nconst STEP_MIN_WIDTH = 200;\r\nconst STEP_MAX_WIDTH = 400;\r\nconst CUSTOM_STEP_MAX_WIDTH_VW = 90;\r\nconst STEP_HEIGHT = 200;\r\nconst ASPECT_RATIO = 1.212;\r\nexport const DEFAULT_DISTANCE_FROM_MARGIN_TOP = 2;\r\nexport const DEFAULT_DISTANCE_FROM_MARGIN_LEFT = 2;\r\nconst DEFAULT_DISTANCE_FROM_MARGIN_BOTTOM = 5;\r\nconst DEFAULT_DISTANCE_FROM_MARGIN_RIGHT = 5;\r\n\r\n@Component({\r\n    selector: 'joyride-step',\r\n    templateUrl: './joyride-step.component.html',\r\n    styleUrls: ['./joyride-step.component.scss'],\r\n    encapsulation: ViewEncapsulation.None\r\n})\r\nexport class JoyrideStepComponent implements OnInit, OnDestroy, AfterViewInit {\r\n    stepWidth: number = STEP_MIN_WIDTH;\r\n    stepHeight: number = STEP_HEIGHT;\r\n    leftPosition: number;\r\n    topPosition: number;\r\n    showArrow: boolean = true;\r\n    arrowPosition: string;\r\n    arrowLeftPosition: number;\r\n    arrowTopPosition: number;\r\n    title: Observable<string>;\r\n    text: Observable<string>;\r\n    counter: string;\r\n    isCounterVisible: boolean;\r\n    isPrevButtonVisible: boolean;\r\n    themeColor: string;\r\n    customContent: TemplateRef<any>;\r\n    customPrevButton: TemplateRef<any>;\r\n    customNextButton: TemplateRef<any>;\r\n    customDoneButton: TemplateRef<any>;\r\n    customCounter: TemplateRef<any>;\r\n    counterData: any;\r\n    ctx: Object;\r\n\r\n    protected arrowSize: number = ARROW_SIZE;\r\n    protected stepAbsoluteLeft: number;\r\n    protected stepAbsoluteTop: number;\r\n    protected targetWidth: number;\r\n    targetHeight: number;\r\n    protected targetAbsoluteLeft: number;\r\n    protected targetAbsoluteTop: number;\r\n\r\n    protected subscriptions: Subscription[] = [];\r\n    joyrideStepService: IJoyrideStepService;\r\n\r\n    protected positionAlreadyFixed: boolean;\r\n    protected documentHeight: number;\r\n\r\n    prevText: Observable<string>;\r\n    nextText: Observable<string>;\r\n    doneText: Observable<string>;\r\n\r\n    @Input() step?: JoyrideStep;\r\n    @ViewChild('stepHolder') stepHolder: ElementRef;\r\n    @ViewChild('stepContainer') stepContainer: ElementRef;\r\n\r\n    constructor(\r\n        protected injector: Injector,\r\n        protected readonly stepsContainerService: JoyrideStepsContainerService,\r\n        protected readonly eventListenerService: EventListenerService,\r\n        protected readonly documentService: DocumentService,\r\n        protected readonly renderer: Renderer2,\r\n        protected readonly logger: LoggerService,\r\n        protected readonly optionsService: JoyrideOptionsService,\r\n        protected readonly templateService: TemplatesService\r\n    ) {}\r\n\r\n    ngOnInit(): void {\r\n        // Need to Inject here otherwise you will obtain a circular dependency\r\n        this.joyrideStepService = this.injector.get(JoyrideStepService);\r\n\r\n        this.documentHeight = this.documentService.getDocumentHeight();\r\n        this.subscriptions.push(this.subscribeToResizeEvents());\r\n        this.title = this.step.title.asObservable();\r\n        this.text = this.step.text.asObservable();\r\n\r\n        this.setCustomTemplates();\r\n        this.setCustomTexts();\r\n\r\n        this.counter = this.getCounter();\r\n        this.isCounterVisible = this.optionsService.isCounterVisible();\r\n        this.isPrevButtonVisible = this.optionsService.isPrevButtonVisible();\r\n        this.themeColor = this.optionsService.getThemeColor();\r\n\r\n        if (this.text) this.text.subscribe(val => this.checkRedraw(val));\r\n        if (this.title) this.title.subscribe(val => this.checkRedraw(val));\r\n    }\r\n\r\n    ngAfterViewInit() {\r\n        if (this.isCustomized()) {\r\n            this.renderer.setStyle(this.stepContainer.nativeElement, 'max-width', CUSTOM_STEP_MAX_WIDTH_VW + 'vw');\r\n            this.updateStepDimensions();\r\n        } else {\r\n            this.renderer.setStyle(this.stepContainer.nativeElement, 'max-width', STEP_MAX_WIDTH + 'px');\r\n            let dimensions = this.getDimensionsByAspectRatio(\r\n                this.stepContainer.nativeElement.clientWidth,\r\n                this.stepContainer.nativeElement.clientHeight,\r\n                ASPECT_RATIO\r\n            );\r\n            dimensions = this.adjustDimensions(dimensions.width, dimensions.height);\r\n            this.stepWidth = dimensions.width;\r\n            this.stepHeight = dimensions.height;\r\n            this.renderer.setStyle(this.stepContainer.nativeElement, 'width', this.stepWidth + 'px');\r\n            this.renderer.setStyle(this.stepContainer.nativeElement, 'height', this.stepHeight + 'px');\r\n        }\r\n        this.drawStep();\r\n    }\r\n\r\n    protected checkRedraw(val) {\r\n        if (val != null) {\r\n            // Need to wait that the change is rendered before redrawing\r\n            setTimeout(() => {\r\n                this.redrawStep();\r\n            }, 2);\r\n        }\r\n    }\r\n\r\n    protected isCustomized() {\r\n        return (\r\n            this.step.stepContent ||\r\n            this.templateService.getCounter() ||\r\n            this.templateService.getPrevButton() ||\r\n            this.templateService.getNextButton() ||\r\n            this.templateService.getDoneButton()\r\n        );\r\n    }\r\n\r\n    protected setCustomTexts() {\r\n        const customeTexts = this.optionsService.getCustomTexts();\r\n        this.prevText = customeTexts.prev;\r\n        this.nextText = customeTexts.next;\r\n        this.doneText = customeTexts.done;\r\n    }\r\n\r\n    protected drawStep() {\r\n        let position = this.step.isElementOrAncestorFixed ? 'fixed' : 'absolute';\r\n        this.renderer.setStyle(this.stepHolder.nativeElement, 'position', position);\r\n        this.renderer.setStyle(this.stepHolder.nativeElement, 'transform', this.step.transformCssStyle);\r\n        this.targetWidth = this.step.targetViewContainer.element.nativeElement.getBoundingClientRect().width;\r\n        this.targetHeight = this.step.targetViewContainer.element.nativeElement.getBoundingClientRect().height;\r\n        this.targetAbsoluteLeft =\r\n            position === 'fixed'\r\n                ? this.documentService.getElementFixedLeft(this.step.targetViewContainer.element)\r\n                : this.documentService.getElementAbsoluteLeft(this.step.targetViewContainer.element);\r\n        this.targetAbsoluteTop =\r\n            position === 'fixed'\r\n                ? this.documentService.getElementFixedTop(this.step.targetViewContainer.element)\r\n                : this.documentService.getElementAbsoluteTop(this.step.targetViewContainer.element);\r\n        this.setStepStyle();\r\n    }\r\n\r\n    protected getCounter(): string {\r\n        let stepPosition = this.stepsContainerService.getStepNumber(this.step.name);\r\n        let numberOfSteps = this.stepsContainerService.getStepsCount();\r\n        this.counterData = { step: stepPosition, total: numberOfSteps };\r\n        return stepPosition + '/' + numberOfSteps;\r\n    }\r\n\r\n    protected setCustomTemplates() {\r\n        this.customContent = this.step.stepContent;\r\n        this.ctx = this.step.stepContentParams;\r\n        this.customPrevButton = this.templateService.getPrevButton();\r\n        this.customNextButton = this.templateService.getNextButton();\r\n        this.customDoneButton = this.templateService.getDoneButton();\r\n        this.customCounter = this.templateService.getCounter();\r\n    }\r\n\r\n    prev() {\r\n        this.joyrideStepService.prev();\r\n    }\r\n\r\n    next() {\r\n        this.joyrideStepService.next();\r\n    }\r\n\r\n    close() {\r\n        this.joyrideStepService.close();\r\n    }\r\n\r\n    isFirstStep() {\r\n        return this.stepsContainerService.getStepNumber(this.step.name) === 1;\r\n    }\r\n\r\n    isLastStep() {\r\n        return this.stepsContainerService.getStepNumber(this.step.name) === this.stepsContainerService.getStepsCount();\r\n    }\r\n\r\n    protected setStepStyle() {\r\n        switch (this.step.position) {\r\n            case 'top': {\r\n                this.setStyleTop();\r\n                break;\r\n            }\r\n            case 'bottom': {\r\n                this.setStyleBottom();\r\n                break;\r\n            }\r\n            case 'right': {\r\n                this.setStyleRight();\r\n                break;\r\n            }\r\n            case 'left': {\r\n                this.setStyleLeft();\r\n                break;\r\n            }\r\n            case 'center': {\r\n                this.setStyleCenter();\r\n                break;\r\n            }\r\n            default: {\r\n                this.setStyleBottom();\r\n            }\r\n        }\r\n    }\r\n\r\n    protected setStyleTop() {\r\n        this.stepsContainerService.updatePosition(this.step.name, 'top');\r\n        this.topPosition = this.targetAbsoluteTop - DISTANCE_FROM_TARGET - this.stepHeight;\r\n        this.stepAbsoluteTop = this.targetAbsoluteTop - DISTANCE_FROM_TARGET - this.stepHeight;\r\n        this.arrowTopPosition = this.stepHeight;\r\n\r\n        this.leftPosition = this.targetWidth / 2 - this.stepWidth / 2 + this.targetAbsoluteLeft;\r\n        this.stepAbsoluteLeft = this.targetWidth / 2 - this.stepWidth / 2 + this.targetAbsoluteLeft;\r\n        this.arrowLeftPosition = this.stepWidth / 2 - this.arrowSize;\r\n        this.adjustLeftPosition();\r\n        this.adjustRightPosition();\r\n        this.arrowPosition = 'bottom';\r\n        this.autofixTopPosition();\r\n    }\r\n\r\n    protected setStyleRight() {\r\n        this.stepsContainerService.updatePosition(this.step.name, 'right');\r\n        this.topPosition = this.targetAbsoluteTop + this.targetHeight / 2 - this.stepHeight / 2;\r\n        this.stepAbsoluteTop = this.targetAbsoluteTop + this.targetHeight / 2 - this.stepHeight / 2;\r\n        this.arrowTopPosition = this.stepHeight / 2 - this.arrowSize;\r\n\r\n        this.leftPosition = this.targetAbsoluteLeft + this.targetWidth + DISTANCE_FROM_TARGET;\r\n        this.stepAbsoluteLeft = this.targetAbsoluteLeft + this.targetWidth + DISTANCE_FROM_TARGET;\r\n        this.arrowLeftPosition = -this.arrowSize;\r\n        this.adjustTopPosition();\r\n        this.adjustBottomPosition();\r\n        this.arrowPosition = 'left';\r\n        this.autofixRightPosition();\r\n    }\r\n\r\n    protected setStyleBottom() {\r\n        this.stepsContainerService.updatePosition(this.step.name, 'bottom');\r\n        this.topPosition = this.targetAbsoluteTop + this.targetHeight + DISTANCE_FROM_TARGET;\r\n        this.stepAbsoluteTop = this.targetAbsoluteTop + this.targetHeight + DISTANCE_FROM_TARGET;\r\n        this.arrowTopPosition = -this.arrowSize;\r\n\r\n        this.arrowLeftPosition = this.stepWidth / 2 - this.arrowSize;\r\n        this.leftPosition = this.targetWidth / 2 - this.stepWidth / 2 + this.targetAbsoluteLeft;\r\n        this.stepAbsoluteLeft = this.targetWidth / 2 - this.stepWidth / 2 + this.targetAbsoluteLeft;\r\n        this.adjustLeftPosition();\r\n        this.adjustRightPosition();\r\n        this.arrowPosition = 'top';\r\n        this.autofixBottomPosition();\r\n    }\r\n\r\n    protected setStyleLeft() {\r\n        this.stepsContainerService.updatePosition(this.step.name, 'left');\r\n        this.topPosition = this.targetAbsoluteTop + this.targetHeight / 2 - this.stepHeight / 2;\r\n        this.stepAbsoluteTop = this.targetAbsoluteTop + this.targetHeight / 2 - this.stepHeight / 2;\r\n        this.arrowTopPosition = this.stepHeight / 2 - this.arrowSize;\r\n\r\n        this.leftPosition = this.targetAbsoluteLeft - this.stepWidth - DISTANCE_FROM_TARGET;\r\n        this.stepAbsoluteLeft = this.targetAbsoluteLeft - this.stepWidth - DISTANCE_FROM_TARGET;\r\n        this.arrowLeftPosition = this.stepWidth;\r\n        this.adjustTopPosition();\r\n        this.adjustBottomPosition();\r\n        this.arrowPosition = 'right';\r\n        this.autofixLeftPosition();\r\n    }\r\n\r\n    protected setStyleCenter() {\r\n        this.renderer.setStyle(this.stepHolder.nativeElement, 'position', 'fixed');\r\n        this.renderer.setStyle(this.stepHolder.nativeElement, 'top', '50%');\r\n        this.renderer.setStyle(this.stepHolder.nativeElement, 'left', '50%');\r\n\r\n        this.updateStepDimensions();\r\n\r\n        this.renderer.setStyle(\r\n            this.stepHolder.nativeElement,\r\n            'transform',\r\n            `translate(-${this.stepWidth / 2}px, -${this.stepHeight / 2}px)`\r\n        );\r\n        this.showArrow = false;\r\n    }\r\n\r\n    protected adjustLeftPosition() {\r\n        if (this.leftPosition < 0) {\r\n            this.arrowLeftPosition = this.arrowLeftPosition + this.leftPosition - DEFAULT_DISTANCE_FROM_MARGIN_LEFT;\r\n            this.leftPosition = DEFAULT_DISTANCE_FROM_MARGIN_LEFT;\r\n        }\r\n    }\r\n\r\n    protected adjustRightPosition() {\r\n        let currentWindowWidth = document.body.clientWidth;\r\n        if (this.stepAbsoluteLeft + this.stepWidth > currentWindowWidth) {\r\n            let newLeftPos =\r\n                this.leftPosition - (this.stepAbsoluteLeft + this.stepWidth + DEFAULT_DISTANCE_FROM_MARGIN_RIGHT - currentWindowWidth);\r\n            let deltaLeftPosition = newLeftPos - this.leftPosition;\r\n\r\n            this.leftPosition = newLeftPos;\r\n            this.arrowLeftPosition = this.arrowLeftPosition - deltaLeftPosition;\r\n        }\r\n    }\r\n\r\n    protected adjustTopPosition() {\r\n        if (this.stepAbsoluteTop < 0) {\r\n            this.arrowTopPosition = this.arrowTopPosition + this.topPosition - DEFAULT_DISTANCE_FROM_MARGIN_TOP;\r\n            this.topPosition = DEFAULT_DISTANCE_FROM_MARGIN_TOP;\r\n        }\r\n    }\r\n\r\n    protected adjustBottomPosition() {\r\n        if (this.stepAbsoluteTop + this.stepHeight > this.documentHeight) {\r\n            let newTopPos =\r\n                this.topPosition - (this.stepAbsoluteTop + this.stepHeight + DEFAULT_DISTANCE_FROM_MARGIN_BOTTOM - this.documentHeight);\r\n            let deltaTopPosition = newTopPos - this.topPosition;\r\n\r\n            this.topPosition = newTopPos;\r\n            this.arrowTopPosition = this.arrowTopPosition - deltaTopPosition;\r\n        }\r\n    }\r\n\r\n    protected autofixTopPosition() {\r\n        if (this.positionAlreadyFixed) {\r\n            this.logger.warn('No step positions found for this step. The step will be centered.');\r\n        } else if (this.targetAbsoluteTop - this.stepHeight - this.arrowSize < 0) {\r\n            this.positionAlreadyFixed = true;\r\n            this.setStyleRight();\r\n        }\r\n    }\r\n\r\n    protected autofixRightPosition() {\r\n        if (this.targetAbsoluteLeft + this.targetWidth + this.stepWidth + this.arrowSize > document.body.clientWidth) {\r\n            this.setStyleBottom();\r\n        }\r\n    }\r\n\r\n    protected autofixBottomPosition() {\r\n        if (this.targetAbsoluteTop + this.stepHeight + this.arrowSize + this.targetHeight > this.documentHeight) {\r\n            this.setStyleLeft();\r\n        }\r\n    }\r\n\r\n    protected autofixLeftPosition() {\r\n        if (this.targetAbsoluteLeft - this.stepWidth - this.arrowSize < 0) {\r\n            this.setStyleTop();\r\n        }\r\n    }\r\n\r\n    protected subscribeToResizeEvents(): Subscription {\r\n        return this.eventListenerService.resizeEvent.subscribe(() => {\r\n            this.redrawStep();\r\n        });\r\n    }\r\n\r\n    protected redrawStep() {\r\n        this.updateStepDimensions();\r\n        this.drawStep();\r\n    }\r\n\r\n    protected getDimensionsByAspectRatio(width: number, height: number, aspectRatio: number) {\r\n        let calcHeight = (width + height) / (1 + aspectRatio);\r\n        let calcWidth = calcHeight * aspectRatio;\r\n        return {\r\n            width: calcWidth,\r\n            height: calcHeight\r\n        };\r\n    }\r\n    protected adjustDimensions(width: number, height: number) {\r\n        let area = width * height;\r\n        let newWidth = width;\r\n        let newHeight = height;\r\n        if (width > STEP_MAX_WIDTH) {\r\n            newWidth = STEP_MAX_WIDTH;\r\n            newHeight = area / newWidth;\r\n        } else if (width < STEP_MIN_WIDTH) {\r\n            newWidth = STEP_MIN_WIDTH;\r\n            newHeight = STEP_MIN_WIDTH / ASPECT_RATIO;\r\n        }\r\n        return {\r\n            width: newWidth,\r\n            height: newHeight\r\n        };\r\n    }\r\n\r\n    protected updateStepDimensions() {\r\n        this.stepWidth = this.stepContainer.nativeElement.clientWidth;\r\n        this.stepHeight = this.stepContainer.nativeElement.clientHeight;\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.subscriptions.forEach(subscription => {\r\n            subscription.unsubscribe();\r\n        });\r\n    }\r\n}\r\n","import { Injectable, ComponentRef, ComponentFactoryResolver, ApplicationRef, Injector, EmbeddedViewRef } from '@angular/core';\r\nimport { JoyrideStepComponent } from \"../components/step/joyride-step.component\";\r\nimport { JoyrideStep } from '../models/joyride-step.class';\r\n\r\n@Injectable()\r\nexport class StepDrawerService {\r\n\r\n    protected refMap: { [key: string]: ComponentRef<JoyrideStepComponent>; } = {};\r\n\r\n    constructor(\r\n        protected readonly componentFactoryResolver: ComponentFactoryResolver,\r\n        protected appRef: ApplicationRef,\r\n        protected injector: Injector\r\n    ) { }\r\n\r\n    draw(step: JoyrideStep) {\r\n\r\n        // 1. Create a component reference from the component \r\n        const ref: ComponentRef<JoyrideStepComponent> = this.componentFactoryResolver\r\n            .resolveComponentFactory(JoyrideStepComponent)\r\n            .create(this.injector);\r\n\r\n        // 2. Attach component to the appRef so that it's inside the ng component tree\r\n        this.appRef.attachView(ref.hostView);\r\n\r\n        // 3. Get DOM element from component\r\n        const domElem = (ref.hostView as EmbeddedViewRef<any>)\r\n            .rootNodes[0] as HTMLElement;\r\n\r\n        // 4. Append DOM element to the body\r\n        document.body.appendChild(domElem);\r\n\r\n        const instance: JoyrideStepComponent = ref.instance;\r\n        instance.step = step;\r\n        ref.changeDetectorRef.detectChanges();\r\n        step.stepInstance = instance;\r\n\r\n        this.refMap[step.name] = ref;\r\n\r\n    }\r\n\r\n    remove(step: JoyrideStep) {\r\n        this.appRef.detachView(this.refMap[step.name].hostView);\r\n        this.refMap[step.name].destroy();\r\n    }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { JoyrideStep } from '../models/joyride-step.class';\r\nimport { JoyrideBackdropService } from './joyride-backdrop.service';\r\nimport { EventListenerService } from './event-listener.service';\r\nimport { JoyrideStepsContainerService, StepActionType } from './joyride-steps-container.service';\r\nimport { DocumentService } from './document.service';\r\nimport { StepDrawerService } from './step-drawer.service';\r\nimport { DomRefService } from './dom.service';\r\nimport { NO_POSITION } from '../directives/joyride.directive';\r\nimport { JoyrideOptionsService } from './joyride-options.service';\r\nimport { Router } from '@angular/router';\r\nimport { ReplaySubject, Observable } from 'rxjs';\r\nimport { JoyrideStepInfo } from '../models/joyride-step-info.class';\r\nimport { JoyrideStepDoesNotExist, JoyrideStepOutOfRange } from '../models/joyride-error.class';\r\nimport { LoggerService } from './logger.service';\r\n\r\nconst SCROLLBAR_SIZE = 20;\r\n\r\nexport const DISTANCE_FROM_TARGET = 15;\r\nexport const ARROW_SIZE = 10;\r\n\r\nexport interface IJoyrideStepService {\r\n    startTour(): Observable<JoyrideStepInfo>;\r\n    close(): any;\r\n    prev(): any;\r\n    next(): any;\r\n}\r\n\r\n@Injectable()\r\nexport class JoyrideStepService implements IJoyrideStepService {\r\n    protected currentStep: JoyrideStep;\r\n    protected winTopPosition: number = 0;\r\n    protected winBottomPosition: number = 0;\r\n    protected stepsObserver: ReplaySubject<JoyrideStepInfo> = new ReplaySubject<JoyrideStepInfo>();\r\n\r\n    constructor(\r\n        protected readonly backDropService: JoyrideBackdropService,\r\n        protected readonly eventListener: EventListenerService,\r\n        protected readonly stepsContainerService: JoyrideStepsContainerService,\r\n        protected readonly documentService: DocumentService,\r\n        protected readonly DOMService: DomRefService,\r\n        protected readonly stepDrawerService: StepDrawerService,\r\n        protected readonly optionsService: JoyrideOptionsService,\r\n        protected readonly router: Router,\r\n        protected readonly logger: LoggerService\r\n    ) {\r\n        this.initViewportPositions();\r\n        this.subscribeToScrollEvents();\r\n        this.subscribeToResizeEvents();\r\n    }\r\n\r\n    protected initViewportPositions() {\r\n        this.winTopPosition = 0;\r\n        this.winBottomPosition = this.DOMService.getNativeWindow().innerHeight - SCROLLBAR_SIZE;\r\n    }\r\n\r\n    protected subscribeToScrollEvents() {\r\n        this.eventListener.startListeningScrollEvents();\r\n        this.eventListener.scrollEvent.subscribe(scroll => {\r\n            this.winTopPosition = scroll.scrollY;\r\n            this.winBottomPosition = this.winTopPosition + this.DOMService.getNativeWindow().innerHeight - SCROLLBAR_SIZE;\r\n            if (this.currentStep) this.backDropService.redraw(this.currentStep, scroll);\r\n        });\r\n    }\r\n\r\n    protected subscribeToResizeEvents() {\r\n        this.eventListener.resizeEvent.subscribe(() => {\r\n            if (this.currentStep) this.backDropService.redrawTarget(this.currentStep);\r\n        });\r\n    }\r\n\r\n    protected drawStep(step: JoyrideStep) {\r\n        step.position = step.position === NO_POSITION ? this.optionsService.getStepDefaultPosition() : step.position;\r\n        this.stepDrawerService.draw(step);\r\n    }\r\n\r\n    startTour(): Observable<JoyrideStepInfo> {\r\n        this.stepsObserver = new ReplaySubject<JoyrideStepInfo>();\r\n        this.stepsContainerService.init();\r\n        this.documentService.setDocumentHeight();\r\n\r\n        this.tryShowStep(StepActionType.NEXT);\r\n        this.eventListener.startListeningResizeEvents();\r\n        this.subscribeToStepsUpdates();\r\n        return this.stepsObserver.asObservable();\r\n    }\r\n\r\n    close() {\r\n        this.removeCurrentStep();\r\n        this.notifyTourIsFinished();\r\n        this.DOMService.getNativeWindow().scrollTo(0, 0);\r\n        this.eventListener.stopListeningResizeEvents();\r\n        this.backDropService.remove();\r\n    }\r\n\r\n    prev() {\r\n        this.removeCurrentStep();\r\n        this.currentStep.prevCliked.emit();\r\n        this.tryShowStep(StepActionType.PREV);\r\n    }\r\n\r\n    next() {\r\n        this.removeCurrentStep();\r\n        this.currentStep.nextClicked.emit();\r\n        this.tryShowStep(StepActionType.NEXT);\r\n    }\r\n\r\n    protected navigateToStepPage(action: StepActionType) {\r\n        let stepRoute = this.stepsContainerService.getStepRoute(action);\r\n        if (stepRoute) {\r\n            this.router.navigate([stepRoute]);\r\n        }\r\n    }\r\n\r\n    protected subscribeToStepsUpdates() {\r\n        this.stepsContainerService.stepHasBeenModified.subscribe(updatedStep => {\r\n            if (this.currentStep && this.currentStep.name === updatedStep.name) {\r\n                this.currentStep = updatedStep;\r\n            }\r\n        });\r\n    }\r\n\r\n    protected tryShowStep(actionType: StepActionType) {\r\n        this.navigateToStepPage(actionType);\r\n        const timeout = this.optionsService.getWaitingTime();\r\n        if (timeout > 100) this.backDropService.remove();\r\n        setTimeout(() => {\r\n            try {\r\n                this.showStep(actionType);\r\n            } catch (error) {\r\n                if (error instanceof JoyrideStepDoesNotExist) {\r\n                    this.tryShowStep(actionType);\r\n                } else if (error instanceof JoyrideStepOutOfRange) {\r\n                    this.logger.error('Forcing the tour closure: First or Last step not found in the DOM.');\r\n                    this.close();\r\n                } else {\r\n                    throw new Error(error);\r\n                }\r\n            }\r\n        }, timeout);\r\n    }\r\n\r\n    protected showStep(actionType: StepActionType) {\r\n        this.currentStep = this.stepsContainerService.get(actionType);\r\n\r\n        if (this.currentStep == null) throw new JoyrideStepDoesNotExist('');\r\n        // Scroll the element to get it visible if it's in a scrollable element\r\n        this.scrollIfElementBeyondOtherElements();\r\n        this.backDropService.draw(this.currentStep);\r\n        this.drawStep(this.currentStep);\r\n        this.scrollIfStepAndTargetAreNotVisible();\r\n        this.notifyStepClicked(actionType);\r\n    }\r\n\r\n    protected notifyStepClicked(actionType: StepActionType) {\r\n        let stepInfo: JoyrideStepInfo = {\r\n            number: this.stepsContainerService.getStepNumber(this.currentStep.name),\r\n            name: this.currentStep.name,\r\n            route: this.currentStep.route,\r\n            actionType\r\n        };\r\n        this.stepsObserver.next(stepInfo);\r\n    }\r\n\r\n    protected notifyTourIsFinished() {\r\n        if (this.currentStep) this.currentStep.tourDone.emit();\r\n        this.stepsObserver.complete();\r\n    }\r\n    protected removeCurrentStep() {\r\n        if (this.currentStep) this.stepDrawerService.remove(this.currentStep);\r\n    }\r\n\r\n    protected scrollIfStepAndTargetAreNotVisible() {\r\n        this.scrollWhenTargetOrStepAreHiddenBottom();\r\n        this.scrollWhenTargetOrStepAreHiddenTop();\r\n    }\r\n\r\n    protected scrollWhenTargetOrStepAreHiddenBottom() {\r\n        let totalTargetBottom = this.getMaxTargetAndStepBottomPosition();\r\n        if (totalTargetBottom > this.winBottomPosition) {\r\n            this.DOMService.getNativeWindow().scrollBy(0, totalTargetBottom - this.winBottomPosition);\r\n        }\r\n    }\r\n\r\n    protected scrollWhenTargetOrStepAreHiddenTop() {\r\n        let totalTargetTop = this.getMaxTargetAndStepTopPosition();\r\n        if (totalTargetTop < this.winTopPosition) {\r\n            this.DOMService.getNativeWindow().scrollBy(0, totalTargetTop - this.winTopPosition);\r\n        }\r\n    }\r\n\r\n    protected getMaxTargetAndStepBottomPosition(): number {\r\n        let targetAbsoluteTop = this.documentService.getElementAbsoluteTop(this.currentStep.targetViewContainer.element);\r\n        if (this.currentStep.position === 'top') {\r\n            return targetAbsoluteTop + this.currentStep.stepInstance.targetHeight;\r\n        } else if (this.currentStep.position === 'bottom') {\r\n            return (\r\n                targetAbsoluteTop +\r\n                this.currentStep.stepInstance.targetHeight +\r\n                this.currentStep.stepInstance.stepHeight +\r\n                ARROW_SIZE +\r\n                DISTANCE_FROM_TARGET\r\n            );\r\n        } else if (this.currentStep.position === 'right' || this.currentStep.position === 'left') {\r\n            return Math.max(\r\n                targetAbsoluteTop + this.currentStep.stepInstance.targetHeight,\r\n                targetAbsoluteTop + this.currentStep.stepInstance.targetHeight / 2 + this.currentStep.stepInstance.stepHeight / 2\r\n            );\r\n        }\r\n    }\r\n\r\n    protected getMaxTargetAndStepTopPosition() {\r\n        let targetAbsoluteTop = this.documentService.getElementAbsoluteTop(this.currentStep.targetViewContainer.element);\r\n        if (this.currentStep.position === 'top') {\r\n            return targetAbsoluteTop - (this.currentStep.stepInstance.stepHeight + ARROW_SIZE + DISTANCE_FROM_TARGET);\r\n        } else if (this.currentStep.position === 'bottom') {\r\n            return targetAbsoluteTop;\r\n        } else if (this.currentStep.position === 'right' || this.currentStep.position === 'left') {\r\n            return Math.min(\r\n                targetAbsoluteTop,\r\n                targetAbsoluteTop + this.currentStep.stepInstance.targetHeight / 2 - this.currentStep.stepInstance.stepHeight / 2\r\n            );\r\n        }\r\n    }\r\n\r\n    protected scrollIfElementBeyondOtherElements() {\r\n        // if (this.isElementBeyondOthers() === 2) {\r\n        //     this.documentService.scrollToTheTop(this.currentStep.targetViewContainer.element);\r\n        // }\r\n        // if (this.isElementBeyondOthers() === 2) {\r\n        //     this.documentService.scrollToTheBottom(this.currentStep.targetViewContainer.element);\r\n        // }\r\n        // if (this.isElementBeyondOthers() === 1 && this.documentService.isParentScrollable(this.currentStep.targetViewContainer.element)) {\r\n        //     this.documentService.scrollIntoView(this.currentStep.targetViewContainer.element, this.currentStep.isElementOrAncestorFixed);\r\n        // }\r\n        // if (this.isElementBeyondOthers() === 1 && this.documentService.isParentScrollable(this.currentStep.targetViewContainer.element)) {\r\n        //     this.currentStep.targetViewContainer.element.nativeElement.scrollIntoView();\r\n        // }\r\n        this.documentService.scrollIntoView(this.currentStep.targetViewContainer.element, this.currentStep.isElementOrAncestorFixed);\r\n    }\r\n\r\n    protected isElementBeyondOthers() {\r\n        return this.documentService.isElementBeyondOthers(\r\n            this.currentStep.targetViewContainer.element,\r\n            this.currentStep.isElementOrAncestorFixed,\r\n            'backdrop'\r\n        );\r\n    }\r\n\r\n    public refreshTour() {\r\n        if (this.currentStep) {\r\n            this.scrollIfElementBeyondOtherElements();\r\n            this.backDropService.redrawTarget(this.currentStep);\r\n            this.stepDrawerService.remove(this.currentStep);\r\n            this.drawStep(this.currentStep);\r\n            this.scrollIfStepAndTargetAreNotVisible();\r\n        }\r\n    }\r\n}\r\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","// typeof any so that it we don't have to cast when comparing a result to the error object\n/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nexport var errorObject = { e: {} };\n//# sourceMappingURL=errorObject.js.map\n","/** PURE_IMPORTS_START _errorObject PURE_IMPORTS_END */\nimport { errorObject } from './errorObject';\nvar tryCatchTarget;\nfunction tryCatcher() {\n    try {\n        return tryCatchTarget.apply(this, arguments);\n    }\n    catch (e) {\n        errorObject.e = e;\n        return errorObject;\n    }\n}\nexport function tryCatch(fn) {\n    tryCatchTarget = fn;\n    return tryCatcher;\n}\n//# sourceMappingURL=tryCatch.js.map\n","/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nexport function isFunction(x) {\n    return typeof x === 'function';\n}\n//# sourceMappingURL=isFunction.js.map\n","/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nvar _enable_super_gross_mode_that_will_cause_bad_things = false;\n/**\n * The global configuration object for RxJS, used to configure things\n * like what Promise contructor should used to create Promises\n */\nexport var config = {\n    /**\n     * The promise constructor used by default for methods such as\n     * {@link toPromise} and {@link forEach}\n     */\n    Promise: undefined,\n    /**\n     * If true, turns on synchronous error rethrowing, which is a deprecated behavior\n     * in v6 and higher. This behavior enables bad patterns like wrapping a subscribe\n     * call in a try/catch block. It also enables producer interference, a nasty bug\n     * where a multicast can be broken for all observers by a downstream consumer with\n     * an unhandled error. DO NOT USE THIS FLAG UNLESS IT'S NEEDED TO BY TIME\n     * FOR MIGRATION REASONS.\n     */\n    set useDeprecatedSynchronousErrorHandling(value) {\n        if (value) {\n            var error = /*@__PURE__*/ new Error();\n            /*@__PURE__*/ console.warn('DEPRECATED! RxJS was set to use deprecated synchronous error handling behavior by code at: \\n' + error.stack);\n        }\n        else if (_enable_super_gross_mode_that_will_cause_bad_things) {\n            /*@__PURE__*/ console.log('RxJS: Back to a better error behavior. Thank you. <3');\n        }\n        _enable_super_gross_mode_that_will_cause_bad_things = value;\n    },\n    get useDeprecatedSynchronousErrorHandling() {\n        return _enable_super_gross_mode_that_will_cause_bad_things;\n    },\n};\n//# sourceMappingURL=config.js.map\n","/**\n * Throws an error on another job so that it's picked up by the runtime's\n * uncaught error handling mechanism.\n * @param err the error to throw\n */\n/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nexport function hostReportError(err) {\n    setTimeout(function () { throw err; });\n}\n//# sourceMappingURL=hostReportError.js.map\n","/** PURE_IMPORTS_START _config,_util_hostReportError PURE_IMPORTS_END */\nimport { config } from './config';\nimport { hostReportError } from './util/hostReportError';\nexport var empty = {\n    closed: true,\n    next: function (value) { },\n    error: function (err) {\n        if (config.useDeprecatedSynchronousErrorHandling) {\n            throw err;\n        }\n        else {\n            hostReportError(err);\n        }\n    },\n    complete: function () { }\n};\n//# sourceMappingURL=Observer.js.map\n","/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nexport var isArray = Array.isArray || (function (x) { return x && typeof x.length === 'number'; });\n//# sourceMappingURL=isArray.js.map\n","/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nexport function isObject(x) {\n    return x != null && typeof x === 'object';\n}\n//# sourceMappingURL=isObject.js.map\n","/** PURE_IMPORTS_START tslib PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\n/**\n * An error thrown when one or more errors have occurred during the\n * `unsubscribe` of a {@link Subscription}.\n */\nvar UnsubscriptionError = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(UnsubscriptionError, _super);\n    function UnsubscriptionError(errors) {\n        var _this = _super.call(this, errors ?\n            errors.length + \" errors occurred during unsubscription:\\n  \" + errors.map(function (err, i) { return i + 1 + \") \" + err.toString(); }).join('\\n  ') : '') || this;\n        _this.errors = errors;\n        _this.name = 'UnsubscriptionError';\n        Object.setPrototypeOf(_this, UnsubscriptionError.prototype);\n        return _this;\n    }\n    return UnsubscriptionError;\n}(Error));\nexport { UnsubscriptionError };\n//# sourceMappingURL=UnsubscriptionError.js.map\n","/** PURE_IMPORTS_START _util_isArray,_util_isObject,_util_isFunction,_util_tryCatch,_util_errorObject,_util_UnsubscriptionError PURE_IMPORTS_END */\nimport { isArray } from './util/isArray';\nimport { isObject } from './util/isObject';\nimport { isFunction } from './util/isFunction';\nimport { tryCatch } from './util/tryCatch';\nimport { errorObject } from './util/errorObject';\nimport { UnsubscriptionError } from './util/UnsubscriptionError';\n/**\n * Represents a disposable resource, such as the execution of an Observable. A\n * Subscription has one important method, `unsubscribe`, that takes no argument\n * and just disposes the resource held by the subscription.\n *\n * Additionally, subscriptions may be grouped together through the `add()`\n * method, which will attach a child Subscription to the current Subscription.\n * When a Subscription is unsubscribed, all its children (and its grandchildren)\n * will be unsubscribed as well.\n *\n * @class Subscription\n */\nvar Subscription = /*@__PURE__*/ (function () {\n    /**\n     * @param {function(): void} [unsubscribe] A function describing how to\n     * perform the disposal of resources when the `unsubscribe` method is called.\n     */\n    function Subscription(unsubscribe) {\n        /**\n         * A flag to indicate whether this Subscription has already been unsubscribed.\n         * @type {boolean}\n         */\n        this.closed = false;\n        /** @internal */\n        this._parent = null;\n        /** @internal */\n        this._parents = null;\n        /** @internal */\n        this._subscriptions = null;\n        if (unsubscribe) {\n            this._unsubscribe = unsubscribe;\n        }\n    }\n    /**\n     * Disposes the resources held by the subscription. May, for instance, cancel\n     * an ongoing Observable execution or cancel any other type of work that\n     * started when the Subscription was created.\n     * @return {void}\n     */\n    Subscription.prototype.unsubscribe = function () {\n        var hasErrors = false;\n        var errors;\n        if (this.closed) {\n            return;\n        }\n        var _a = this, _parent = _a._parent, _parents = _a._parents, _unsubscribe = _a._unsubscribe, _subscriptions = _a._subscriptions;\n        this.closed = true;\n        this._parent = null;\n        this._parents = null;\n        // null out _subscriptions first so any child subscriptions that attempt\n        // to remove themselves from this subscription will noop\n        this._subscriptions = null;\n        var index = -1;\n        var len = _parents ? _parents.length : 0;\n        // if this._parent is null, then so is this._parents, and we\n        // don't have to remove ourselves from any parent subscriptions.\n        while (_parent) {\n            _parent.remove(this);\n            // if this._parents is null or index >= len,\n            // then _parent is set to null, and the loop exits\n            _parent = ++index < len && _parents[index] || null;\n        }\n        if (isFunction(_unsubscribe)) {\n            var trial = tryCatch(_unsubscribe).call(this);\n            if (trial === errorObject) {\n                hasErrors = true;\n                errors = errors || (errorObject.e instanceof UnsubscriptionError ?\n                    flattenUnsubscriptionErrors(errorObject.e.errors) : [errorObject.e]);\n            }\n        }\n        if (isArray(_subscriptions)) {\n            index = -1;\n            len = _subscriptions.length;\n            while (++index < len) {\n                var sub = _subscriptions[index];\n                if (isObject(sub)) {\n                    var trial = tryCatch(sub.unsubscribe).call(sub);\n                    if (trial === errorObject) {\n                        hasErrors = true;\n                        errors = errors || [];\n                        var err = errorObject.e;\n                        if (err instanceof UnsubscriptionError) {\n                            errors = errors.concat(flattenUnsubscriptionErrors(err.errors));\n                        }\n                        else {\n                            errors.push(err);\n                        }\n                    }\n                }\n            }\n        }\n        if (hasErrors) {\n            throw new UnsubscriptionError(errors);\n        }\n    };\n    /**\n     * Adds a tear down to be called during the unsubscribe() of this\n     * Subscription.\n     *\n     * If the tear down being added is a subscription that is already\n     * unsubscribed, is the same reference `add` is being called on, or is\n     * `Subscription.EMPTY`, it will not be added.\n     *\n     * If this subscription is already in an `closed` state, the passed\n     * tear down logic will be executed immediately.\n     *\n     * @param {TeardownLogic} teardown The additional logic to execute on\n     * teardown.\n     * @return {Subscription} Returns the Subscription used or created to be\n     * added to the inner subscriptions list. This Subscription can be used with\n     * `remove()` to remove the passed teardown logic from the inner subscriptions\n     * list.\n     */\n    Subscription.prototype.add = function (teardown) {\n        if (!teardown || (teardown === Subscription.EMPTY)) {\n            return Subscription.EMPTY;\n        }\n        if (teardown === this) {\n            return this;\n        }\n        var subscription = teardown;\n        switch (typeof teardown) {\n            case 'function':\n                subscription = new Subscription(teardown);\n            case 'object':\n                if (subscription.closed || typeof subscription.unsubscribe !== 'function') {\n                    return subscription;\n                }\n                else if (this.closed) {\n                    subscription.unsubscribe();\n                    return subscription;\n                }\n                else if (typeof subscription._addParent !== 'function' /* quack quack */) {\n                    var tmp = subscription;\n                    subscription = new Subscription();\n                    subscription._subscriptions = [tmp];\n                }\n                break;\n            default:\n                throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');\n        }\n        var subscriptions = this._subscriptions || (this._subscriptions = []);\n        subscriptions.push(subscription);\n        subscription._addParent(this);\n        return subscription;\n    };\n    /**\n     * Removes a Subscription from the internal list of subscriptions that will\n     * unsubscribe during the unsubscribe process of this Subscription.\n     * @param {Subscription} subscription The subscription to remove.\n     * @return {void}\n     */\n    Subscription.prototype.remove = function (subscription) {\n        var subscriptions = this._subscriptions;\n        if (subscriptions) {\n            var subscriptionIndex = subscriptions.indexOf(subscription);\n            if (subscriptionIndex !== -1) {\n                subscriptions.splice(subscriptionIndex, 1);\n            }\n        }\n    };\n    /** @internal */\n    Subscription.prototype._addParent = function (parent) {\n        var _a = this, _parent = _a._parent, _parents = _a._parents;\n        if (!_parent || _parent === parent) {\n            // If we don't have a parent, or the new parent is the same as the\n            // current parent, then set this._parent to the new parent.\n            this._parent = parent;\n        }\n        else if (!_parents) {\n            // If there's already one parent, but not multiple, allocate an Array to\n            // store the rest of the parent Subscriptions.\n            this._parents = [parent];\n        }\n        else if (_parents.indexOf(parent) === -1) {\n            // Only add the new parent to the _parents list if it's not already there.\n            _parents.push(parent);\n        }\n    };\n    /** @nocollapse */\n    Subscription.EMPTY = (function (empty) {\n        empty.closed = true;\n        return empty;\n    }(new Subscription()));\n    return Subscription;\n}());\nexport { Subscription };\nfunction flattenUnsubscriptionErrors(errors) {\n    return errors.reduce(function (errs, err) { return errs.concat((err instanceof UnsubscriptionError) ? err.errors : err); }, []);\n}\n//# sourceMappingURL=Subscription.js.map\n","/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nexport var rxSubscriber = (typeof Symbol === 'function' && typeof Symbol.for === 'function')\n    ? /*@__PURE__*/ Symbol.for('rxSubscriber')\n    : '@@rxSubscriber';\n/**\n * @deprecated use rxSubscriber instead\n */\nexport var $$rxSubscriber = rxSubscriber;\n//# sourceMappingURL=rxSubscriber.js.map\n","/** PURE_IMPORTS_START tslib,_util_isFunction,_Observer,_Subscription,_internal_symbol_rxSubscriber,_config,_util_hostReportError PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { isFunction } from './util/isFunction';\nimport { empty as emptyObserver } from './Observer';\nimport { Subscription } from './Subscription';\nimport { rxSubscriber as rxSubscriberSymbol } from '../internal/symbol/rxSubscriber';\nimport { config } from './config';\nimport { hostReportError } from './util/hostReportError';\n/**\n * Implements the {@link Observer} interface and extends the\n * {@link Subscription} class. While the {@link Observer} is the public API for\n * consuming the values of an {@link Observable}, all Observers get converted to\n * a Subscriber, in order to provide Subscription-like capabilities such as\n * `unsubscribe`. Subscriber is a common type in RxJS, and crucial for\n * implementing operators, but it is rarely used as a public API.\n *\n * @class Subscriber<T>\n */\nvar Subscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(Subscriber, _super);\n    /**\n     * @param {Observer|function(value: T): void} [destinationOrNext] A partially\n     * defined Observer or a `next` callback function.\n     * @param {function(e: ?any): void} [error] The `error` callback of an\n     * Observer.\n     * @param {function(): void} [complete] The `complete` callback of an\n     * Observer.\n     */\n    function Subscriber(destinationOrNext, error, complete) {\n        var _this = _super.call(this) || this;\n        /** @internal */ _this.syncErrorValue = null;\n        /** @internal */ _this.syncErrorThrown = false;\n        /** @internal */ _this.syncErrorThrowable = false;\n        _this.isStopped = false;\n        switch (arguments.length) {\n            case 0:\n                _this.destination = emptyObserver;\n                break;\n            case 1:\n                if (!destinationOrNext) {\n                    _this.destination = emptyObserver;\n                    break;\n                }\n                if (typeof destinationOrNext === 'object') {\n                    // HACK(benlesh): For situations where Node has multiple copies of rxjs in\n                    // node_modules, we cannot rely on `instanceof` checks\n                    if (isTrustedSubscriber(destinationOrNext)) {\n                        var trustedSubscriber = destinationOrNext[rxSubscriberSymbol]();\n                        _this.syncErrorThrowable = trustedSubscriber.syncErrorThrowable;\n                        _this.destination = trustedSubscriber;\n                        trustedSubscriber.add(_this);\n                    }\n                    else {\n                        _this.syncErrorThrowable = true;\n                        _this.destination = new SafeSubscriber(_this, destinationOrNext);\n                    }\n                    break;\n                }\n            default:\n                _this.syncErrorThrowable = true;\n                _this.destination = new SafeSubscriber(_this, destinationOrNext, error, complete);\n                break;\n        }\n        return _this;\n    }\n    Subscriber.prototype[rxSubscriberSymbol] = function () { return this; };\n    /**\n     * A static factory for a Subscriber, given a (potentially partial) definition\n     * of an Observer.\n     * @param {function(x: ?T): void} [next] The `next` callback of an Observer.\n     * @param {function(e: ?any): void} [error] The `error` callback of an\n     * Observer.\n     * @param {function(): void} [complete] The `complete` callback of an\n     * Observer.\n     * @return {Subscriber<T>} A Subscriber wrapping the (partially defined)\n     * Observer represented by the given arguments.\n     * @nocollapse\n     */\n    Subscriber.create = function (next, error, complete) {\n        var subscriber = new Subscriber(next, error, complete);\n        subscriber.syncErrorThrowable = false;\n        return subscriber;\n    };\n    /**\n     * The {@link Observer} callback to receive notifications of type `next` from\n     * the Observable, with a value. The Observable may call this method 0 or more\n     * times.\n     * @param {T} [value] The `next` value.\n     * @return {void}\n     */\n    Subscriber.prototype.next = function (value) {\n        if (!this.isStopped) {\n            this._next(value);\n        }\n    };\n    /**\n     * The {@link Observer} callback to receive notifications of type `error` from\n     * the Observable, with an attached {@link Error}. Notifies the Observer that\n     * the Observable has experienced an error condition.\n     * @param {any} [err] The `error` exception.\n     * @return {void}\n     */\n    Subscriber.prototype.error = function (err) {\n        if (!this.isStopped) {\n            this.isStopped = true;\n            this._error(err);\n        }\n    };\n    /**\n     * The {@link Observer} callback to receive a valueless notification of type\n     * `complete` from the Observable. Notifies the Observer that the Observable\n     * has finished sending push-based notifications.\n     * @return {void}\n     */\n    Subscriber.prototype.complete = function () {\n        if (!this.isStopped) {\n            this.isStopped = true;\n            this._complete();\n        }\n    };\n    Subscriber.prototype.unsubscribe = function () {\n        if (this.closed) {\n            return;\n        }\n        this.isStopped = true;\n        _super.prototype.unsubscribe.call(this);\n    };\n    Subscriber.prototype._next = function (value) {\n        this.destination.next(value);\n    };\n    Subscriber.prototype._error = function (err) {\n        this.destination.error(err);\n        this.unsubscribe();\n    };\n    Subscriber.prototype._complete = function () {\n        this.destination.complete();\n        this.unsubscribe();\n    };\n    /** @deprecated This is an internal implementation detail, do not use. */\n    Subscriber.prototype._unsubscribeAndRecycle = function () {\n        var _a = this, _parent = _a._parent, _parents = _a._parents;\n        this._parent = null;\n        this._parents = null;\n        this.unsubscribe();\n        this.closed = false;\n        this.isStopped = false;\n        this._parent = _parent;\n        this._parents = _parents;\n        return this;\n    };\n    return Subscriber;\n}(Subscription));\nexport { Subscriber };\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SafeSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(SafeSubscriber, _super);\n    function SafeSubscriber(_parentSubscriber, observerOrNext, error, complete) {\n        var _this = _super.call(this) || this;\n        _this._parentSubscriber = _parentSubscriber;\n        var next;\n        var context = _this;\n        if (isFunction(observerOrNext)) {\n            next = observerOrNext;\n        }\n        else if (observerOrNext) {\n            next = observerOrNext.next;\n            error = observerOrNext.error;\n            complete = observerOrNext.complete;\n            if (observerOrNext !== emptyObserver) {\n                context = Object.create(observerOrNext);\n                if (isFunction(context.unsubscribe)) {\n                    _this.add(context.unsubscribe.bind(context));\n                }\n                context.unsubscribe = _this.unsubscribe.bind(_this);\n            }\n        }\n        _this._context = context;\n        _this._next = next;\n        _this._error = error;\n        _this._complete = complete;\n        return _this;\n    }\n    SafeSubscriber.prototype.next = function (value) {\n        if (!this.isStopped && this._next) {\n            var _parentSubscriber = this._parentSubscriber;\n            if (!config.useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {\n                this.__tryOrUnsub(this._next, value);\n            }\n            else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {\n                this.unsubscribe();\n            }\n        }\n    };\n    SafeSubscriber.prototype.error = function (err) {\n        if (!this.isStopped) {\n            var _parentSubscriber = this._parentSubscriber;\n            var useDeprecatedSynchronousErrorHandling = config.useDeprecatedSynchronousErrorHandling;\n            if (this._error) {\n                if (!useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {\n                    this.__tryOrUnsub(this._error, err);\n                    this.unsubscribe();\n                }\n                else {\n                    this.__tryOrSetError(_parentSubscriber, this._error, err);\n                    this.unsubscribe();\n                }\n            }\n            else if (!_parentSubscriber.syncErrorThrowable) {\n                this.unsubscribe();\n                if (useDeprecatedSynchronousErrorHandling) {\n                    throw err;\n                }\n                hostReportError(err);\n            }\n            else {\n                if (useDeprecatedSynchronousErrorHandling) {\n                    _parentSubscriber.syncErrorValue = err;\n                    _parentSubscriber.syncErrorThrown = true;\n                }\n                else {\n                    hostReportError(err);\n                }\n                this.unsubscribe();\n            }\n        }\n    };\n    SafeSubscriber.prototype.complete = function () {\n        var _this = this;\n        if (!this.isStopped) {\n            var _parentSubscriber = this._parentSubscriber;\n            if (this._complete) {\n                var wrappedComplete = function () { return _this._complete.call(_this._context); };\n                if (!config.useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {\n                    this.__tryOrUnsub(wrappedComplete);\n                    this.unsubscribe();\n                }\n                else {\n                    this.__tryOrSetError(_parentSubscriber, wrappedComplete);\n                    this.unsubscribe();\n                }\n            }\n            else {\n                this.unsubscribe();\n            }\n        }\n    };\n    SafeSubscriber.prototype.__tryOrUnsub = function (fn, value) {\n        try {\n            fn.call(this._context, value);\n        }\n        catch (err) {\n            this.unsubscribe();\n            if (config.useDeprecatedSynchronousErrorHandling) {\n                throw err;\n            }\n            else {\n                hostReportError(err);\n            }\n        }\n    };\n    SafeSubscriber.prototype.__tryOrSetError = function (parent, fn, value) {\n        if (!config.useDeprecatedSynchronousErrorHandling) {\n            throw new Error('bad call');\n        }\n        try {\n            fn.call(this._context, value);\n        }\n        catch (err) {\n            if (config.useDeprecatedSynchronousErrorHandling) {\n                parent.syncErrorValue = err;\n                parent.syncErrorThrown = true;\n                return true;\n            }\n            else {\n                hostReportError(err);\n                return true;\n            }\n        }\n        return false;\n    };\n    /** @deprecated This is an internal implementation detail, do not use. */\n    SafeSubscriber.prototype._unsubscribe = function () {\n        var _parentSubscriber = this._parentSubscriber;\n        this._context = null;\n        this._parentSubscriber = null;\n        _parentSubscriber.unsubscribe();\n    };\n    return SafeSubscriber;\n}(Subscriber));\nfunction isTrustedSubscriber(obj) {\n    return obj instanceof Subscriber || ('syncErrorThrowable' in obj && obj[rxSubscriberSymbol]);\n}\n//# sourceMappingURL=Subscriber.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from './Subscriber';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar OuterSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(OuterSubscriber, _super);\n    function OuterSubscriber() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    OuterSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.destination.next(innerValue);\n    };\n    OuterSubscriber.prototype.notifyError = function (error, innerSub) {\n        this.destination.error(error);\n    };\n    OuterSubscriber.prototype.notifyComplete = function (innerSub) {\n        this.destination.complete();\n    };\n    return OuterSubscriber;\n}(Subscriber));\nexport { OuterSubscriber };\n//# sourceMappingURL=OuterSubscriber.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from './Subscriber';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar InnerSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(InnerSubscriber, _super);\n    function InnerSubscriber(parent, outerValue, outerIndex) {\n        var _this = _super.call(this) || this;\n        _this.parent = parent;\n        _this.outerValue = outerValue;\n        _this.outerIndex = outerIndex;\n        _this.index = 0;\n        return _this;\n    }\n    InnerSubscriber.prototype._next = function (value) {\n        this.parent.notifyNext(this.outerValue, value, this.outerIndex, this.index++, this);\n    };\n    InnerSubscriber.prototype._error = function (error) {\n        this.parent.notifyError(error, this);\n        this.unsubscribe();\n    };\n    InnerSubscriber.prototype._complete = function () {\n        this.parent.notifyComplete(this);\n        this.unsubscribe();\n    };\n    return InnerSubscriber;\n}(Subscriber));\nexport { InnerSubscriber };\n//# sourceMappingURL=InnerSubscriber.js.map\n","/** PURE_IMPORTS_START _Subscriber,_symbol_rxSubscriber,_Observer PURE_IMPORTS_END */\nimport { Subscriber } from '../Subscriber';\nimport { rxSubscriber as rxSubscriberSymbol } from '../symbol/rxSubscriber';\nimport { empty as emptyObserver } from '../Observer';\nexport function toSubscriber(nextOrObserver, error, complete) {\n    if (nextOrObserver) {\n        if (nextOrObserver instanceof Subscriber) {\n            return nextOrObserver;\n        }\n        if (nextOrObserver[rxSubscriberSymbol]) {\n            return nextOrObserver[rxSubscriberSymbol]();\n        }\n    }\n    if (!nextOrObserver && !error && !complete) {\n        return new Subscriber(emptyObserver);\n    }\n    return new Subscriber(nextOrObserver, error, complete);\n}\n//# sourceMappingURL=toSubscriber.js.map\n","/** Symbol.observable or a string \"@@observable\". Used for interop */\n/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nexport var observable = typeof Symbol === 'function' && Symbol.observable || '@@observable';\n//# sourceMappingURL=observable.js.map\n","/* tslint:disable:no-empty */\n/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nexport function noop() { }\n//# sourceMappingURL=noop.js.map\n","/** PURE_IMPORTS_START _noop PURE_IMPORTS_END */\nimport { noop } from './noop';\n/* tslint:enable:max-line-length */\nexport function pipe() {\n    var fns = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        fns[_i] = arguments[_i];\n    }\n    return pipeFromArray(fns);\n}\n/* @internal */\nexport function pipeFromArray(fns) {\n    if (!fns) {\n        return noop;\n    }\n    if (fns.length === 1) {\n        return fns[0];\n    }\n    return function piped(input) {\n        return fns.reduce(function (prev, fn) { return fn(prev); }, input);\n    };\n}\n//# sourceMappingURL=pipe.js.map\n","/** PURE_IMPORTS_START _util_toSubscriber,_internal_symbol_observable,_util_pipe,_config PURE_IMPORTS_END */\nimport { toSubscriber } from './util/toSubscriber';\nimport { observable as Symbol_observable } from '../internal/symbol/observable';\nimport { pipeFromArray } from './util/pipe';\nimport { config } from './config';\n/**\n * A representation of any set of values over any amount of time. This is the most basic building block\n * of RxJS.\n *\n * @class Observable<T>\n */\nvar Observable = /*@__PURE__*/ (function () {\n    /**\n     * @constructor\n     * @param {Function} subscribe the function that is called when the Observable is\n     * initially subscribed to. This function is given a Subscriber, to which new values\n     * can be `next`ed, or an `error` method can be called to raise an error, or\n     * `complete` can be called to notify of a successful completion.\n     */\n    function Observable(subscribe) {\n        /** Internal implementation detail, do not use directly. */\n        this._isScalar = false;\n        if (subscribe) {\n            this._subscribe = subscribe;\n        }\n    }\n    /**\n     * Creates a new Observable, with this Observable as the source, and the passed\n     * operator defined as the new observable's operator.\n     * @method lift\n     * @param {Operator} operator the operator defining the operation to take on the observable\n     * @return {Observable} a new observable with the Operator applied\n     */\n    Observable.prototype.lift = function (operator) {\n        var observable = new Observable();\n        observable.source = this;\n        observable.operator = operator;\n        return observable;\n    };\n    /**\n     * Invokes an execution of an Observable and registers Observer handlers for notifications it will emit.\n     *\n     * <span class=\"informal\">Use it when you have all these Observables, but still nothing is happening.</span>\n     *\n     * `subscribe` is not a regular operator, but a method that calls Observable's internal `subscribe` function. It\n     * might be for example a function that you passed to a {@link create} static factory, but most of the time it is\n     * a library implementation, which defines what and when will be emitted by an Observable. This means that calling\n     * `subscribe` is actually the moment when Observable starts its work, not when it is created, as it is often\n     * thought.\n     *\n     * Apart from starting the execution of an Observable, this method allows you to listen for values\n     * that an Observable emits, as well as for when it completes or errors. You can achieve this in two\n     * following ways.\n     *\n     * The first way is creating an object that implements {@link Observer} interface. It should have methods\n     * defined by that interface, but note that it should be just a regular JavaScript object, which you can create\n     * yourself in any way you want (ES6 class, classic function constructor, object literal etc.). In particular do\n     * not attempt to use any RxJS implementation details to create Observers - you don't need them. Remember also\n     * that your object does not have to implement all methods. If you find yourself creating a method that doesn't\n     * do anything, you can simply omit it. Note however, that if `error` method is not provided, all errors will\n     * be left uncaught.\n     *\n     * The second way is to give up on Observer object altogether and simply provide callback functions in place of its methods.\n     * This means you can provide three functions as arguments to `subscribe`, where first function is equivalent\n     * of a `next` method, second of an `error` method and third of a `complete` method. Just as in case of Observer,\n     * if you do not need to listen for something, you can omit a function, preferably by passing `undefined` or `null`,\n     * since `subscribe` recognizes these functions by where they were placed in function call. When it comes\n     * to `error` function, just as before, if not provided, errors emitted by an Observable will be thrown.\n     *\n     * Whatever style of calling `subscribe` you use, in both cases it returns a Subscription object.\n     * This object allows you to call `unsubscribe` on it, which in turn will stop work that an Observable does and will clean\n     * up all resources that an Observable used. Note that cancelling a subscription will not call `complete` callback\n     * provided to `subscribe` function, which is reserved for a regular completion signal that comes from an Observable.\n     *\n     * Remember that callbacks provided to `subscribe` are not guaranteed to be called asynchronously.\n     * It is an Observable itself that decides when these functions will be called. For example {@link of}\n     * by default emits all its values synchronously. Always check documentation for how given Observable\n     * will behave when subscribed and if its default behavior can be modified with a {@link Scheduler}.\n     *\n     * @example <caption>Subscribe with an Observer</caption>\n     * const sumObserver = {\n     *   sum: 0,\n     *   next(value) {\n     *     console.log('Adding: ' + value);\n     *     this.sum = this.sum + value;\n     *   },\n     *   error() { // We actually could just remove this method,\n     *   },        // since we do not really care about errors right now.\n     *   complete() {\n     *     console.log('Sum equals: ' + this.sum);\n     *   }\n     * };\n     *\n     * Rx.Observable.of(1, 2, 3) // Synchronously emits 1, 2, 3 and then completes.\n     * .subscribe(sumObserver);\n     *\n     * // Logs:\n     * // \"Adding: 1\"\n     * // \"Adding: 2\"\n     * // \"Adding: 3\"\n     * // \"Sum equals: 6\"\n     *\n     *\n     * @example <caption>Subscribe with functions</caption>\n     * let sum = 0;\n     *\n     * Rx.Observable.of(1, 2, 3)\n     * .subscribe(\n     *   function(value) {\n     *     console.log('Adding: ' + value);\n     *     sum = sum + value;\n     *   },\n     *   undefined,\n     *   function() {\n     *     console.log('Sum equals: ' + sum);\n     *   }\n     * );\n     *\n     * // Logs:\n     * // \"Adding: 1\"\n     * // \"Adding: 2\"\n     * // \"Adding: 3\"\n     * // \"Sum equals: 6\"\n     *\n     *\n     * @example <caption>Cancel a subscription</caption>\n     * const subscription = Rx.Observable.interval(1000).subscribe(\n     *   num => console.log(num),\n     *   undefined,\n     *   () => console.log('completed!') // Will not be called, even\n     * );                                // when cancelling subscription\n     *\n     *\n     * setTimeout(() => {\n     *   subscription.unsubscribe();\n     *   console.log('unsubscribed!');\n     * }, 2500);\n     *\n     * // Logs:\n     * // 0 after 1s\n     * // 1 after 2s\n     * // \"unsubscribed!\" after 2.5s\n     *\n     *\n     * @param {Observer|Function} observerOrNext (optional) Either an observer with methods to be called,\n     *  or the first of three possible handlers, which is the handler for each value emitted from the subscribed\n     *  Observable.\n     * @param {Function} error (optional) A handler for a terminal event resulting from an error. If no error handler is provided,\n     *  the error will be thrown as unhandled.\n     * @param {Function} complete (optional) A handler for a terminal event resulting from successful completion.\n     * @return {ISubscription} a subscription reference to the registered handlers\n     * @method subscribe\n     */\n    Observable.prototype.subscribe = function (observerOrNext, error, complete) {\n        var operator = this.operator;\n        var sink = toSubscriber(observerOrNext, error, complete);\n        if (operator) {\n            operator.call(sink, this.source);\n        }\n        else {\n            sink.add(this.source || !sink.syncErrorThrowable ? this._subscribe(sink) : this._trySubscribe(sink));\n        }\n        if (config.useDeprecatedSynchronousErrorHandling) {\n            if (sink.syncErrorThrowable) {\n                sink.syncErrorThrowable = false;\n                if (sink.syncErrorThrown) {\n                    throw sink.syncErrorValue;\n                }\n            }\n        }\n        return sink;\n    };\n    /** @deprecated This is an internal implementation detail, do not use. */\n    Observable.prototype._trySubscribe = function (sink) {\n        try {\n            return this._subscribe(sink);\n        }\n        catch (err) {\n            if (config.useDeprecatedSynchronousErrorHandling) {\n                sink.syncErrorThrown = true;\n                sink.syncErrorValue = err;\n            }\n            sink.error(err);\n        }\n    };\n    /**\n     * @method forEach\n     * @param {Function} next a handler for each value emitted by the observable\n     * @param {PromiseConstructor} [promiseCtor] a constructor function used to instantiate the Promise\n     * @return {Promise} a promise that either resolves on observable completion or\n     *  rejects with the handled error\n     */\n    Observable.prototype.forEach = function (next, promiseCtor) {\n        var _this = this;\n        promiseCtor = getPromiseCtor(promiseCtor);\n        return new promiseCtor(function (resolve, reject) {\n            // Must be declared in a separate statement to avoid a RefernceError when\n            // accessing subscription below in the closure due to Temporal Dead Zone.\n            var subscription;\n            subscription = _this.subscribe(function (value) {\n                try {\n                    next(value);\n                }\n                catch (err) {\n                    reject(err);\n                    if (subscription) {\n                        subscription.unsubscribe();\n                    }\n                }\n            }, reject, resolve);\n        });\n    };\n    /** @deprecated This is an internal implementation detail, do not use. */\n    Observable.prototype._subscribe = function (subscriber) {\n        var source = this.source;\n        return source && source.subscribe(subscriber);\n    };\n    /**\n     * An interop point defined by the es7-observable spec https://github.com/zenparsing/es-observable\n     * @method Symbol.observable\n     * @return {Observable} this instance of the observable\n     */\n    Observable.prototype[Symbol_observable] = function () {\n        return this;\n    };\n    /* tslint:enable:max-line-length */\n    /**\n     * Used to stitch together functional operators into a chain.\n     * @method pipe\n     * @return {Observable} the Observable result of all of the operators having\n     * been called in the order they were passed in.\n     *\n     * @example\n     *\n     * import { map, filter, scan } from 'rxjs/operators';\n     *\n     * Rx.Observable.interval(1000)\n     *   .pipe(\n     *     filter(x => x % 2 === 0),\n     *     map(x => x + x),\n     *     scan((acc, x) => acc + x)\n     *   )\n     *   .subscribe(x => console.log(x))\n     */\n    Observable.prototype.pipe = function () {\n        var operations = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            operations[_i] = arguments[_i];\n        }\n        if (operations.length === 0) {\n            return this;\n        }\n        return pipeFromArray(operations)(this);\n    };\n    /* tslint:enable:max-line-length */\n    Observable.prototype.toPromise = function (promiseCtor) {\n        var _this = this;\n        promiseCtor = getPromiseCtor(promiseCtor);\n        return new promiseCtor(function (resolve, reject) {\n            var value;\n            _this.subscribe(function (x) { return value = x; }, function (err) { return reject(err); }, function () { return resolve(value); });\n        });\n    };\n    // HACK: Since TypeScript inherits static properties too, we have to\n    // fight against TypeScript here so Subject can have a different static create signature\n    /**\n     * Creates a new cold Observable by calling the Observable constructor\n     * @static true\n     * @owner Observable\n     * @method create\n     * @param {Function} subscribe? the subscriber function to be passed to the Observable constructor\n     * @return {Observable} a new cold observable\n     * @nocollapse\n     */\n    Observable.create = function (subscribe) {\n        return new Observable(subscribe);\n    };\n    return Observable;\n}());\nexport { Observable };\n/**\n * Decides between a passed promise constructor from consuming code,\n * A default configured promise constructor, and the native promise\n * constructor and returns it. If nothing can be found, it will throw\n * an error.\n * @param promiseCtor The optional promise constructor to passed by consuming code\n */\nfunction getPromiseCtor(promiseCtor) {\n    if (!promiseCtor) {\n        promiseCtor = config.Promise || Promise;\n    }\n    if (!promiseCtor) {\n        throw new Error('no Promise impl found');\n    }\n    return promiseCtor;\n}\n//# sourceMappingURL=Observable.js.map\n","/**\n * Subscribes to an ArrayLike with a subscriber\n * @param array The array or array-like to subscribe to\n */\n/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nexport var subscribeToArray = function (array) {\n    return function (subscriber) {\n        for (var i = 0, len = array.length; i < len && !subscriber.closed; i++) {\n            subscriber.next(array[i]);\n        }\n        if (!subscriber.closed) {\n            subscriber.complete();\n        }\n    };\n};\n//# sourceMappingURL=subscribeToArray.js.map\n","/** PURE_IMPORTS_START _hostReportError PURE_IMPORTS_END */\nimport { hostReportError } from './hostReportError';\nexport var subscribeToPromise = function (promise) {\n    return function (subscriber) {\n        promise.then(function (value) {\n            if (!subscriber.closed) {\n                subscriber.next(value);\n                subscriber.complete();\n            }\n        }, function (err) { return subscriber.error(err); })\n            .then(null, hostReportError);\n        return subscriber;\n    };\n};\n//# sourceMappingURL=subscribeToPromise.js.map\n","/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nexport function getSymbolIterator() {\n    if (typeof Symbol !== 'function' || !Symbol.iterator) {\n        return '@@iterator';\n    }\n    return Symbol.iterator;\n}\nexport var iterator = /*@__PURE__*/ getSymbolIterator();\n/**\n * @deprecated use {@link iterator} instead\n */\nexport var $$iterator = iterator;\n//# sourceMappingURL=iterator.js.map\n","/** PURE_IMPORTS_START _symbol_iterator PURE_IMPORTS_END */\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nexport var subscribeToIterable = function (iterable) {\n    return function (subscriber) {\n        var iterator = iterable[Symbol_iterator]();\n        do {\n            var item = iterator.next();\n            if (item.done) {\n                subscriber.complete();\n                break;\n            }\n            subscriber.next(item.value);\n            if (subscriber.closed) {\n                break;\n            }\n        } while (true);\n        // Finalize the iterator if it happens to be a Generator\n        if (typeof iterator.return === 'function') {\n            subscriber.add(function () {\n                if (iterator.return) {\n                    iterator.return();\n                }\n            });\n        }\n        return subscriber;\n    };\n};\n//# sourceMappingURL=subscribeToIterable.js.map\n","/** PURE_IMPORTS_START _symbol_observable PURE_IMPORTS_END */\nimport { observable as Symbol_observable } from '../symbol/observable';\n/**\n * Subscribes to an object that implements Symbol.observable with the given\n * Subscriber.\n * @param obj An object that implements Symbol.observable\n */\nexport var subscribeToObservable = function (obj) {\n    return function (subscriber) {\n        var obs = obj[Symbol_observable]();\n        if (typeof obs.subscribe !== 'function') {\n            // Should be caught by observable subscribe function error handling.\n            throw new TypeError('Provided object does not correctly implement Symbol.observable');\n        }\n        else {\n            return obs.subscribe(subscriber);\n        }\n    };\n};\n//# sourceMappingURL=subscribeToObservable.js.map\n","/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nexport var isArrayLike = (function (x) { return x && typeof x.length === 'number' && typeof x !== 'function'; });\n//# sourceMappingURL=isArrayLike.js.map\n","/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nexport function isPromise(value) {\n    return value && typeof value.subscribe !== 'function' && typeof value.then === 'function';\n}\n//# sourceMappingURL=isPromise.js.map\n","/** PURE_IMPORTS_START _Observable,_subscribeToArray,_subscribeToPromise,_subscribeToIterable,_subscribeToObservable,_isArrayLike,_isPromise,_isObject,_symbol_iterator,_symbol_observable PURE_IMPORTS_END */\nimport { Observable } from '../Observable';\nimport { subscribeToArray } from './subscribeToArray';\nimport { subscribeToPromise } from './subscribeToPromise';\nimport { subscribeToIterable } from './subscribeToIterable';\nimport { subscribeToObservable } from './subscribeToObservable';\nimport { isArrayLike } from './isArrayLike';\nimport { isPromise } from './isPromise';\nimport { isObject } from './isObject';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { observable as Symbol_observable } from '../symbol/observable';\nexport var subscribeTo = function (result) {\n    if (result instanceof Observable) {\n        return function (subscriber) {\n            if (result._isScalar) {\n                subscriber.next(result.value);\n                subscriber.complete();\n                return undefined;\n            }\n            else {\n                return result.subscribe(subscriber);\n            }\n        };\n    }\n    else if (isArrayLike(result)) {\n        return subscribeToArray(result);\n    }\n    else if (isPromise(result)) {\n        return subscribeToPromise(result);\n    }\n    else if (result && typeof result[Symbol_iterator] === 'function') {\n        return subscribeToIterable(result);\n    }\n    else if (result && typeof result[Symbol_observable] === 'function') {\n        return subscribeToObservable(result);\n    }\n    else {\n        var value = isObject(result) ? 'an invalid object' : \"'\" + result + \"'\";\n        var msg = \"You provided \" + value + \" where a stream was expected.\"\n            + ' You can provide an Observable, Promise, Array, or Iterable.';\n        throw new TypeError(msg);\n    }\n};\n//# sourceMappingURL=subscribeTo.js.map\n","/** PURE_IMPORTS_START _InnerSubscriber,_subscribeTo PURE_IMPORTS_END */\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeTo } from './subscribeTo';\nexport function subscribeToResult(outerSubscriber, result, outerValue, outerIndex) {\n    var destination = new InnerSubscriber(outerSubscriber, outerValue, outerIndex);\n    return subscribeTo(result)(destination);\n}\n//# sourceMappingURL=subscribeToResult.js.map\n","/** PURE_IMPORTS_START tslib,_util_tryCatch,_util_errorObject,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n/**\n * Ignores source values for a duration determined by another Observable, then\n * emits the most recent value from the source Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link auditTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/audit.png\" width=\"100%\">\n *\n * `audit` is similar to `throttle`, but emits the last value from the silenced\n * time window, instead of the first value. `audit` emits the most recent value\n * from the source Observable on the output Observable as soon as its internal\n * timer becomes disabled, and ignores source values while the timer is enabled.\n * Initially, the timer is disabled. As soon as the first source value arrives,\n * the timer is enabled by calling the `durationSelector` function with the\n * source value, which returns the \"duration\" Observable. When the duration\n * Observable emits a value or completes, the timer is disabled, then the most\n * recent source value is emitted on the output Observable, and this process\n * repeats for the next source value.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.audit(ev => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttle}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration, returned as an Observable or a Promise.\n * @return {Observable<T>} An Observable that performs rate-limiting of\n * emissions from the source Observable.\n * @method audit\n * @owner Observable\n */\nexport function audit(durationSelector) {\n    return function auditOperatorFunction(source) {\n        return source.lift(new AuditOperator(durationSelector));\n    };\n}\nvar AuditOperator = /*@__PURE__*/ (function () {\n    function AuditOperator(durationSelector) {\n        this.durationSelector = durationSelector;\n    }\n    AuditOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new AuditSubscriber(subscriber, this.durationSelector));\n    };\n    return AuditOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar AuditSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(AuditSubscriber, _super);\n    function AuditSubscriber(destination, durationSelector) {\n        var _this = _super.call(this, destination) || this;\n        _this.durationSelector = durationSelector;\n        _this.hasValue = false;\n        return _this;\n    }\n    AuditSubscriber.prototype._next = function (value) {\n        this.value = value;\n        this.hasValue = true;\n        if (!this.throttled) {\n            var duration = tryCatch(this.durationSelector)(value);\n            if (duration === errorObject) {\n                this.destination.error(errorObject.e);\n            }\n            else {\n                var innerSubscription = subscribeToResult(this, duration);\n                if (!innerSubscription || innerSubscription.closed) {\n                    this.clearThrottle();\n                }\n                else {\n                    this.add(this.throttled = innerSubscription);\n                }\n            }\n        }\n    };\n    AuditSubscriber.prototype.clearThrottle = function () {\n        var _a = this, value = _a.value, hasValue = _a.hasValue, throttled = _a.throttled;\n        if (throttled) {\n            this.remove(throttled);\n            this.throttled = null;\n            throttled.unsubscribe();\n        }\n        if (hasValue) {\n            this.value = null;\n            this.hasValue = false;\n            this.destination.next(value);\n        }\n    };\n    AuditSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex) {\n        this.clearThrottle();\n    };\n    AuditSubscriber.prototype.notifyComplete = function () {\n        this.clearThrottle();\n    };\n    return AuditSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=audit.js.map\n","/** PURE_IMPORTS_START tslib,_Subscription PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscription } from '../Subscription';\n/**\n * A unit of work to be executed in a {@link Scheduler}. An action is typically\n * created from within a Scheduler and an RxJS user does not need to concern\n * themselves about creating and manipulating an Action.\n *\n * ```ts\n * class Action<T> extends Subscription {\n *   new (scheduler: Scheduler, work: (state?: T) => void);\n *   schedule(state?: T, delay: number = 0): Subscription;\n * }\n * ```\n *\n * @class Action<T>\n */\nvar Action = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(Action, _super);\n    function Action(scheduler, work) {\n        return _super.call(this) || this;\n    }\n    /**\n     * Schedules this action on its parent Scheduler for execution. May be passed\n     * some context object, `state`. May happen at some point in the future,\n     * according to the `delay` parameter, if specified.\n     * @param {T} [state] Some contextual data that the `work` function uses when\n     * called by the Scheduler.\n     * @param {number} [delay] Time to wait before executing the work, where the\n     * time unit is implicit and defined by the Scheduler.\n     * @return {void}\n     */\n    Action.prototype.schedule = function (state, delay) {\n        if (delay === void 0) {\n            delay = 0;\n        }\n        return this;\n    };\n    return Action;\n}(Subscription));\nexport { Action };\n//# sourceMappingURL=Action.js.map\n","/** PURE_IMPORTS_START tslib,_Action PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Action } from './Action';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar AsyncAction = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(AsyncAction, _super);\n    function AsyncAction(scheduler, work) {\n        var _this = _super.call(this, scheduler, work) || this;\n        _this.scheduler = scheduler;\n        _this.work = work;\n        _this.pending = false;\n        return _this;\n    }\n    AsyncAction.prototype.schedule = function (state, delay) {\n        if (delay === void 0) {\n            delay = 0;\n        }\n        if (this.closed) {\n            return this;\n        }\n        // Always replace the current state with the new state.\n        this.state = state;\n        var id = this.id;\n        var scheduler = this.scheduler;\n        //\n        // Important implementation note:\n        //\n        // Actions only execute once by default, unless rescheduled from within the\n        // scheduled callback. This allows us to implement single and repeat\n        // actions via the same code path, without adding API surface area, as well\n        // as mimic traditional recursion but across asynchronous boundaries.\n        //\n        // However, JS runtimes and timers distinguish between intervals achieved by\n        // serial `setTimeout` calls vs. a single `setInterval` call. An interval of\n        // serial `setTimeout` calls can be individually delayed, which delays\n        // scheduling the next `setTimeout`, and so on. `setInterval` attempts to\n        // guarantee the interval callback will be invoked more precisely to the\n        // interval period, regardless of load.\n        //\n        // Therefore, we use `setInterval` to schedule single and repeat actions.\n        // If the action reschedules itself with the same delay, the interval is not\n        // canceled. If the action doesn't reschedule, or reschedules with a\n        // different delay, the interval will be canceled after scheduled callback\n        // execution.\n        //\n        if (id != null) {\n            this.id = this.recycleAsyncId(scheduler, id, delay);\n        }\n        // Set the pending flag indicating that this action has been scheduled, or\n        // has recursively rescheduled itself.\n        this.pending = true;\n        this.delay = delay;\n        // If this action has already an async Id, don't request a new one.\n        this.id = this.id || this.requestAsyncId(scheduler, this.id, delay);\n        return this;\n    };\n    AsyncAction.prototype.requestAsyncId = function (scheduler, id, delay) {\n        if (delay === void 0) {\n            delay = 0;\n        }\n        return setInterval(scheduler.flush.bind(scheduler, this), delay);\n    };\n    AsyncAction.prototype.recycleAsyncId = function (scheduler, id, delay) {\n        if (delay === void 0) {\n            delay = 0;\n        }\n        // If this action is rescheduled with the same delay time, don't clear the interval id.\n        if (delay !== null && this.delay === delay && this.pending === false) {\n            return id;\n        }\n        // Otherwise, if the action's delay time is different from the current delay,\n        // or the action has been rescheduled before it's executed, clear the interval id\n        return clearInterval(id) && undefined || undefined;\n    };\n    /**\n     * Immediately executes this action and the `work` it contains.\n     * @return {any}\n     */\n    AsyncAction.prototype.execute = function (state, delay) {\n        if (this.closed) {\n            return new Error('executing a cancelled action');\n        }\n        this.pending = false;\n        var error = this._execute(state, delay);\n        if (error) {\n            return error;\n        }\n        else if (this.pending === false && this.id != null) {\n            // Dequeue if the action didn't reschedule itself. Don't call\n            // unsubscribe(), because the action could reschedule later.\n            // For example:\n            // ```\n            // scheduler.schedule(function doWork(counter) {\n            //   /* ... I'm a busy worker bee ... */\n            //   var originalAction = this;\n            //   /* wait 100ms before rescheduling the action */\n            //   setTimeout(function () {\n            //     originalAction.schedule(counter + 1);\n            //   }, 100);\n            // }, 1000);\n            // ```\n            this.id = this.recycleAsyncId(this.scheduler, this.id, null);\n        }\n    };\n    AsyncAction.prototype._execute = function (state, delay) {\n        var errored = false;\n        var errorValue = undefined;\n        try {\n            this.work(state);\n        }\n        catch (e) {\n            errored = true;\n            errorValue = !!e && e || new Error(e);\n        }\n        if (errored) {\n            this.unsubscribe();\n            return errorValue;\n        }\n    };\n    /** @deprecated This is an internal implementation detail, do not use. */\n    AsyncAction.prototype._unsubscribe = function () {\n        var id = this.id;\n        var scheduler = this.scheduler;\n        var actions = scheduler.actions;\n        var index = actions.indexOf(this);\n        this.work = null;\n        this.state = null;\n        this.pending = false;\n        this.scheduler = null;\n        if (index !== -1) {\n            actions.splice(index, 1);\n        }\n        if (id != null) {\n            this.id = this.recycleAsyncId(scheduler, id, null);\n        }\n        this.delay = null;\n    };\n    return AsyncAction;\n}(Action));\nexport { AsyncAction };\n//# sourceMappingURL=AsyncAction.js.map\n","/**\n * An execution context and a data structure to order tasks and schedule their\n * execution. Provides a notion of (potentially virtual) time, through the\n * `now()` getter method.\n *\n * Each unit of work in a Scheduler is called an {@link Action}.\n *\n * ```ts\n * class Scheduler {\n *   now(): number;\n *   schedule(work, delay?, state?): Subscription;\n * }\n * ```\n *\n * @class Scheduler\n * @deprecated Scheduler is an internal implementation detail of RxJS, and\n * should not be used directly. Rather, create your own class and implement\n * {@link SchedulerLike}\n */\nvar Scheduler = /*@__PURE__*/ (function () {\n    function Scheduler(SchedulerAction, now) {\n        if (now === void 0) {\n            now = Scheduler.now;\n        }\n        this.SchedulerAction = SchedulerAction;\n        this.now = now;\n    }\n    /**\n     * Schedules a function, `work`, for execution. May happen at some point in\n     * the future, according to the `delay` parameter, if specified. May be passed\n     * some context object, `state`, which will be passed to the `work` function.\n     *\n     * The given arguments will be processed an stored as an Action object in a\n     * queue of actions.\n     *\n     * @param {function(state: ?T): ?Subscription} work A function representing a\n     * task, or some unit of work to be executed by the Scheduler.\n     * @param {number} [delay] Time to wait before executing the work, where the\n     * time unit is implicit and defined by the Scheduler itself.\n     * @param {T} [state] Some contextual data that the `work` function uses when\n     * called by the Scheduler.\n     * @return {Subscription} A subscription in order to be able to unsubscribe\n     * the scheduled work.\n     */\n    Scheduler.prototype.schedule = function (work, delay, state) {\n        if (delay === void 0) {\n            delay = 0;\n        }\n        return new this.SchedulerAction(this, work).schedule(state, delay);\n    };\n    /** @nocollapse */\n    Scheduler.now = Date.now ? Date.now : function () { return +new Date(); };\n    return Scheduler;\n}());\nexport { Scheduler };\n//# sourceMappingURL=Scheduler.js.map\n","/** PURE_IMPORTS_START tslib,_Scheduler PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Scheduler } from '../Scheduler';\nvar AsyncScheduler = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(AsyncScheduler, _super);\n    function AsyncScheduler(SchedulerAction, now) {\n        if (now === void 0) {\n            now = Scheduler.now;\n        }\n        var _this = _super.call(this, SchedulerAction, function () {\n            if (AsyncScheduler.delegate && AsyncScheduler.delegate !== _this) {\n                return AsyncScheduler.delegate.now();\n            }\n            else {\n                return now();\n            }\n        }) || this;\n        _this.actions = [];\n        /**\n         * A flag to indicate whether the Scheduler is currently executing a batch of\n         * queued actions.\n         * @type {boolean}\n         * @deprecated internal use only\n         */\n        _this.active = false;\n        /**\n         * An internal ID used to track the latest asynchronous task such as those\n         * coming from `setTimeout`, `setInterval`, `requestAnimationFrame`, and\n         * others.\n         * @type {any}\n         * @deprecated internal use only\n         */\n        _this.scheduled = undefined;\n        return _this;\n    }\n    AsyncScheduler.prototype.schedule = function (work, delay, state) {\n        if (delay === void 0) {\n            delay = 0;\n        }\n        if (AsyncScheduler.delegate && AsyncScheduler.delegate !== this) {\n            return AsyncScheduler.delegate.schedule(work, delay, state);\n        }\n        else {\n            return _super.prototype.schedule.call(this, work, delay, state);\n        }\n    };\n    AsyncScheduler.prototype.flush = function (action) {\n        var actions = this.actions;\n        if (this.active) {\n            actions.push(action);\n            return;\n        }\n        var error;\n        this.active = true;\n        do {\n            if (error = action.execute(action.state, action.delay)) {\n                break;\n            }\n        } while (action = actions.shift()); // exhaust the scheduler queue\n        this.active = false;\n        if (error) {\n            while (action = actions.shift()) {\n                action.unsubscribe();\n            }\n            throw error;\n        }\n    };\n    return AsyncScheduler;\n}(Scheduler));\nexport { AsyncScheduler };\n//# sourceMappingURL=AsyncScheduler.js.map\n","/** PURE_IMPORTS_START _AsyncAction,_AsyncScheduler PURE_IMPORTS_END */\nimport { AsyncAction } from './AsyncAction';\nimport { AsyncScheduler } from './AsyncScheduler';\n/**\n *\n * Async Scheduler\n *\n * <span class=\"informal\">Schedule task as if you used setTimeout(task, duration)</span>\n *\n * `async` scheduler schedules tasks asynchronously, by putting them on the JavaScript\n * event loop queue. It is best used to delay tasks in time or to schedule tasks repeating\n * in intervals.\n *\n * If you just want to \"defer\" task, that is to perform it right after currently\n * executing synchronous code ends (commonly achieved by `setTimeout(deferredTask, 0)`),\n * better choice will be the {@link asap} scheduler.\n *\n * @example <caption>Use async scheduler to delay task</caption>\n * const task = () => console.log('it works!');\n *\n * Rx.Scheduler.async.schedule(task, 2000);\n *\n * // After 2 seconds logs:\n * // \"it works!\"\n *\n *\n * @example <caption>Use async scheduler to repeat task in intervals</caption>\n * function task(state) {\n *   console.log(state);\n *   this.schedule(state + 1, 1000); // `this` references currently executing Action,\n *                                   // which we reschedule with new state and delay\n * }\n *\n * Rx.Scheduler.async.schedule(task, 3000, 0);\n *\n * // Logs:\n * // 0 after 3s\n * // 1 after 4s\n * // 2 after 5s\n * // 3 after 6s\n *\n * @static true\n * @name async\n * @owner Scheduler\n */\nexport var async = /*@__PURE__*/ new AsyncScheduler(AsyncAction);\n//# sourceMappingURL=async.js.map\n","/** PURE_IMPORTS_START _isArray PURE_IMPORTS_END */\nimport { isArray } from './isArray';\nexport function isNumeric(val) {\n    // parseFloat NaNs numeric-cast false positives (null|true|false|\"\")\n    // ...but misinterprets leading-number strings, particularly hex literals (\"0x...\")\n    // subtraction forces infinities to NaN\n    // adding 1 corrects loss of precision from parseFloat (#15100)\n    return !isArray(val) && (val - parseFloat(val) + 1) >= 0;\n}\n//# sourceMappingURL=isNumeric.js.map\n","/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nexport function isScheduler(value) {\n    return value && typeof value.schedule === 'function';\n}\n//# sourceMappingURL=isScheduler.js.map\n","/** PURE_IMPORTS_START tslib,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n/**\n * Buffers the source Observable values until `closingNotifier` emits.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * that array only when another Observable emits.</span>\n *\n * <img src=\"./img/buffer.png\" width=\"100%\">\n *\n * Buffers the incoming Observable values until the given `closingNotifier`\n * Observable emits a value, at which point it emits the buffer on the output\n * Observable and starts a new buffer internally, awaiting the next time\n * `closingNotifier` emits.\n *\n * @example <caption>On every click, emit array of most recent interval events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var interval = Rx.Observable.interval(1000);\n * var buffered = interval.buffer(clicks);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link window}\n *\n * @param {Observable<any>} closingNotifier An Observable that signals the\n * buffer to be emitted on the output Observable.\n * @return {Observable<T[]>} An Observable of buffers, which are arrays of\n * values.\n * @method buffer\n * @owner Observable\n */\nexport function buffer(closingNotifier) {\n    return function bufferOperatorFunction(source) {\n        return source.lift(new BufferOperator(closingNotifier));\n    };\n}\nvar BufferOperator = /*@__PURE__*/ (function () {\n    function BufferOperator(closingNotifier) {\n        this.closingNotifier = closingNotifier;\n    }\n    BufferOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new BufferSubscriber(subscriber, this.closingNotifier));\n    };\n    return BufferOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar BufferSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(BufferSubscriber, _super);\n    function BufferSubscriber(destination, closingNotifier) {\n        var _this = _super.call(this, destination) || this;\n        _this.buffer = [];\n        _this.add(subscribeToResult(_this, closingNotifier));\n        return _this;\n    }\n    BufferSubscriber.prototype._next = function (value) {\n        this.buffer.push(value);\n    };\n    BufferSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        var buffer = this.buffer;\n        this.buffer = [];\n        this.destination.next(buffer);\n    };\n    return BufferSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=buffer.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\n/**\n * Buffers the source Observable values until the size hits the maximum\n * `bufferSize` given.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * that array only when its size reaches `bufferSize`.</span>\n *\n * <img src=\"./img/bufferCount.png\" width=\"100%\">\n *\n * Buffers a number of values from the source Observable by `bufferSize` then\n * emits the buffer and clears it, and starts a new buffer each\n * `startBufferEvery` values. If `startBufferEvery` is not provided or is\n * `null`, then new buffers are started immediately at the start of the source\n * and when each buffer closes and is emitted.\n *\n * @example <caption>Emit the last two click events as an array</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferCount(2);\n * buffered.subscribe(x => console.log(x));\n *\n * @example <caption>On every click, emit the last two click events as an array</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferCount(2, 1);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link pairwise}\n * @see {@link windowCount}\n *\n * @param {number} bufferSize The maximum size of the buffer emitted.\n * @param {number} [startBufferEvery] Interval at which to start a new buffer.\n * For example if `startBufferEvery` is `2`, then a new buffer will be started\n * on every other value from the source. A new buffer is started at the\n * beginning of the source by default.\n * @return {Observable<T[]>} An Observable of arrays of buffered values.\n * @method bufferCount\n * @owner Observable\n */\nexport function bufferCount(bufferSize, startBufferEvery) {\n    if (startBufferEvery === void 0) {\n        startBufferEvery = null;\n    }\n    return function bufferCountOperatorFunction(source) {\n        return source.lift(new BufferCountOperator(bufferSize, startBufferEvery));\n    };\n}\nvar BufferCountOperator = /*@__PURE__*/ (function () {\n    function BufferCountOperator(bufferSize, startBufferEvery) {\n        this.bufferSize = bufferSize;\n        this.startBufferEvery = startBufferEvery;\n        if (!startBufferEvery || bufferSize === startBufferEvery) {\n            this.subscriberClass = BufferCountSubscriber;\n        }\n        else {\n            this.subscriberClass = BufferSkipCountSubscriber;\n        }\n    }\n    BufferCountOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new this.subscriberClass(subscriber, this.bufferSize, this.startBufferEvery));\n    };\n    return BufferCountOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar BufferCountSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(BufferCountSubscriber, _super);\n    function BufferCountSubscriber(destination, bufferSize) {\n        var _this = _super.call(this, destination) || this;\n        _this.bufferSize = bufferSize;\n        _this.buffer = [];\n        return _this;\n    }\n    BufferCountSubscriber.prototype._next = function (value) {\n        var buffer = this.buffer;\n        buffer.push(value);\n        if (buffer.length == this.bufferSize) {\n            this.destination.next(buffer);\n            this.buffer = [];\n        }\n    };\n    BufferCountSubscriber.prototype._complete = function () {\n        var buffer = this.buffer;\n        if (buffer.length > 0) {\n            this.destination.next(buffer);\n        }\n        _super.prototype._complete.call(this);\n    };\n    return BufferCountSubscriber;\n}(Subscriber));\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar BufferSkipCountSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(BufferSkipCountSubscriber, _super);\n    function BufferSkipCountSubscriber(destination, bufferSize, startBufferEvery) {\n        var _this = _super.call(this, destination) || this;\n        _this.bufferSize = bufferSize;\n        _this.startBufferEvery = startBufferEvery;\n        _this.buffers = [];\n        _this.count = 0;\n        return _this;\n    }\n    BufferSkipCountSubscriber.prototype._next = function (value) {\n        var _a = this, bufferSize = _a.bufferSize, startBufferEvery = _a.startBufferEvery, buffers = _a.buffers, count = _a.count;\n        this.count++;\n        if (count % startBufferEvery === 0) {\n            buffers.push([]);\n        }\n        for (var i = buffers.length; i--;) {\n            var buffer = buffers[i];\n            buffer.push(value);\n            if (buffer.length === bufferSize) {\n                buffers.splice(i, 1);\n                this.destination.next(buffer);\n            }\n        }\n    };\n    BufferSkipCountSubscriber.prototype._complete = function () {\n        var _a = this, buffers = _a.buffers, destination = _a.destination;\n        while (buffers.length > 0) {\n            var buffer = buffers.shift();\n            if (buffer.length > 0) {\n                destination.next(buffer);\n            }\n        }\n        _super.prototype._complete.call(this);\n    };\n    return BufferSkipCountSubscriber;\n}(Subscriber));\n//# sourceMappingURL=bufferCount.js.map\n","/** PURE_IMPORTS_START tslib,_scheduler_async,_Subscriber,_util_isScheduler PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { async } from '../scheduler/async';\nimport { Subscriber } from '../Subscriber';\nimport { isScheduler } from '../util/isScheduler';\n/* tslint:enable:max-line-length */\n/**\n * Buffers the source Observable values for a specific time period.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * those arrays periodically in time.</span>\n *\n * <img src=\"./img/bufferTime.png\" width=\"100%\">\n *\n * Buffers values from the source for a specific time duration `bufferTimeSpan`.\n * Unless the optional argument `bufferCreationInterval` is given, it emits and\n * resets the buffer every `bufferTimeSpan` milliseconds. If\n * `bufferCreationInterval` is given, this operator opens the buffer every\n * `bufferCreationInterval` milliseconds and closes (emits and resets) the\n * buffer every `bufferTimeSpan` milliseconds. When the optional argument\n * `maxBufferSize` is specified, the buffer will be closed either after\n * `bufferTimeSpan` milliseconds or when it contains `maxBufferSize` elements.\n *\n * @example <caption>Every second, emit an array of the recent click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferTime(1000);\n * buffered.subscribe(x => console.log(x));\n *\n * @example <caption>Every 5 seconds, emit the click events from the next 2 seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferTime(2000, 5000);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link windowTime}\n *\n * @param {number} bufferTimeSpan The amount of time to fill each buffer array.\n * @param {number} [bufferCreationInterval] The interval at which to start new\n * buffers.\n * @param {number} [maxBufferSize] The maximum buffer size.\n * @param {Scheduler} [scheduler=async] The scheduler on which to schedule the\n * intervals that determine buffer boundaries.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferTime\n * @owner Observable\n */\nexport function bufferTime(bufferTimeSpan) {\n    var length = arguments.length;\n    var scheduler = async;\n    if (isScheduler(arguments[arguments.length - 1])) {\n        scheduler = arguments[arguments.length - 1];\n        length--;\n    }\n    var bufferCreationInterval = null;\n    if (length >= 2) {\n        bufferCreationInterval = arguments[1];\n    }\n    var maxBufferSize = Number.POSITIVE_INFINITY;\n    if (length >= 3) {\n        maxBufferSize = arguments[2];\n    }\n    return function bufferTimeOperatorFunction(source) {\n        return source.lift(new BufferTimeOperator(bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler));\n    };\n}\nvar BufferTimeOperator = /*@__PURE__*/ (function () {\n    function BufferTimeOperator(bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler) {\n        this.bufferTimeSpan = bufferTimeSpan;\n        this.bufferCreationInterval = bufferCreationInterval;\n        this.maxBufferSize = maxBufferSize;\n        this.scheduler = scheduler;\n    }\n    BufferTimeOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new BufferTimeSubscriber(subscriber, this.bufferTimeSpan, this.bufferCreationInterval, this.maxBufferSize, this.scheduler));\n    };\n    return BufferTimeOperator;\n}());\nvar Context = /*@__PURE__*/ (function () {\n    function Context() {\n        this.buffer = [];\n    }\n    return Context;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar BufferTimeSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(BufferTimeSubscriber, _super);\n    function BufferTimeSubscriber(destination, bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler) {\n        var _this = _super.call(this, destination) || this;\n        _this.bufferTimeSpan = bufferTimeSpan;\n        _this.bufferCreationInterval = bufferCreationInterval;\n        _this.maxBufferSize = maxBufferSize;\n        _this.scheduler = scheduler;\n        _this.contexts = [];\n        var context = _this.openContext();\n        _this.timespanOnly = bufferCreationInterval == null || bufferCreationInterval < 0;\n        if (_this.timespanOnly) {\n            var timeSpanOnlyState = { subscriber: _this, context: context, bufferTimeSpan: bufferTimeSpan };\n            _this.add(context.closeAction = scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));\n        }\n        else {\n            var closeState = { subscriber: _this, context: context };\n            var creationState = { bufferTimeSpan: bufferTimeSpan, bufferCreationInterval: bufferCreationInterval, subscriber: _this, scheduler: scheduler };\n            _this.add(context.closeAction = scheduler.schedule(dispatchBufferClose, bufferTimeSpan, closeState));\n            _this.add(scheduler.schedule(dispatchBufferCreation, bufferCreationInterval, creationState));\n        }\n        return _this;\n    }\n    BufferTimeSubscriber.prototype._next = function (value) {\n        var contexts = this.contexts;\n        var len = contexts.length;\n        var filledBufferContext;\n        for (var i = 0; i < len; i++) {\n            var context_1 = contexts[i];\n            var buffer = context_1.buffer;\n            buffer.push(value);\n            if (buffer.length == this.maxBufferSize) {\n                filledBufferContext = context_1;\n            }\n        }\n        if (filledBufferContext) {\n            this.onBufferFull(filledBufferContext);\n        }\n    };\n    BufferTimeSubscriber.prototype._error = function (err) {\n        this.contexts.length = 0;\n        _super.prototype._error.call(this, err);\n    };\n    BufferTimeSubscriber.prototype._complete = function () {\n        var _a = this, contexts = _a.contexts, destination = _a.destination;\n        while (contexts.length > 0) {\n            var context_2 = contexts.shift();\n            destination.next(context_2.buffer);\n        }\n        _super.prototype._complete.call(this);\n    };\n    /** @deprecated This is an internal implementation detail, do not use. */\n    BufferTimeSubscriber.prototype._unsubscribe = function () {\n        this.contexts = null;\n    };\n    BufferTimeSubscriber.prototype.onBufferFull = function (context) {\n        this.closeContext(context);\n        var closeAction = context.closeAction;\n        closeAction.unsubscribe();\n        this.remove(closeAction);\n        if (!this.closed && this.timespanOnly) {\n            context = this.openContext();\n            var bufferTimeSpan = this.bufferTimeSpan;\n            var timeSpanOnlyState = { subscriber: this, context: context, bufferTimeSpan: bufferTimeSpan };\n            this.add(context.closeAction = this.scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));\n        }\n    };\n    BufferTimeSubscriber.prototype.openContext = function () {\n        var context = new Context();\n        this.contexts.push(context);\n        return context;\n    };\n    BufferTimeSubscriber.prototype.closeContext = function (context) {\n        this.destination.next(context.buffer);\n        var contexts = this.contexts;\n        var spliceIndex = contexts ? contexts.indexOf(context) : -1;\n        if (spliceIndex >= 0) {\n            contexts.splice(contexts.indexOf(context), 1);\n        }\n    };\n    return BufferTimeSubscriber;\n}(Subscriber));\nfunction dispatchBufferTimeSpanOnly(state) {\n    var subscriber = state.subscriber;\n    var prevContext = state.context;\n    if (prevContext) {\n        subscriber.closeContext(prevContext);\n    }\n    if (!subscriber.closed) {\n        state.context = subscriber.openContext();\n        state.context.closeAction = this.schedule(state, state.bufferTimeSpan);\n    }\n}\nfunction dispatchBufferCreation(state) {\n    var bufferCreationInterval = state.bufferCreationInterval, bufferTimeSpan = state.bufferTimeSpan, subscriber = state.subscriber, scheduler = state.scheduler;\n    var context = subscriber.openContext();\n    var action = this;\n    if (!subscriber.closed) {\n        subscriber.add(context.closeAction = scheduler.schedule(dispatchBufferClose, bufferTimeSpan, { subscriber: subscriber, context: context }));\n        action.schedule(state, bufferCreationInterval);\n    }\n}\nfunction dispatchBufferClose(arg) {\n    var subscriber = arg.subscriber, context = arg.context;\n    subscriber.closeContext(context);\n}\n//# sourceMappingURL=bufferTime.js.map\n","/** PURE_IMPORTS_START tslib,_Subscription,_util_subscribeToResult,_OuterSubscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscription } from '../Subscription';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\n/**\n * Buffers the source Observable values starting from an emission from\n * `openings` and ending when the output of `closingSelector` emits.\n *\n * <span class=\"informal\">Collects values from the past as an array. Starts\n * collecting only when `opening` emits, and calls the `closingSelector`\n * function to get an Observable that tells when to close the buffer.</span>\n *\n * <img src=\"./img/bufferToggle.png\" width=\"100%\">\n *\n * Buffers values from the source by opening the buffer via signals from an\n * Observable provided to `openings`, and closing and sending the buffers when\n * a Subscribable or Promise returned by the `closingSelector` function emits.\n *\n * @example <caption>Every other second, emit the click events from the next 500ms</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var openings = Rx.Observable.interval(1000);\n * var buffered = clicks.bufferToggle(openings, i =>\n *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()\n * );\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferWhen}\n * @see {@link windowToggle}\n *\n * @param {SubscribableOrPromise<O>} openings A Subscribable or Promise of notifications to start new\n * buffers.\n * @param {function(value: O): SubscribableOrPromise} closingSelector A function that takes\n * the value emitted by the `openings` observable and returns a Subscribable or Promise,\n * which, when it emits, signals that the associated buffer should be emitted\n * and cleared.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferToggle\n * @owner Observable\n */\nexport function bufferToggle(openings, closingSelector) {\n    return function bufferToggleOperatorFunction(source) {\n        return source.lift(new BufferToggleOperator(openings, closingSelector));\n    };\n}\nvar BufferToggleOperator = /*@__PURE__*/ (function () {\n    function BufferToggleOperator(openings, closingSelector) {\n        this.openings = openings;\n        this.closingSelector = closingSelector;\n    }\n    BufferToggleOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new BufferToggleSubscriber(subscriber, this.openings, this.closingSelector));\n    };\n    return BufferToggleOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar BufferToggleSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(BufferToggleSubscriber, _super);\n    function BufferToggleSubscriber(destination, openings, closingSelector) {\n        var _this = _super.call(this, destination) || this;\n        _this.openings = openings;\n        _this.closingSelector = closingSelector;\n        _this.contexts = [];\n        _this.add(subscribeToResult(_this, openings));\n        return _this;\n    }\n    BufferToggleSubscriber.prototype._next = function (value) {\n        var contexts = this.contexts;\n        var len = contexts.length;\n        for (var i = 0; i < len; i++) {\n            contexts[i].buffer.push(value);\n        }\n    };\n    BufferToggleSubscriber.prototype._error = function (err) {\n        var contexts = this.contexts;\n        while (contexts.length > 0) {\n            var context_1 = contexts.shift();\n            context_1.subscription.unsubscribe();\n            context_1.buffer = null;\n            context_1.subscription = null;\n        }\n        this.contexts = null;\n        _super.prototype._error.call(this, err);\n    };\n    BufferToggleSubscriber.prototype._complete = function () {\n        var contexts = this.contexts;\n        while (contexts.length > 0) {\n            var context_2 = contexts.shift();\n            this.destination.next(context_2.buffer);\n            context_2.subscription.unsubscribe();\n            context_2.buffer = null;\n            context_2.subscription = null;\n        }\n        this.contexts = null;\n        _super.prototype._complete.call(this);\n    };\n    BufferToggleSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        outerValue ? this.closeBuffer(outerValue) : this.openBuffer(innerValue);\n    };\n    BufferToggleSubscriber.prototype.notifyComplete = function (innerSub) {\n        this.closeBuffer(innerSub.context);\n    };\n    BufferToggleSubscriber.prototype.openBuffer = function (value) {\n        try {\n            var closingSelector = this.closingSelector;\n            var closingNotifier = closingSelector.call(this, value);\n            if (closingNotifier) {\n                this.trySubscribe(closingNotifier);\n            }\n        }\n        catch (err) {\n            this._error(err);\n        }\n    };\n    BufferToggleSubscriber.prototype.closeBuffer = function (context) {\n        var contexts = this.contexts;\n        if (contexts && context) {\n            var buffer = context.buffer, subscription = context.subscription;\n            this.destination.next(buffer);\n            contexts.splice(contexts.indexOf(context), 1);\n            this.remove(subscription);\n            subscription.unsubscribe();\n        }\n    };\n    BufferToggleSubscriber.prototype.trySubscribe = function (closingNotifier) {\n        var contexts = this.contexts;\n        var buffer = [];\n        var subscription = new Subscription();\n        var context = { buffer: buffer, subscription: subscription };\n        contexts.push(context);\n        var innerSubscription = subscribeToResult(this, closingNotifier, context);\n        if (!innerSubscription || innerSubscription.closed) {\n            this.closeBuffer(context);\n        }\n        else {\n            innerSubscription.context = context;\n            this.add(innerSubscription);\n            subscription.add(innerSubscription);\n        }\n    };\n    return BufferToggleSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=bufferToggle.js.map\n","/** PURE_IMPORTS_START tslib,_Subscription,_util_tryCatch,_util_errorObject,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscription } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n/**\n * Buffers the source Observable values, using a factory function of closing\n * Observables to determine when to close, emit, and reset the buffer.\n *\n * <span class=\"informal\">Collects values from the past as an array. When it\n * starts collecting values, it calls a function that returns an Observable that\n * tells when to close the buffer and restart collecting.</span>\n *\n * <img src=\"./img/bufferWhen.png\" width=\"100%\">\n *\n * Opens a buffer immediately, then closes the buffer when the observable\n * returned by calling `closingSelector` function emits a value. When it closes\n * the buffer, it immediately opens a new buffer and repeats the process.\n *\n * @example <caption>Emit an array of the last clicks every [1-5] random seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferWhen(() =>\n *   Rx.Observable.interval(1000 + Math.random() * 4000)\n * );\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link windowWhen}\n *\n * @param {function(): Observable} closingSelector A function that takes no\n * arguments and returns an Observable that signals buffer closure.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferWhen\n * @owner Observable\n */\nexport function bufferWhen(closingSelector) {\n    return function (source) {\n        return source.lift(new BufferWhenOperator(closingSelector));\n    };\n}\nvar BufferWhenOperator = /*@__PURE__*/ (function () {\n    function BufferWhenOperator(closingSelector) {\n        this.closingSelector = closingSelector;\n    }\n    BufferWhenOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new BufferWhenSubscriber(subscriber, this.closingSelector));\n    };\n    return BufferWhenOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar BufferWhenSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(BufferWhenSubscriber, _super);\n    function BufferWhenSubscriber(destination, closingSelector) {\n        var _this = _super.call(this, destination) || this;\n        _this.closingSelector = closingSelector;\n        _this.subscribing = false;\n        _this.openBuffer();\n        return _this;\n    }\n    BufferWhenSubscriber.prototype._next = function (value) {\n        this.buffer.push(value);\n    };\n    BufferWhenSubscriber.prototype._complete = function () {\n        var buffer = this.buffer;\n        if (buffer) {\n            this.destination.next(buffer);\n        }\n        _super.prototype._complete.call(this);\n    };\n    /** @deprecated This is an internal implementation detail, do not use. */\n    BufferWhenSubscriber.prototype._unsubscribe = function () {\n        this.buffer = null;\n        this.subscribing = false;\n    };\n    BufferWhenSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.openBuffer();\n    };\n    BufferWhenSubscriber.prototype.notifyComplete = function () {\n        if (this.subscribing) {\n            this.complete();\n        }\n        else {\n            this.openBuffer();\n        }\n    };\n    BufferWhenSubscriber.prototype.openBuffer = function () {\n        var closingSubscription = this.closingSubscription;\n        if (closingSubscription) {\n            this.remove(closingSubscription);\n            closingSubscription.unsubscribe();\n        }\n        var buffer = this.buffer;\n        if (this.buffer) {\n            this.destination.next(buffer);\n        }\n        this.buffer = [];\n        var closingNotifier = tryCatch(this.closingSelector)();\n        if (closingNotifier === errorObject) {\n            this.error(errorObject.e);\n        }\n        else {\n            closingSubscription = new Subscription();\n            this.closingSubscription = closingSubscription;\n            this.add(closingSubscription);\n            this.subscribing = true;\n            closingSubscription.add(subscribeToResult(this, closingNotifier));\n            this.subscribing = false;\n        }\n    };\n    return BufferWhenSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=bufferWhen.js.map\n","/** PURE_IMPORTS_START tslib,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nexport function catchError(selector) {\n    return function catchErrorOperatorFunction(source) {\n        var operator = new CatchOperator(selector);\n        var caught = source.lift(operator);\n        return (operator.caught = caught);\n    };\n}\nvar CatchOperator = /*@__PURE__*/ (function () {\n    function CatchOperator(selector) {\n        this.selector = selector;\n    }\n    CatchOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new CatchSubscriber(subscriber, this.selector, this.caught));\n    };\n    return CatchOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar CatchSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(CatchSubscriber, _super);\n    function CatchSubscriber(destination, selector, caught) {\n        var _this = _super.call(this, destination) || this;\n        _this.selector = selector;\n        _this.caught = caught;\n        return _this;\n    }\n    // NOTE: overriding `error` instead of `_error` because we don't want\n    // to have this flag this subscriber as `isStopped`. We can mimic the\n    // behavior of the RetrySubscriber (from the `retry` operator), where\n    // we unsubscribe from our source chain, reset our Subscriber flags,\n    // then subscribe to the selector result.\n    CatchSubscriber.prototype.error = function (err) {\n        if (!this.isStopped) {\n            var result = void 0;\n            try {\n                result = this.selector(err, this.caught);\n            }\n            catch (err2) {\n                _super.prototype.error.call(this, err2);\n                return;\n            }\n            this._unsubscribeAndRecycle();\n            this.add(subscribeToResult(this, result));\n        }\n    };\n    return CatchSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=catchError.js.map\n","/** PURE_IMPORTS_START _Observable,_Subscription,_util_subscribeToArray PURE_IMPORTS_END */\nimport { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { subscribeToArray } from '../util/subscribeToArray';\nexport function fromArray(input, scheduler) {\n    if (!scheduler) {\n        return new Observable(subscribeToArray(input));\n    }\n    else {\n        return new Observable(function (subscriber) {\n            var sub = new Subscription();\n            var i = 0;\n            sub.add(scheduler.schedule(function () {\n                if (i === input.length) {\n                    subscriber.complete();\n                    return;\n                }\n                subscriber.next(input[i++]);\n                if (!subscriber.closed) {\n                    sub.add(this.schedule());\n                }\n            }));\n            return sub;\n        });\n    }\n}\n//# sourceMappingURL=fromArray.js.map\n","/** PURE_IMPORTS_START tslib,_util_isScheduler,_util_isArray,_OuterSubscriber,_util_subscribeToResult,_fromArray PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { isScheduler } from '../util/isScheduler';\nimport { isArray } from '../util/isArray';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { fromArray } from './fromArray';\nvar NONE = {};\n/* tslint:enable:max-line-length */\n/**\n * Combines multiple Observables to create an Observable whose values are\n * calculated from the latest values of each of its input Observables.\n *\n * <span class=\"informal\">Whenever any input Observable emits a value, it\n * computes a formula using the latest values from all the inputs, then emits\n * the output of that formula.</span>\n *\n * <img src=\"./img/combineLatest.png\" width=\"100%\">\n *\n * `combineLatest` combines the values from all the Observables passed as\n * arguments. This is done by subscribing to each Observable in order and,\n * whenever any Observable emits, collecting an array of the most recent\n * values from each Observable. So if you pass `n` Observables to operator,\n * returned Observable will always emit an array of `n` values, in order\n * corresponding to order of passed Observables (value from the first Observable\n * on the first place and so on).\n *\n * Static version of `combineLatest` accepts either an array of Observables\n * or each Observable can be put directly as an argument. Note that array of\n * Observables is good choice, if you don't know beforehand how many Observables\n * you will combine. Passing empty array will result in Observable that\n * completes immediately.\n *\n * To ensure output array has always the same length, `combineLatest` will\n * actually wait for all input Observables to emit at least once,\n * before it starts emitting results. This means if some Observable emits\n * values before other Observables started emitting, all that values but last\n * will be lost. On the other hand, is some Observable does not emit value but\n * completes, resulting Observable will complete at the same moment without\n * emitting anything, since it will be now impossible to include value from\n * completed Observable in resulting array. Also, if some input Observable does\n * not emit any value and never completes, `combineLatest` will also never emit\n * and never complete, since, again, it will wait for all streams to emit some\n * value.\n *\n * If at least one Observable was passed to `combineLatest` and all passed Observables\n * emitted something, resulting Observable will complete when all combined\n * streams complete. So even if some Observable completes, result of\n * `combineLatest` will still emit values when other Observables do. In case\n * of completed Observable, its value from now on will always be the last\n * emitted value. On the other hand, if any Observable errors, `combineLatest`\n * will error immediately as well, and all other Observables will be unsubscribed.\n *\n * `combineLatest` accepts as optional parameter `project` function, which takes\n * as arguments all values that would normally be emitted by resulting Observable.\n * `project` can return any kind of value, which will be then emitted by Observable\n * instead of default array. Note that `project` does not take as argument that array\n * of values, but values themselves. That means default `project` can be imagined\n * as function that takes all its arguments and puts them into an array.\n *\n *\n * @example <caption>Combine two timer Observables</caption>\n * const firstTimer = Rx.Observable.timer(0, 1000); // emit 0, 1, 2... after every second, starting from now\n * const secondTimer = Rx.Observable.timer(500, 1000); // emit 0, 1, 2... after every second, starting 0,5s from now\n * const combinedTimers = Rx.Observable.combineLatest(firstTimer, secondTimer);\n * combinedTimers.subscribe(value => console.log(value));\n * // Logs\n * // [0, 0] after 0.5s\n * // [1, 0] after 1s\n * // [1, 1] after 1.5s\n * // [2, 1] after 2s\n *\n *\n * @example <caption>Combine an array of Observables</caption>\n * const observables = [1, 5, 10].map(\n *   n => Rx.Observable.of(n).delay(n * 1000).startWith(0) // emit 0 and then emit n after n seconds\n * );\n * const combined = Rx.Observable.combineLatest(observables);\n * combined.subscribe(value => console.log(value));\n * // Logs\n * // [0, 0, 0] immediately\n * // [1, 0, 0] after 1s\n * // [1, 5, 0] after 5s\n * // [1, 5, 10] after 10s\n *\n *\n * @example <caption>Use project function to dynamically calculate the Body-Mass Index</caption>\n * var weight = Rx.Observable.of(70, 72, 76, 79, 75);\n * var height = Rx.Observable.of(1.76, 1.77, 1.78);\n * var bmi = Rx.Observable.combineLatest(weight, height, (w, h) => w / (h * h));\n * bmi.subscribe(x => console.log('BMI is ' + x));\n *\n * // With output to console:\n * // BMI is 24.212293388429753\n * // BMI is 23.93948099205209\n * // BMI is 23.671253629592222\n *\n *\n * @see {@link combineAll}\n * @see {@link merge}\n * @see {@link withLatestFrom}\n *\n * @param {ObservableInput} observable1 An input Observable to combine with other Observables.\n * @param {ObservableInput} observable2 An input Observable to combine with other Observables.\n * More than one input Observables may be given as arguments\n * or an array of Observables may be given as the first argument.\n * @param {function} [project] An optional function to project the values from\n * the combined latest values into a new value on the output Observable.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for subscribing to\n * each input Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n */\nexport function combineLatest() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i] = arguments[_i];\n    }\n    var resultSelector = null;\n    var scheduler = null;\n    if (isScheduler(observables[observables.length - 1])) {\n        scheduler = observables.pop();\n    }\n    if (typeof observables[observables.length - 1] === 'function') {\n        resultSelector = observables.pop();\n    }\n    // if the first and only other argument besides the resultSelector is an array\n    // assume it's been called with `combineLatest([obs1, obs2, obs3], resultSelector)`\n    if (observables.length === 1 && isArray(observables[0])) {\n        observables = observables[0];\n    }\n    return fromArray(observables, scheduler).lift(new CombineLatestOperator(resultSelector));\n}\nvar CombineLatestOperator = /*@__PURE__*/ (function () {\n    function CombineLatestOperator(resultSelector) {\n        this.resultSelector = resultSelector;\n    }\n    CombineLatestOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new CombineLatestSubscriber(subscriber, this.resultSelector));\n    };\n    return CombineLatestOperator;\n}());\nexport { CombineLatestOperator };\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar CombineLatestSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(CombineLatestSubscriber, _super);\n    function CombineLatestSubscriber(destination, resultSelector) {\n        var _this = _super.call(this, destination) || this;\n        _this.resultSelector = resultSelector;\n        _this.active = 0;\n        _this.values = [];\n        _this.observables = [];\n        return _this;\n    }\n    CombineLatestSubscriber.prototype._next = function (observable) {\n        this.values.push(NONE);\n        this.observables.push(observable);\n    };\n    CombineLatestSubscriber.prototype._complete = function () {\n        var observables = this.observables;\n        var len = observables.length;\n        if (len === 0) {\n            this.destination.complete();\n        }\n        else {\n            this.active = len;\n            this.toRespond = len;\n            for (var i = 0; i < len; i++) {\n                var observable = observables[i];\n                this.add(subscribeToResult(this, observable, observable, i));\n            }\n        }\n    };\n    CombineLatestSubscriber.prototype.notifyComplete = function (unused) {\n        if ((this.active -= 1) === 0) {\n            this.destination.complete();\n        }\n    };\n    CombineLatestSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        var values = this.values;\n        var oldVal = values[outerIndex];\n        var toRespond = !this.toRespond\n            ? 0\n            : oldVal === NONE ? --this.toRespond : this.toRespond;\n        values[outerIndex] = innerValue;\n        if (toRespond === 0) {\n            if (this.resultSelector) {\n                this._tryResultSelector(values);\n            }\n            else {\n                this.destination.next(values.slice());\n            }\n        }\n    };\n    CombineLatestSubscriber.prototype._tryResultSelector = function (values) {\n        var result;\n        try {\n            result = this.resultSelector.apply(this, values);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.destination.next(result);\n    };\n    return CombineLatestSubscriber;\n}(OuterSubscriber));\nexport { CombineLatestSubscriber };\n//# sourceMappingURL=combineLatest.js.map\n","/** PURE_IMPORTS_START _Observable PURE_IMPORTS_END */\nimport { Observable } from '../Observable';\n/**\n * The same Observable instance returned by any call to {@link empty} without a\n * {@link Scheduler}. It is preferrable to use this over `empty()`.\n */\nexport var EMPTY = /*@__PURE__*/ new Observable(function (subscriber) { return subscriber.complete(); });\n/**\n * Creates an Observable that emits no items to the Observer and immediately\n * emits a complete notification.\n *\n * <span class=\"informal\">Just emits 'complete', and nothing else.\n * </span>\n *\n * <img src=\"./img/empty.png\" width=\"100%\">\n *\n * This static operator is useful for creating a simple Observable that only\n * emits the complete notification. It can be used for composing with other\n * Observables, such as in a {@link mergeMap}.\n *\n * @example <caption>Emit the number 7, then complete.</caption>\n * var result = Rx.Observable.empty().startWith(7);\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Map and flatten only odd numbers to the sequence 'a', 'b', 'c'</caption>\n * var interval = Rx.Observable.interval(1000);\n * var result = interval.mergeMap(x =>\n *   x % 2 === 1 ? Rx.Observable.of('a', 'b', 'c') : Rx.Observable.empty()\n * );\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following to the console:\n * // x is equal to the count on the interval eg(0,1,2,3,...)\n * // x will occur every 1000ms\n * // if x % 2 is equal to 1 print abc\n * // if x % 2 is not equal to 1 nothing will be output\n *\n * @see {@link create}\n * @see {@link never}\n * @see {@link of}\n * @see {@link throw}\n *\n * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n * the emission of the complete notification.\n * @return {Observable} An \"empty\" Observable: emits only the complete\n * notification.\n * @static true\n * @name empty\n * @owner Observable\n * @deprecated Deprecated in favor of using EMPTY constant.\n */\nexport function empty(scheduler) {\n    return scheduler ? emptyScheduled(scheduler) : EMPTY;\n}\nexport function emptyScheduled(scheduler) {\n    return new Observable(function (subscriber) { return scheduler.schedule(function () { return subscriber.complete(); }); });\n}\n//# sourceMappingURL=empty.js.map\n","/** PURE_IMPORTS_START _Observable PURE_IMPORTS_END */\nimport { Observable } from '../Observable';\nexport function scalar(value) {\n    var result = new Observable(function (subscriber) {\n        subscriber.next(value);\n        subscriber.complete();\n    });\n    result._isScalar = true;\n    result.value = value;\n    return result;\n}\n//# sourceMappingURL=scalar.js.map\n","/** PURE_IMPORTS_START _util_isScheduler,_fromArray,_empty,_scalar PURE_IMPORTS_END */\nimport { isScheduler } from '../util/isScheduler';\nimport { fromArray } from './fromArray';\nimport { empty } from './empty';\nimport { scalar } from './scalar';\nexport function of() {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n    }\n    var scheduler = args[args.length - 1];\n    if (isScheduler(scheduler)) {\n        args.pop();\n    }\n    else {\n        scheduler = undefined;\n    }\n    switch (args.length) {\n        case 0:\n            return empty(scheduler);\n        case 1:\n            return scheduler ? fromArray(args, scheduler) : scalar(args[0]);\n        default:\n            return fromArray(args, scheduler);\n    }\n}\n//# sourceMappingURL=of.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\n/**\n * Applies a given `project` function to each value emitted by the source\n * Observable, and emits the resulting values as an Observable.\n *\n * <span class=\"informal\">Like [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map),\n * it passes each source value through a transformation function to get\n * corresponding output values.</span>\n *\n * <img src=\"./img/map.png\" width=\"100%\">\n *\n * Similar to the well known `Array.prototype.map` function, this operator\n * applies a projection to each value and emits that projection in the output\n * Observable.\n *\n * @example <caption>Map every click to the clientX position of that click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks.map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link mapTo}\n * @see {@link pluck}\n *\n * @param {function(value: T, index: number): R} project The function to apply\n * to each `value` emitted by the source Observable. The `index` parameter is\n * the number `i` for the i-th emission that has happened since the\n * subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to define what `this` is in the\n * `project` function.\n * @return {Observable<R>} An Observable that emits the values from the source\n * Observable transformed by the given `project` function.\n * @method map\n * @owner Observable\n */\nexport function map(project, thisArg) {\n    return function mapOperation(source) {\n        if (typeof project !== 'function') {\n            throw new TypeError('argument is not a function. Are you looking for `mapTo()`?');\n        }\n        return source.lift(new MapOperator(project, thisArg));\n    };\n}\nvar MapOperator = /*@__PURE__*/ (function () {\n    function MapOperator(project, thisArg) {\n        this.project = project;\n        this.thisArg = thisArg;\n    }\n    MapOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new MapSubscriber(subscriber, this.project, this.thisArg));\n    };\n    return MapOperator;\n}());\nexport { MapOperator };\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar MapSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(MapSubscriber, _super);\n    function MapSubscriber(destination, project, thisArg) {\n        var _this = _super.call(this, destination) || this;\n        _this.project = project;\n        _this.count = 0;\n        _this.thisArg = thisArg || _this;\n        return _this;\n    }\n    // NOTE: This looks unoptimized, but it's actually purposefully NOT\n    // using try/catch optimizations.\n    MapSubscriber.prototype._next = function (value) {\n        var result;\n        try {\n            result = this.project.call(this.thisArg, value, this.count++);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.destination.next(result);\n    };\n    return MapSubscriber;\n}(Subscriber));\n//# sourceMappingURL=map.js.map\n","/** PURE_IMPORTS_START tslib,_util_subscribeToResult,_OuterSubscriber,_map,_observable_from PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { map } from './map';\nimport { from } from '../observable/from';\n/* tslint:enable:max-line-length */\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link mergeAll}.</span>\n *\n * <img src=\"./img/mergeMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger.\n *\n * @example <caption>Map and flatten each letter to an Observable ticking every 1 second</caption>\n * var letters = Rx.Observable.of('a', 'b', 'c');\n * var result = letters.mergeMap(x =>\n *   Rx.Observable.interval(1000).map(i => x+i)\n * );\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // a0\n * // b0\n * // c0\n * // a1\n * // b1\n * // c1\n * // continues to list a,b,c with respective ascending integers\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and merging the results of the Observables obtained\n * from this transformation.\n * @method mergeMap\n * @owner Observable\n */\nexport function mergeMap(project, resultSelector, concurrent) {\n    if (concurrent === void 0) {\n        concurrent = Number.POSITIVE_INFINITY;\n    }\n    if (typeof resultSelector === 'function') {\n        // DEPRECATED PATH\n        return function (source) { return source.pipe(mergeMap(function (a, i) { return from(project(a, i)).pipe(map(function (b, ii) { return resultSelector(a, b, i, ii); })); }, concurrent)); };\n    }\n    else if (typeof resultSelector === 'number') {\n        concurrent = resultSelector;\n    }\n    return function (source) { return source.lift(new MergeMapOperator(project, concurrent)); };\n}\nvar MergeMapOperator = /*@__PURE__*/ (function () {\n    function MergeMapOperator(project, concurrent) {\n        if (concurrent === void 0) {\n            concurrent = Number.POSITIVE_INFINITY;\n        }\n        this.project = project;\n        this.concurrent = concurrent;\n    }\n    MergeMapOperator.prototype.call = function (observer, source) {\n        return source.subscribe(new MergeMapSubscriber(observer, this.project, this.concurrent));\n    };\n    return MergeMapOperator;\n}());\nexport { MergeMapOperator };\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar MergeMapSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(MergeMapSubscriber, _super);\n    function MergeMapSubscriber(destination, project, concurrent) {\n        if (concurrent === void 0) {\n            concurrent = Number.POSITIVE_INFINITY;\n        }\n        var _this = _super.call(this, destination) || this;\n        _this.project = project;\n        _this.concurrent = concurrent;\n        _this.hasCompleted = false;\n        _this.buffer = [];\n        _this.active = 0;\n        _this.index = 0;\n        return _this;\n    }\n    MergeMapSubscriber.prototype._next = function (value) {\n        if (this.active < this.concurrent) {\n            this._tryNext(value);\n        }\n        else {\n            this.buffer.push(value);\n        }\n    };\n    MergeMapSubscriber.prototype._tryNext = function (value) {\n        var result;\n        var index = this.index++;\n        try {\n            result = this.project(value, index);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.active++;\n        this._innerSub(result, value, index);\n    };\n    MergeMapSubscriber.prototype._innerSub = function (ish, value, index) {\n        this.add(subscribeToResult(this, ish, value, index));\n    };\n    MergeMapSubscriber.prototype._complete = function () {\n        this.hasCompleted = true;\n        if (this.active === 0 && this.buffer.length === 0) {\n            this.destination.complete();\n        }\n    };\n    MergeMapSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.destination.next(innerValue);\n    };\n    MergeMapSubscriber.prototype.notifyComplete = function (innerSub) {\n        var buffer = this.buffer;\n        this.remove(innerSub);\n        this.active--;\n        if (buffer.length > 0) {\n            this._next(buffer.shift());\n        }\n        else if (this.active === 0 && this.hasCompleted) {\n            this.destination.complete();\n        }\n    };\n    return MergeMapSubscriber;\n}(OuterSubscriber));\nexport { MergeMapSubscriber };\n//# sourceMappingURL=mergeMap.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\n/**\n * Counts the number of emissions on the source and emits that number when the\n * source completes.\n *\n * <span class=\"informal\">Tells how many values were emitted, when the source\n * completes.</span>\n *\n * <img src=\"./img/count.png\" width=\"100%\">\n *\n * `count` transforms an Observable that emits values into an Observable that\n * emits a single value that represents the number of values emitted by the\n * source Observable. If the source Observable terminates with an error, `count`\n * will pass this error notification along without emitting a value first. If\n * the source Observable does not terminate at all, `count` will neither emit\n * a value nor terminate. This operator takes an optional `predicate` function\n * as argument, in which case the output emission will represent the number of\n * source values that matched `true` with the `predicate`.\n *\n * @example <caption>Counts how many seconds have passed before the first click happened</caption>\n * var seconds = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var secondsBeforeClick = seconds.takeUntil(clicks);\n * var result = secondsBeforeClick.count();\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Counts how many odd numbers are there between 1 and 7</caption>\n * var numbers = Rx.Observable.range(1, 7);\n * var result = numbers.count(i => i % 2 === 1);\n * result.subscribe(x => console.log(x));\n *\n * // Results in:\n * // 4\n *\n * @see {@link max}\n * @see {@link min}\n * @see {@link reduce}\n *\n * @param {function(value: T, i: number, source: Observable<T>): boolean} [predicate] A\n * boolean function to select what values are to be counted. It is provided with\n * arguments of:\n * - `value`: the value from the source Observable.\n * - `index`: the (zero-based) \"index\" of the value from the source Observable.\n * - `source`: the source Observable instance itself.\n * @return {Observable} An Observable of one number that represents the count as\n * described above.\n * @method count\n * @owner Observable\n */\nexport function count(predicate) {\n    return function (source) { return source.lift(new CountOperator(predicate, source)); };\n}\nvar CountOperator = /*@__PURE__*/ (function () {\n    function CountOperator(predicate, source) {\n        this.predicate = predicate;\n        this.source = source;\n    }\n    CountOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new CountSubscriber(subscriber, this.predicate, this.source));\n    };\n    return CountOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar CountSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(CountSubscriber, _super);\n    function CountSubscriber(destination, predicate, source) {\n        var _this = _super.call(this, destination) || this;\n        _this.predicate = predicate;\n        _this.source = source;\n        _this.count = 0;\n        _this.index = 0;\n        return _this;\n    }\n    CountSubscriber.prototype._next = function (value) {\n        if (this.predicate) {\n            this._tryPredicate(value);\n        }\n        else {\n            this.count++;\n        }\n    };\n    CountSubscriber.prototype._tryPredicate = function (value) {\n        var result;\n        try {\n            result = this.predicate(value, this.index++, this.source);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        if (result) {\n            this.count++;\n        }\n    };\n    CountSubscriber.prototype._complete = function () {\n        this.destination.next(this.count);\n        this.destination.complete();\n    };\n    return CountSubscriber;\n}(Subscriber));\n//# sourceMappingURL=count.js.map\n","/** PURE_IMPORTS_START tslib,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n/**\n * Emits a value from the source Observable only after a particular time span\n * determined by another Observable has passed without another source emission.\n *\n * <span class=\"informal\">It's like {@link debounceTime}, but the time span of\n * emission silence is determined by a second Observable.</span>\n *\n * <img src=\"./img/debounce.png\" width=\"100%\">\n *\n * `debounce` delays values emitted by the source Observable, but drops previous\n * pending delayed emissions if a new value arrives on the source Observable.\n * This operator keeps track of the most recent value from the source\n * Observable, and spawns a duration Observable by calling the\n * `durationSelector` function. The value is emitted only when the duration\n * Observable emits a value or completes, and if no other value was emitted on\n * the source Observable since the duration Observable was spawned. If a new\n * value appears before the duration Observable emits, the previous value will\n * be dropped and will not be emitted on the output Observable.\n *\n * Like {@link debounceTime}, this is a rate-limiting operator, and also a\n * delay-like operator since output emissions do not necessarily occur at the\n * same time as they did on the source Observable.\n *\n * @example <caption>Emit the most recent click after a burst of clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.debounce(() => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounceTime}\n * @see {@link delayWhen}\n * @see {@link throttle}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the timeout\n * duration for each source value, returned as an Observable or a Promise.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified duration Observable returned by\n * `durationSelector`, and may drop some values if they occur too frequently.\n * @method debounce\n * @owner Observable\n */\nexport function debounce(durationSelector) {\n    return function (source) { return source.lift(new DebounceOperator(durationSelector)); };\n}\nvar DebounceOperator = /*@__PURE__*/ (function () {\n    function DebounceOperator(durationSelector) {\n        this.durationSelector = durationSelector;\n    }\n    DebounceOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new DebounceSubscriber(subscriber, this.durationSelector));\n    };\n    return DebounceOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar DebounceSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(DebounceSubscriber, _super);\n    function DebounceSubscriber(destination, durationSelector) {\n        var _this = _super.call(this, destination) || this;\n        _this.durationSelector = durationSelector;\n        _this.hasValue = false;\n        _this.durationSubscription = null;\n        return _this;\n    }\n    DebounceSubscriber.prototype._next = function (value) {\n        try {\n            var result = this.durationSelector.call(this, value);\n            if (result) {\n                this._tryNext(value, result);\n            }\n        }\n        catch (err) {\n            this.destination.error(err);\n        }\n    };\n    DebounceSubscriber.prototype._complete = function () {\n        this.emitValue();\n        this.destination.complete();\n    };\n    DebounceSubscriber.prototype._tryNext = function (value, duration) {\n        var subscription = this.durationSubscription;\n        this.value = value;\n        this.hasValue = true;\n        if (subscription) {\n            subscription.unsubscribe();\n            this.remove(subscription);\n        }\n        subscription = subscribeToResult(this, duration);\n        if (subscription && !subscription.closed) {\n            this.add(this.durationSubscription = subscription);\n        }\n    };\n    DebounceSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.emitValue();\n    };\n    DebounceSubscriber.prototype.notifyComplete = function () {\n        this.emitValue();\n    };\n    DebounceSubscriber.prototype.emitValue = function () {\n        if (this.hasValue) {\n            var value = this.value;\n            var subscription = this.durationSubscription;\n            if (subscription) {\n                this.durationSubscription = null;\n                subscription.unsubscribe();\n                this.remove(subscription);\n            }\n            // This must be done *before* passing the value\n            // along to the destination because it's possible for\n            // the value to synchronously re-enter this operator\n            // recursively if the duration selector Observable\n            // emits synchronously\n            this.value = null;\n            this.hasValue = false;\n            _super.prototype._next.call(this, value);\n        }\n    };\n    return DebounceSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=debounce.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber,_scheduler_async PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nimport { async } from '../scheduler/async';\n/**\n * Emits a value from the source Observable only after a particular time span\n * has passed without another source emission.\n *\n * <span class=\"informal\">It's like {@link delay}, but passes only the most\n * recent value from each burst of emissions.</span>\n *\n * <img src=\"./img/debounceTime.png\" width=\"100%\">\n *\n * `debounceTime` delays values emitted by the source Observable, but drops\n * previous pending delayed emissions if a new value arrives on the source\n * Observable. This operator keeps track of the most recent value from the\n * source Observable, and emits that only when `dueTime` enough time has passed\n * without any other value appearing on the source Observable. If a new value\n * appears before `dueTime` silence occurs, the previous value will be dropped\n * and will not be emitted on the output Observable.\n *\n * This is a rate-limiting operator, because it is impossible for more than one\n * value to be emitted in any time window of duration `dueTime`, but it is also\n * a delay-like operator since output emissions do not occur at the same time as\n * they did on the source Observable. Optionally takes a {@link IScheduler} for\n * managing timers.\n *\n * @example <caption>Emit the most recent click after a burst of clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.debounceTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttleTime}\n *\n * @param {number} dueTime The timeout duration in milliseconds (or the time\n * unit determined internally by the optional `scheduler`) for the window of\n * time required to wait for emission silence before emitting the most recent\n * source value.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the timeout for each value.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified `dueTime`, and may drop some values if they occur\n * too frequently.\n * @method debounceTime\n * @owner Observable\n */\nexport function debounceTime(dueTime, scheduler) {\n    if (scheduler === void 0) {\n        scheduler = async;\n    }\n    return function (source) { return source.lift(new DebounceTimeOperator(dueTime, scheduler)); };\n}\nvar DebounceTimeOperator = /*@__PURE__*/ (function () {\n    function DebounceTimeOperator(dueTime, scheduler) {\n        this.dueTime = dueTime;\n        this.scheduler = scheduler;\n    }\n    DebounceTimeOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new DebounceTimeSubscriber(subscriber, this.dueTime, this.scheduler));\n    };\n    return DebounceTimeOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar DebounceTimeSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(DebounceTimeSubscriber, _super);\n    function DebounceTimeSubscriber(destination, dueTime, scheduler) {\n        var _this = _super.call(this, destination) || this;\n        _this.dueTime = dueTime;\n        _this.scheduler = scheduler;\n        _this.debouncedSubscription = null;\n        _this.lastValue = null;\n        _this.hasValue = false;\n        return _this;\n    }\n    DebounceTimeSubscriber.prototype._next = function (value) {\n        this.clearDebounce();\n        this.lastValue = value;\n        this.hasValue = true;\n        this.add(this.debouncedSubscription = this.scheduler.schedule(dispatchNext, this.dueTime, this));\n    };\n    DebounceTimeSubscriber.prototype._complete = function () {\n        this.debouncedNext();\n        this.destination.complete();\n    };\n    DebounceTimeSubscriber.prototype.debouncedNext = function () {\n        this.clearDebounce();\n        if (this.hasValue) {\n            var lastValue = this.lastValue;\n            // This must be done *before* passing the value\n            // along to the destination because it's possible for\n            // the value to synchronously re-enter this operator\n            // recursively when scheduled with things like\n            // VirtualScheduler/TestScheduler.\n            this.lastValue = null;\n            this.hasValue = false;\n            this.destination.next(lastValue);\n        }\n    };\n    DebounceTimeSubscriber.prototype.clearDebounce = function () {\n        var debouncedSubscription = this.debouncedSubscription;\n        if (debouncedSubscription !== null) {\n            this.remove(debouncedSubscription);\n            debouncedSubscription.unsubscribe();\n            this.debouncedSubscription = null;\n        }\n    };\n    return DebounceTimeSubscriber;\n}(Subscriber));\nfunction dispatchNext(subscriber) {\n    subscriber.debouncedNext();\n}\n//# sourceMappingURL=debounceTime.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\n/* tslint:enable:max-line-length */\n/**\n * Emits a given value if the source Observable completes without emitting any\n * `next` value, otherwise mirrors the source Observable.\n *\n * <span class=\"informal\">If the source Observable turns out to be empty, then\n * this operator will emit a default value.</span>\n *\n * <img src=\"./img/defaultIfEmpty.png\" width=\"100%\">\n *\n * `defaultIfEmpty` emits the values emitted by the source Observable or a\n * specified default value if the source Observable is empty (completes without\n * having emitted any `next` value).\n *\n * @example <caption>If no clicks happen in 5 seconds, then emit \"no clicks\"</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var clicksBeforeFive = clicks.takeUntil(Rx.Observable.interval(5000));\n * var result = clicksBeforeFive.defaultIfEmpty('no clicks');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link empty}\n * @see {@link last}\n *\n * @param {any} [defaultValue=null] The default value used if the source\n * Observable is empty.\n * @return {Observable} An Observable that emits either the specified\n * `defaultValue` if the source Observable emits no items, or the values emitted\n * by the source Observable.\n * @method defaultIfEmpty\n * @owner Observable\n */\nexport function defaultIfEmpty(defaultValue) {\n    if (defaultValue === void 0) {\n        defaultValue = null;\n    }\n    return function (source) { return source.lift(new DefaultIfEmptyOperator(defaultValue)); };\n}\nvar DefaultIfEmptyOperator = /*@__PURE__*/ (function () {\n    function DefaultIfEmptyOperator(defaultValue) {\n        this.defaultValue = defaultValue;\n    }\n    DefaultIfEmptyOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new DefaultIfEmptySubscriber(subscriber, this.defaultValue));\n    };\n    return DefaultIfEmptyOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar DefaultIfEmptySubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(DefaultIfEmptySubscriber, _super);\n    function DefaultIfEmptySubscriber(destination, defaultValue) {\n        var _this = _super.call(this, destination) || this;\n        _this.defaultValue = defaultValue;\n        _this.isEmpty = true;\n        return _this;\n    }\n    DefaultIfEmptySubscriber.prototype._next = function (value) {\n        this.isEmpty = false;\n        this.destination.next(value);\n    };\n    DefaultIfEmptySubscriber.prototype._complete = function () {\n        if (this.isEmpty) {\n            this.destination.next(this.defaultValue);\n        }\n        this.destination.complete();\n    };\n    return DefaultIfEmptySubscriber;\n}(Subscriber));\n//# sourceMappingURL=defaultIfEmpty.js.map\n","/** PURE_IMPORTS_START _Observable PURE_IMPORTS_END */\nimport { Observable } from '../Observable';\n/**\n * Creates an Observable that emits no items to the Observer and immediately\n * emits an error notification.\n *\n * <span class=\"informal\">Just emits 'error', and nothing else.\n * </span>\n *\n * <img src=\"./img/throw.png\" width=\"100%\">\n *\n * This static operator is useful for creating a simple Observable that only\n * emits the error notification. It can be used for composing with other\n * Observables, such as in a {@link mergeMap}.\n *\n * @example <caption>Emit the number 7, then emit an error.</caption>\n * import { throwError, concat, of } from 'rxjs/create';\n *\n * const result = concat(of(7), throwError(new Error('oops!')));\n * result.subscribe(x => console.log(x), e => console.error(e));\n *\n * @example <caption>Map and flatten numbers to the sequence 'a', 'b', 'c', but throw an error for 13</caption>\n * import { throwError, interval, of } from 'rxjs/create';\n * import { mergeMap } from 'rxjs/operators';\n *\n * interval(1000).pipe(\n *   mergeMap(x => x === 13 ?\n *     throwError('Thirteens are bad') :\n *     of('a', 'b', 'c')\n *   )\n * ).subscribe(x => console.log(x), e => console.error(e));\n *\n * @see {@link create}\n * @see {@link empty}\n * @see {@link never}\n * @see {@link of}\n *\n * @param {any} error The particular Error to pass to the error notification.\n * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n * the emission of the error notification.\n * @return {Observable} An error Observable: emits only the error notification\n * using the given error argument.\n * @static true\n * @name throw\n * @owner Observable\n */\nexport function throwError(error, scheduler) {\n    if (!scheduler) {\n        return new Observable(function (subscriber) { return subscriber.error(error); });\n    }\n    else {\n        return new Observable(function (subscriber) { return scheduler.schedule(dispatch, 0, { error: error, subscriber: subscriber }); });\n    }\n}\nfunction dispatch(_a) {\n    var error = _a.error, subscriber = _a.subscriber;\n    subscriber.error(error);\n}\n//# sourceMappingURL=throwError.js.map\n","/** PURE_IMPORTS_START _observable_empty,_observable_of,_observable_throwError PURE_IMPORTS_END */\nimport { empty } from './observable/empty';\nimport { of } from './observable/of';\nimport { throwError } from './observable/throwError';\n/**\n * Represents a push-based event or value that an {@link Observable} can emit.\n * This class is particularly useful for operators that manage notifications,\n * like {@link materialize}, {@link dematerialize}, {@link observeOn}, and\n * others. Besides wrapping the actual delivered value, it also annotates it\n * with metadata of, for instance, what type of push message it is (`next`,\n * `error`, or `complete`).\n *\n * @see {@link materialize}\n * @see {@link dematerialize}\n * @see {@link observeOn}\n *\n * @class Notification<T>\n */\nvar Notification = /*@__PURE__*/ (function () {\n    function Notification(kind, value, error) {\n        this.kind = kind;\n        this.value = value;\n        this.error = error;\n        this.hasValue = kind === 'N';\n    }\n    /**\n     * Delivers to the given `observer` the value wrapped by this Notification.\n     * @param {Observer} observer\n     * @return\n     */\n    Notification.prototype.observe = function (observer) {\n        switch (this.kind) {\n            case 'N':\n                return observer.next && observer.next(this.value);\n            case 'E':\n                return observer.error && observer.error(this.error);\n            case 'C':\n                return observer.complete && observer.complete();\n        }\n    };\n    /**\n     * Given some {@link Observer} callbacks, deliver the value represented by the\n     * current Notification to the correctly corresponding callback.\n     * @param {function(value: T): void} next An Observer `next` callback.\n     * @param {function(err: any): void} [error] An Observer `error` callback.\n     * @param {function(): void} [complete] An Observer `complete` callback.\n     * @return {any}\n     */\n    Notification.prototype.do = function (next, error, complete) {\n        var kind = this.kind;\n        switch (kind) {\n            case 'N':\n                return next && next(this.value);\n            case 'E':\n                return error && error(this.error);\n            case 'C':\n                return complete && complete();\n        }\n    };\n    /**\n     * Takes an Observer or its individual callback functions, and calls `observe`\n     * or `do` methods accordingly.\n     * @param {Observer|function(value: T): void} nextOrObserver An Observer or\n     * the `next` callback.\n     * @param {function(err: any): void} [error] An Observer `error` callback.\n     * @param {function(): void} [complete] An Observer `complete` callback.\n     * @return {any}\n     */\n    Notification.prototype.accept = function (nextOrObserver, error, complete) {\n        if (nextOrObserver && typeof nextOrObserver.next === 'function') {\n            return this.observe(nextOrObserver);\n        }\n        else {\n            return this.do(nextOrObserver, error, complete);\n        }\n    };\n    /**\n     * Returns a simple Observable that just delivers the notification represented\n     * by this Notification instance.\n     * @return {any}\n     */\n    Notification.prototype.toObservable = function () {\n        var kind = this.kind;\n        switch (kind) {\n            case 'N':\n                return of(this.value);\n            case 'E':\n                return throwError(this.error);\n            case 'C':\n                return empty();\n        }\n        throw new Error('unexpected notification kind value');\n    };\n    /**\n     * A shortcut to create a Notification instance of the type `next` from a\n     * given value.\n     * @param {T} value The `next` value.\n     * @return {Notification<T>} The \"next\" Notification representing the\n     * argument.\n     * @nocollapse\n     */\n    Notification.createNext = function (value) {\n        if (typeof value !== 'undefined') {\n            return new Notification('N', value);\n        }\n        return Notification.undefinedValueNotification;\n    };\n    /**\n     * A shortcut to create a Notification instance of the type `error` from a\n     * given error.\n     * @param {any} [err] The `error` error.\n     * @return {Notification<T>} The \"error\" Notification representing the\n     * argument.\n     * @nocollapse\n     */\n    Notification.createError = function (err) {\n        return new Notification('E', undefined, err);\n    };\n    /**\n     * A shortcut to create a Notification instance of the type `complete`.\n     * @return {Notification<any>} The valueless \"complete\" Notification.\n     * @nocollapse\n     */\n    Notification.createComplete = function () {\n        return Notification.completeNotification;\n    };\n    Notification.completeNotification = new Notification('C');\n    Notification.undefinedValueNotification = new Notification('N', undefined);\n    return Notification;\n}());\nexport { Notification };\n//# sourceMappingURL=Notification.js.map\n","/** PURE_IMPORTS_START tslib,_scheduler_async,_util_isDate,_Subscriber,_Notification PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { async } from '../scheduler/async';\nimport { isDate } from '../util/isDate';\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\n/**\n * Delays the emission of items from the source Observable by a given timeout or\n * until a given Date.\n *\n * <span class=\"informal\">Time shifts each item by some specified amount of\n * milliseconds.</span>\n *\n * <img src=\"./img/delay.png\" width=\"100%\">\n *\n * If the delay argument is a Number, this operator time shifts the source\n * Observable by that amount of time expressed in milliseconds. The relative\n * time intervals between the values are preserved.\n *\n * If the delay argument is a Date, this operator time shifts the start of the\n * Observable execution until the given date occurs.\n *\n * @example <caption>Delay each click by one second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var delayedClicks = clicks.delay(1000); // each click emitted after 1 second\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @example <caption>Delay all clicks until a future date happens</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var date = new Date('March 15, 2050 12:00:00'); // in the future\n * var delayedClicks = clicks.delay(date); // click emitted only after that date\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @see {@link debounceTime}\n * @see {@link delayWhen}\n *\n * @param {number|Date} delay The delay duration in milliseconds (a `number`) or\n * a `Date` until which the emission of the source items is delayed.\n * @param {Scheduler} [scheduler=async] The IScheduler to use for\n * managing the timers that handle the time-shift for each item.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified timeout or Date.\n * @method delay\n * @owner Observable\n */\nexport function delay(delay, scheduler) {\n    if (scheduler === void 0) {\n        scheduler = async;\n    }\n    var absoluteDelay = isDate(delay);\n    var delayFor = absoluteDelay ? (+delay - scheduler.now()) : Math.abs(delay);\n    return function (source) { return source.lift(new DelayOperator(delayFor, scheduler)); };\n}\nvar DelayOperator = /*@__PURE__*/ (function () {\n    function DelayOperator(delay, scheduler) {\n        this.delay = delay;\n        this.scheduler = scheduler;\n    }\n    DelayOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new DelaySubscriber(subscriber, this.delay, this.scheduler));\n    };\n    return DelayOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar DelaySubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(DelaySubscriber, _super);\n    function DelaySubscriber(destination, delay, scheduler) {\n        var _this = _super.call(this, destination) || this;\n        _this.delay = delay;\n        _this.scheduler = scheduler;\n        _this.queue = [];\n        _this.active = false;\n        _this.errored = false;\n        return _this;\n    }\n    DelaySubscriber.dispatch = function (state) {\n        var source = state.source;\n        var queue = source.queue;\n        var scheduler = state.scheduler;\n        var destination = state.destination;\n        while (queue.length > 0 && (queue[0].time - scheduler.now()) <= 0) {\n            queue.shift().notification.observe(destination);\n        }\n        if (queue.length > 0) {\n            var delay_1 = Math.max(0, queue[0].time - scheduler.now());\n            this.schedule(state, delay_1);\n        }\n        else {\n            this.unsubscribe();\n            source.active = false;\n        }\n    };\n    DelaySubscriber.prototype._schedule = function (scheduler) {\n        this.active = true;\n        this.add(scheduler.schedule(DelaySubscriber.dispatch, this.delay, {\n            source: this, destination: this.destination, scheduler: scheduler\n        }));\n    };\n    DelaySubscriber.prototype.scheduleNotification = function (notification) {\n        if (this.errored === true) {\n            return;\n        }\n        var scheduler = this.scheduler;\n        var message = new DelayMessage(scheduler.now() + this.delay, notification);\n        this.queue.push(message);\n        if (this.active === false) {\n            this._schedule(scheduler);\n        }\n    };\n    DelaySubscriber.prototype._next = function (value) {\n        this.scheduleNotification(Notification.createNext(value));\n    };\n    DelaySubscriber.prototype._error = function (err) {\n        this.errored = true;\n        this.queue = [];\n        this.destination.error(err);\n    };\n    DelaySubscriber.prototype._complete = function () {\n        this.scheduleNotification(Notification.createComplete());\n    };\n    return DelaySubscriber;\n}(Subscriber));\nvar DelayMessage = /*@__PURE__*/ (function () {\n    function DelayMessage(time, notification) {\n        this.time = time;\n        this.notification = notification;\n    }\n    return DelayMessage;\n}());\n//# sourceMappingURL=delay.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber,_Observable,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n/**\n * Delays the emission of items from the source Observable by a given time span\n * determined by the emissions of another Observable.\n *\n * <span class=\"informal\">It's like {@link delay}, but the time span of the\n * delay duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/delayWhen.png\" width=\"100%\">\n *\n * `delayWhen` time shifts each emitted value from the source Observable by a\n * time span determined by another Observable. When the source emits a value,\n * the `delayDurationSelector` function is called with the source value as\n * argument, and should return an Observable, called the \"duration\" Observable.\n * The source value is emitted on the output Observable only when the duration\n * Observable emits a value or completes.\n *\n * Optionally, `delayWhen` takes a second argument, `subscriptionDelay`, which\n * is an Observable. When `subscriptionDelay` emits its first value or\n * completes, the source Observable is subscribed to and starts behaving like\n * described in the previous paragraph. If `subscriptionDelay` is not provided,\n * `delayWhen` will subscribe to the source Observable as soon as the output\n * Observable is subscribed.\n *\n * @example <caption>Delay each click by a random amount of time, between 0 and 5 seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var delayedClicks = clicks.delayWhen(event =>\n *   Rx.Observable.interval(Math.random() * 5000)\n * );\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @see {@link debounce}\n * @see {@link delay}\n *\n * @param {function(value: T): Observable} delayDurationSelector A function that\n * returns an Observable for each value emitted by the source Observable, which\n * is then used to delay the emission of that item on the output Observable\n * until the Observable returned from this function emits a value.\n * @param {Observable} subscriptionDelay An Observable that triggers the\n * subscription to the source Observable once it emits any value.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by an amount of time specified by the Observable returned by\n * `delayDurationSelector`.\n * @method delayWhen\n * @owner Observable\n */\nexport function delayWhen(delayDurationSelector, subscriptionDelay) {\n    if (subscriptionDelay) {\n        return function (source) {\n            return new SubscriptionDelayObservable(source, subscriptionDelay)\n                .lift(new DelayWhenOperator(delayDurationSelector));\n        };\n    }\n    return function (source) { return source.lift(new DelayWhenOperator(delayDurationSelector)); };\n}\nvar DelayWhenOperator = /*@__PURE__*/ (function () {\n    function DelayWhenOperator(delayDurationSelector) {\n        this.delayDurationSelector = delayDurationSelector;\n    }\n    DelayWhenOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new DelayWhenSubscriber(subscriber, this.delayDurationSelector));\n    };\n    return DelayWhenOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar DelayWhenSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(DelayWhenSubscriber, _super);\n    function DelayWhenSubscriber(destination, delayDurationSelector) {\n        var _this = _super.call(this, destination) || this;\n        _this.delayDurationSelector = delayDurationSelector;\n        _this.completed = false;\n        _this.delayNotifierSubscriptions = [];\n        _this.values = [];\n        return _this;\n    }\n    DelayWhenSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.destination.next(outerValue);\n        this.removeSubscription(innerSub);\n        this.tryComplete();\n    };\n    DelayWhenSubscriber.prototype.notifyError = function (error, innerSub) {\n        this._error(error);\n    };\n    DelayWhenSubscriber.prototype.notifyComplete = function (innerSub) {\n        var value = this.removeSubscription(innerSub);\n        if (value) {\n            this.destination.next(value);\n        }\n        this.tryComplete();\n    };\n    DelayWhenSubscriber.prototype._next = function (value) {\n        try {\n            var delayNotifier = this.delayDurationSelector(value);\n            if (delayNotifier) {\n                this.tryDelay(delayNotifier, value);\n            }\n        }\n        catch (err) {\n            this.destination.error(err);\n        }\n    };\n    DelayWhenSubscriber.prototype._complete = function () {\n        this.completed = true;\n        this.tryComplete();\n    };\n    DelayWhenSubscriber.prototype.removeSubscription = function (subscription) {\n        subscription.unsubscribe();\n        var subscriptionIdx = this.delayNotifierSubscriptions.indexOf(subscription);\n        var value = null;\n        if (subscriptionIdx !== -1) {\n            value = this.values[subscriptionIdx];\n            this.delayNotifierSubscriptions.splice(subscriptionIdx, 1);\n            this.values.splice(subscriptionIdx, 1);\n        }\n        return value;\n    };\n    DelayWhenSubscriber.prototype.tryDelay = function (delayNotifier, value) {\n        var notifierSubscription = subscribeToResult(this, delayNotifier, value);\n        if (notifierSubscription && !notifierSubscription.closed) {\n            this.add(notifierSubscription);\n            this.delayNotifierSubscriptions.push(notifierSubscription);\n        }\n        this.values.push(value);\n    };\n    DelayWhenSubscriber.prototype.tryComplete = function () {\n        if (this.completed && this.delayNotifierSubscriptions.length === 0) {\n            this.destination.complete();\n        }\n    };\n    return DelayWhenSubscriber;\n}(OuterSubscriber));\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SubscriptionDelayObservable = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(SubscriptionDelayObservable, _super);\n    function SubscriptionDelayObservable(source, subscriptionDelay) {\n        var _this = _super.call(this) || this;\n        _this.source = source;\n        _this.subscriptionDelay = subscriptionDelay;\n        return _this;\n    }\n    /** @deprecated This is an internal implementation detail, do not use. */\n    SubscriptionDelayObservable.prototype._subscribe = function (subscriber) {\n        this.subscriptionDelay.subscribe(new SubscriptionDelaySubscriber(subscriber, this.source));\n    };\n    return SubscriptionDelayObservable;\n}(Observable));\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SubscriptionDelaySubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(SubscriptionDelaySubscriber, _super);\n    function SubscriptionDelaySubscriber(parent, source) {\n        var _this = _super.call(this) || this;\n        _this.parent = parent;\n        _this.source = source;\n        _this.sourceSubscribed = false;\n        return _this;\n    }\n    SubscriptionDelaySubscriber.prototype._next = function (unused) {\n        this.subscribeToSource();\n    };\n    SubscriptionDelaySubscriber.prototype._error = function (err) {\n        this.unsubscribe();\n        this.parent.error(err);\n    };\n    SubscriptionDelaySubscriber.prototype._complete = function () {\n        this.subscribeToSource();\n    };\n    SubscriptionDelaySubscriber.prototype.subscribeToSource = function () {\n        if (!this.sourceSubscribed) {\n            this.sourceSubscribed = true;\n            this.unsubscribe();\n            this.source.subscribe(this.parent);\n        }\n    };\n    return SubscriptionDelaySubscriber;\n}(Subscriber));\n//# sourceMappingURL=delayWhen.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\n/**\n * Converts an Observable of {@link Notification} objects into the emissions\n * that they represent.\n *\n * <span class=\"informal\">Unwraps {@link Notification} objects as actual `next`,\n * `error` and `complete` emissions. The opposite of {@link materialize}.</span>\n *\n * <img src=\"./img/dematerialize.png\" width=\"100%\">\n *\n * `dematerialize` is assumed to operate an Observable that only emits\n * {@link Notification} objects as `next` emissions, and does not emit any\n * `error`. Such Observable is the output of a `materialize` operation. Those\n * notifications are then unwrapped using the metadata they contain, and emitted\n * as `next`, `error`, and `complete` on the output Observable.\n *\n * Use this operator in conjunction with {@link materialize}.\n *\n * @example <caption>Convert an Observable of Notifications to an actual Observable</caption>\n * var notifA = new Rx.Notification('N', 'A');\n * var notifB = new Rx.Notification('N', 'B');\n * var notifE = new Rx.Notification('E', void 0,\n *   new TypeError('x.toUpperCase is not a function')\n * );\n * var materialized = Rx.Observable.of(notifA, notifB, notifE);\n * var upperCase = materialized.dematerialize();\n * upperCase.subscribe(x => console.log(x), e => console.error(e));\n *\n * // Results in:\n * // A\n * // B\n * // TypeError: x.toUpperCase is not a function\n *\n * @see {@link Notification}\n * @see {@link materialize}\n *\n * @return {Observable} An Observable that emits items and notifications\n * embedded in Notification objects emitted by the source Observable.\n * @method dematerialize\n * @owner Observable\n */\nexport function dematerialize() {\n    return function dematerializeOperatorFunction(source) {\n        return source.lift(new DeMaterializeOperator());\n    };\n}\nvar DeMaterializeOperator = /*@__PURE__*/ (function () {\n    function DeMaterializeOperator() {\n    }\n    DeMaterializeOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new DeMaterializeSubscriber(subscriber));\n    };\n    return DeMaterializeOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar DeMaterializeSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(DeMaterializeSubscriber, _super);\n    function DeMaterializeSubscriber(destination) {\n        return _super.call(this, destination) || this;\n    }\n    DeMaterializeSubscriber.prototype._next = function (value) {\n        value.observe(this.destination);\n    };\n    return DeMaterializeSubscriber;\n}(Subscriber));\n//# sourceMappingURL=dematerialize.js.map\n","/** PURE_IMPORTS_START tslib,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from previous items.\n *\n * If a keySelector function is provided, then it will project each value from the source observable into a new value that it will\n * check for equality with previously projected values. If a keySelector function is not provided, it will use each value from the\n * source observable directly with an equality check against previous values.\n *\n * In JavaScript runtimes that support `Set`, this operator will use a `Set` to improve performance of the distinct value checking.\n *\n * In other runtimes, this operator will use a minimal implementation of `Set` that relies on an `Array` and `indexOf` under the\n * hood, so performance will degrade as more values are checked for distinction. Even in newer browsers, a long-running `distinct`\n * use might result in memory leaks. To help alleviate this in some scenarios, an optional `flushes` parameter is also provided so\n * that the internal `Set` can be \"flushed\", basically clearing it of values.\n *\n * @example <caption>A simple example with numbers</caption>\n * Observable.of(1, 1, 2, 2, 2, 1, 2, 3, 4, 3, 2, 1)\n *   .distinct()\n *   .subscribe(x => console.log(x)); // 1, 2, 3, 4\n *\n * @example <caption>An example using a keySelector function</caption>\n * interface Person {\n *    age: number,\n *    name: string\n * }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'})\n *     .distinct((p: Person) => p.name)\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n *\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n *\n * @param {function} [keySelector] Optional function to select which value you want to check as distinct.\n * @param {Observable} [flushes] Optional Observable for flushing the internal HashSet of the operator.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values.\n * @method distinct\n * @owner Observable\n */\nexport function distinct(keySelector, flushes) {\n    return function (source) { return source.lift(new DistinctOperator(keySelector, flushes)); };\n}\nvar DistinctOperator = /*@__PURE__*/ (function () {\n    function DistinctOperator(keySelector, flushes) {\n        this.keySelector = keySelector;\n        this.flushes = flushes;\n    }\n    DistinctOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new DistinctSubscriber(subscriber, this.keySelector, this.flushes));\n    };\n    return DistinctOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar DistinctSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(DistinctSubscriber, _super);\n    function DistinctSubscriber(destination, keySelector, flushes) {\n        var _this = _super.call(this, destination) || this;\n        _this.keySelector = keySelector;\n        _this.values = new Set();\n        if (flushes) {\n            _this.add(subscribeToResult(_this, flushes));\n        }\n        return _this;\n    }\n    DistinctSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.values.clear();\n    };\n    DistinctSubscriber.prototype.notifyError = function (error, innerSub) {\n        this._error(error);\n    };\n    DistinctSubscriber.prototype._next = function (value) {\n        if (this.keySelector) {\n            this._useKeySelector(value);\n        }\n        else {\n            this._finalizeNext(value, value);\n        }\n    };\n    DistinctSubscriber.prototype._useKeySelector = function (value) {\n        var key;\n        var destination = this.destination;\n        try {\n            key = this.keySelector(value);\n        }\n        catch (err) {\n            destination.error(err);\n            return;\n        }\n        this._finalizeNext(key, value);\n    };\n    DistinctSubscriber.prototype._finalizeNext = function (key, value) {\n        var values = this.values;\n        if (!values.has(key)) {\n            values.add(key);\n            this.destination.next(value);\n        }\n    };\n    return DistinctSubscriber;\n}(OuterSubscriber));\nexport { DistinctSubscriber };\n//# sourceMappingURL=distinct.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber,_util_tryCatch,_util_errorObject PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n/* tslint:enable:max-line-length */\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item.\n *\n * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n *\n * If a comparator function is not provided, an equality check is used by default.\n *\n * @example <caption>A simple example with numbers</caption>\n * Observable.of(1, 1, 2, 2, 2, 1, 1, 2, 3, 3, 4)\n *   .distinctUntilChanged()\n *   .subscribe(x => console.log(x)); // 1, 2, 1, 2, 3, 4\n *\n * @example <caption>An example using a compare function</caption>\n * interface Person {\n *    age: number,\n *    name: string\n * }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'})\n *     { age: 6, name: 'Foo'})\n *     .distinctUntilChanged((p: Person, q: Person) => p.name === q.name)\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n * // { age: 5, name: 'Foo' }\n *\n * @see {@link distinct}\n * @see {@link distinctUntilKeyChanged}\n *\n * @param {function} [compare] Optional comparison function called to test if an item is distinct from the previous item in the source.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values.\n * @method distinctUntilChanged\n * @owner Observable\n */\nexport function distinctUntilChanged(compare, keySelector) {\n    return function (source) { return source.lift(new DistinctUntilChangedOperator(compare, keySelector)); };\n}\nvar DistinctUntilChangedOperator = /*@__PURE__*/ (function () {\n    function DistinctUntilChangedOperator(compare, keySelector) {\n        this.compare = compare;\n        this.keySelector = keySelector;\n    }\n    DistinctUntilChangedOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new DistinctUntilChangedSubscriber(subscriber, this.compare, this.keySelector));\n    };\n    return DistinctUntilChangedOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar DistinctUntilChangedSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(DistinctUntilChangedSubscriber, _super);\n    function DistinctUntilChangedSubscriber(destination, compare, keySelector) {\n        var _this = _super.call(this, destination) || this;\n        _this.keySelector = keySelector;\n        _this.hasKey = false;\n        if (typeof compare === 'function') {\n            _this.compare = compare;\n        }\n        return _this;\n    }\n    DistinctUntilChangedSubscriber.prototype.compare = function (x, y) {\n        return x === y;\n    };\n    DistinctUntilChangedSubscriber.prototype._next = function (value) {\n        var keySelector = this.keySelector;\n        var key = value;\n        if (keySelector) {\n            key = tryCatch(this.keySelector)(value);\n            if (key === errorObject) {\n                return this.destination.error(errorObject.e);\n            }\n        }\n        var result = false;\n        if (this.hasKey) {\n            result = tryCatch(this.compare)(this.key, key);\n            if (result === errorObject) {\n                return this.destination.error(errorObject.e);\n            }\n        }\n        else {\n            this.hasKey = true;\n        }\n        if (Boolean(result) === false) {\n            this.key = key;\n            this.destination.next(value);\n        }\n    };\n    return DistinctUntilChangedSubscriber;\n}(Subscriber));\n//# sourceMappingURL=distinctUntilChanged.js.map\n","/** PURE_IMPORTS_START tslib PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\n/**\n * An error thrown when an element was queried at a certain index of an\n * Observable, but no such index or position exists in that sequence.\n *\n * @see {@link elementAt}\n * @see {@link take}\n * @see {@link takeLast}\n *\n * @class ArgumentOutOfRangeError\n */\nvar ArgumentOutOfRangeError = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(ArgumentOutOfRangeError, _super);\n    function ArgumentOutOfRangeError() {\n        var _this = _super.call(this, 'argument out of range') || this;\n        _this.name = 'ArgumentOutOfRangeError';\n        Object.setPrototypeOf(_this, ArgumentOutOfRangeError.prototype);\n        return _this;\n    }\n    return ArgumentOutOfRangeError;\n}(Error));\nexport { ArgumentOutOfRangeError };\n//# sourceMappingURL=ArgumentOutOfRangeError.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\n/* tslint:enable:max-line-length */\n/**\n * Filter items emitted by the source Observable by only emitting those that\n * satisfy a specified predicate.\n *\n * <span class=\"informal\">Like\n * [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter),\n * it only emits a value from the source if it passes a criterion function.</span>\n *\n * <img src=\"./img/filter.png\" width=\"100%\">\n *\n * Similar to the well-known `Array.prototype.filter` method, this operator\n * takes values from the source Observable, passes them through a `predicate`\n * function and only emits those values that yielded `true`.\n *\n * @example <caption>Emit only click events whose target was a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var clicksOnDivs = clicks.filter(ev => ev.target.tagName === 'DIV');\n * clicksOnDivs.subscribe(x => console.log(x));\n *\n * @see {@link distinct}\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n * @see {@link ignoreElements}\n * @see {@link partition}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates each value emitted by the source Observable. If it returns `true`,\n * the value is emitted, if `false` the value is not passed to the output\n * Observable. The `index` parameter is the number `i` for the i-th source\n * emission that has happened since the subscription, starting from the number\n * `0`.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable} An Observable of values from the source that were\n * allowed by the `predicate` function.\n * @method filter\n * @owner Observable\n */\nexport function filter(predicate, thisArg) {\n    return function filterOperatorFunction(source) {\n        return source.lift(new FilterOperator(predicate, thisArg));\n    };\n}\nvar FilterOperator = /*@__PURE__*/ (function () {\n    function FilterOperator(predicate, thisArg) {\n        this.predicate = predicate;\n        this.thisArg = thisArg;\n    }\n    FilterOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new FilterSubscriber(subscriber, this.predicate, this.thisArg));\n    };\n    return FilterOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar FilterSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(FilterSubscriber, _super);\n    function FilterSubscriber(destination, predicate, thisArg) {\n        var _this = _super.call(this, destination) || this;\n        _this.predicate = predicate;\n        _this.thisArg = thisArg;\n        _this.count = 0;\n        return _this;\n    }\n    // the try catch block below is left specifically for\n    // optimization and perf reasons. a tryCatcher is not necessary here.\n    FilterSubscriber.prototype._next = function (value) {\n        var result;\n        try {\n            result = this.predicate.call(this.thisArg, value, this.count++);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        if (result) {\n            this.destination.next(value);\n        }\n    };\n    return FilterSubscriber;\n}(Subscriber));\n//# sourceMappingURL=filter.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber,_util_noop,_util_isFunction PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nimport { noop } from '../util/noop';\nimport { isFunction } from '../util/isFunction';\n/* tslint:enable:max-line-length */\n/**\n * Perform a side effect for every emission on the source Observable, but return\n * an Observable that is identical to the source.\n *\n * <span class=\"informal\">Intercepts each emission on the source and runs a\n * function, but returns an output which is identical to the source as long as errors don't occur.</span>\n *\n * <img src=\"./img/do.png\" width=\"100%\">\n *\n * Returns a mirrored Observable of the source Observable, but modified so that\n * the provided Observer is called to perform a side effect for every value,\n * error, and completion emitted by the source. Any errors that are thrown in\n * the aforementioned Observer or handlers are safely sent down the error path\n * of the output Observable.\n *\n * This operator is useful for debugging your Observables for the correct values\n * or performing other side effects.\n *\n * Note: this is different to a `subscribe` on the Observable. If the Observable\n * returned by `do` is not subscribed, the side effects specified by the\n * Observer will never happen. `do` therefore simply spies on existing\n * execution, it does not trigger an execution to happen like `subscribe` does.\n *\n * @example <caption>Map every click to the clientX position of that click, while also logging the click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks\n *   .do(ev => console.log(ev))\n *   .map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link map}\n * @see {@link subscribe}\n *\n * @param {Observer|function} [nextOrObserver] A normal Observer object or a\n * callback for `next`.\n * @param {function} [error] Callback for errors in the source.\n * @param {function} [complete] Callback for the completion of the source.\n * @return {Observable} An Observable identical to the source, but runs the\n * specified Observer or callback(s) for each item.\n * @name tap\n */\nexport function tap(nextOrObserver, error, complete) {\n    return function tapOperatorFunction(source) {\n        return source.lift(new DoOperator(nextOrObserver, error, complete));\n    };\n}\nvar DoOperator = /*@__PURE__*/ (function () {\n    function DoOperator(nextOrObserver, error, complete) {\n        this.nextOrObserver = nextOrObserver;\n        this.error = error;\n        this.complete = complete;\n    }\n    DoOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new TapSubscriber(subscriber, this.nextOrObserver, this.error, this.complete));\n    };\n    return DoOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar TapSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(TapSubscriber, _super);\n    function TapSubscriber(destination, observerOrNext, error, complete) {\n        var _this = _super.call(this, destination) || this;\n        _this._tapNext = noop;\n        _this._tapError = noop;\n        _this._tapComplete = noop;\n        _this._tapError = error || noop;\n        _this._tapComplete = complete || noop;\n        if (isFunction(observerOrNext)) {\n            _this._context = _this;\n            _this._tapNext = observerOrNext;\n        }\n        else if (observerOrNext) {\n            _this._context = observerOrNext;\n            _this._tapNext = observerOrNext.next || noop;\n            _this._tapError = observerOrNext.error || noop;\n            _this._tapComplete = observerOrNext.complete || noop;\n        }\n        return _this;\n    }\n    TapSubscriber.prototype._next = function (value) {\n        try {\n            this._tapNext.call(this._context, value);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.destination.next(value);\n    };\n    TapSubscriber.prototype._error = function (err) {\n        try {\n            this._tapError.call(this._context, err);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.destination.error(err);\n    };\n    TapSubscriber.prototype._complete = function () {\n        try {\n            this._tapComplete.call(this._context);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        return this.destination.complete();\n    };\n    return TapSubscriber;\n}(Subscriber));\n//# sourceMappingURL=tap.js.map\n","/** PURE_IMPORTS_START tslib PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\n/**\n * An error thrown when an Observable or a sequence was queried but has no\n * elements.\n *\n * @see {@link first}\n * @see {@link last}\n * @see {@link single}\n *\n * @class EmptyError\n */\nvar EmptyError = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(EmptyError, _super);\n    function EmptyError() {\n        var _this = _super.call(this, 'no elements in sequence') || this;\n        _this.name = 'EmptyError';\n        Object.setPrototypeOf(_this, EmptyError.prototype);\n        return _this;\n    }\n    return EmptyError;\n}(Error));\nexport { EmptyError };\n//# sourceMappingURL=EmptyError.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber,_util_ArgumentOutOfRangeError,_observable_empty PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { empty } from '../observable/empty';\n/**\n * Emits only the first `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Takes the first `count` values from the source, then\n * completes.</span>\n *\n * <img src=\"./img/take.png\" width=\"100%\">\n *\n * `take` returns an Observable that emits only the first `count` values emitted\n * by the source Observable. If the source emits fewer than `count` values then\n * all of its values are emitted. After that, it completes, regardless if the\n * source completes.\n *\n * @example <caption>Take the first 5 seconds of an infinite 1-second interval Observable</caption>\n * var interval = Rx.Observable.interval(1000);\n * var five = interval.take(5);\n * five.subscribe(x => console.log(x));\n *\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `take(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of `next` values to emit.\n * @return {Observable<T>} An Observable that emits only the first `count`\n * values emitted by the source Observable, or all of the values from the source\n * if the source emits fewer than `count` values.\n * @method take\n * @owner Observable\n */\nexport function take(count) {\n    return function (source) {\n        if (count === 0) {\n            return empty();\n        }\n        else {\n            return source.lift(new TakeOperator(count));\n        }\n    };\n}\nvar TakeOperator = /*@__PURE__*/ (function () {\n    function TakeOperator(total) {\n        this.total = total;\n        if (this.total < 0) {\n            throw new ArgumentOutOfRangeError;\n        }\n    }\n    TakeOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new TakeSubscriber(subscriber, this.total));\n    };\n    return TakeOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar TakeSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(TakeSubscriber, _super);\n    function TakeSubscriber(destination, total) {\n        var _this = _super.call(this, destination) || this;\n        _this.total = total;\n        _this.count = 0;\n        return _this;\n    }\n    TakeSubscriber.prototype._next = function (value) {\n        var total = this.total;\n        var count = ++this.count;\n        if (count <= total) {\n            this.destination.next(value);\n            if (count === total) {\n                this.destination.complete();\n                this.unsubscribe();\n            }\n        }\n    };\n    return TakeSubscriber;\n}(Subscriber));\n//# sourceMappingURL=take.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\n/**\n * Returns an Observable that emits whether or not every item of the source satisfies the condition specified.\n *\n * @example <caption>A simple example emitting true if all elements are less than 5, false otherwise</caption>\n *  Observable.of(1, 2, 3, 4, 5, 6)\n *     .every(x => x < 5)\n *     .subscribe(x => console.log(x)); // -> false\n *\n * @param {function} predicate A function for determining if an item meets a specified condition.\n * @param {any} [thisArg] Optional object to use for `this` in the callback.\n * @return {Observable} An Observable of booleans that determines if all items of the source Observable meet the condition specified.\n * @method every\n * @owner Observable\n */\nexport function every(predicate, thisArg) {\n    return function (source) { return source.lift(new EveryOperator(predicate, thisArg, source)); };\n}\nvar EveryOperator = /*@__PURE__*/ (function () {\n    function EveryOperator(predicate, thisArg, source) {\n        this.predicate = predicate;\n        this.thisArg = thisArg;\n        this.source = source;\n    }\n    EveryOperator.prototype.call = function (observer, source) {\n        return source.subscribe(new EverySubscriber(observer, this.predicate, this.thisArg, this.source));\n    };\n    return EveryOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar EverySubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(EverySubscriber, _super);\n    function EverySubscriber(destination, predicate, thisArg, source) {\n        var _this = _super.call(this, destination) || this;\n        _this.predicate = predicate;\n        _this.thisArg = thisArg;\n        _this.source = source;\n        _this.index = 0;\n        _this.thisArg = thisArg || _this;\n        return _this;\n    }\n    EverySubscriber.prototype.notifyComplete = function (everyValueMatch) {\n        this.destination.next(everyValueMatch);\n        this.destination.complete();\n    };\n    EverySubscriber.prototype._next = function (value) {\n        var result = false;\n        try {\n            result = this.predicate.call(this.thisArg, value, this.index++, this.source);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        if (!result) {\n            this.notifyComplete(false);\n        }\n    };\n    EverySubscriber.prototype._complete = function () {\n        this.notifyComplete(true);\n    };\n    return EverySubscriber;\n}(Subscriber));\n//# sourceMappingURL=every.js.map\n","/** PURE_IMPORTS_START tslib,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n/**\n * Converts a higher-order Observable into a first-order Observable by dropping\n * inner Observables while the previous inner Observable has not yet completed.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by dropping the\n * next inner Observables while the current inner is still executing.</span>\n *\n * <img src=\"./img/exhaust.png\" width=\"100%\">\n *\n * `exhaust` subscribes to an Observable that emits Observables, also known as a\n * higher-order Observable. Each time it observes one of these emitted inner\n * Observables, the output Observable begins emitting the items emitted by that\n * inner Observable. So far, it behaves like {@link mergeAll}. However,\n * `exhaust` ignores every new inner Observable if the previous Observable has\n * not yet completed. Once that one completes, it will accept and flatten the\n * next inner Observable and repeat this process.\n *\n * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(5));\n * var result = higherOrder.exhaust();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link switch}\n * @see {@link mergeAll}\n * @see {@link exhaustMap}\n * @see {@link zipAll}\n *\n * @return {Observable} An Observable that takes a source of Observables and propagates the first observable\n * exclusively until it completes before subscribing to the next.\n * @method exhaust\n * @owner Observable\n */\nexport function exhaust() {\n    return function (source) { return source.lift(new SwitchFirstOperator()); };\n}\nvar SwitchFirstOperator = /*@__PURE__*/ (function () {\n    function SwitchFirstOperator() {\n    }\n    SwitchFirstOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new SwitchFirstSubscriber(subscriber));\n    };\n    return SwitchFirstOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SwitchFirstSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(SwitchFirstSubscriber, _super);\n    function SwitchFirstSubscriber(destination) {\n        var _this = _super.call(this, destination) || this;\n        _this.hasCompleted = false;\n        _this.hasSubscription = false;\n        return _this;\n    }\n    SwitchFirstSubscriber.prototype._next = function (value) {\n        if (!this.hasSubscription) {\n            this.hasSubscription = true;\n            this.add(subscribeToResult(this, value));\n        }\n    };\n    SwitchFirstSubscriber.prototype._complete = function () {\n        this.hasCompleted = true;\n        if (!this.hasSubscription) {\n            this.destination.complete();\n        }\n    };\n    SwitchFirstSubscriber.prototype.notifyComplete = function (innerSub) {\n        this.remove(innerSub);\n        this.hasSubscription = false;\n        if (this.hasCompleted) {\n            this.destination.complete();\n        }\n    };\n    return SwitchFirstSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=exhaust.js.map\n","/** PURE_IMPORTS_START tslib,_OuterSubscriber,_util_subscribeToResult,_map,_observable_from PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { map } from './map';\nimport { from } from '../observable/from';\n/* tslint:enable:max-line-length */\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable only if the previous projected Observable has completed.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link exhaust}.</span>\n *\n * <img src=\"./img/exhaustMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. When it projects a source value to\n * an Observable, the output Observable begins emitting the items emitted by\n * that projected Observable. However, `exhaustMap` ignores every new projected\n * Observable if the previous projected Observable has not yet completed. Once\n * that one completes, it will accept and flatten the next projected Observable\n * and repeat this process.\n *\n * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.exhaustMap((ev) => Rx.Observable.interval(1000).take(5));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaust}\n * @see {@link mergeMap}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @return {Observable} An Observable containing projected Observables\n * of each item of the source, ignoring projected Observables that start before\n * their preceding Observable has completed.\n * @method exhaustMap\n * @owner Observable\n */\nexport function exhaustMap(project, resultSelector) {\n    if (resultSelector) {\n        // DEPRECATED PATH\n        return function (source) { return source.pipe(exhaustMap(function (a, i) { return from(project(a, i)).pipe(map(function (b, ii) { return resultSelector(a, b, i, ii); })); })); };\n    }\n    return function (source) {\n        return source.lift(new ExhauseMapOperator(project));\n    };\n}\nvar ExhauseMapOperator = /*@__PURE__*/ (function () {\n    function ExhauseMapOperator(project) {\n        this.project = project;\n    }\n    ExhauseMapOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new ExhaustMapSubscriber(subscriber, this.project));\n    };\n    return ExhauseMapOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar ExhaustMapSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(ExhaustMapSubscriber, _super);\n    function ExhaustMapSubscriber(destination, project) {\n        var _this = _super.call(this, destination) || this;\n        _this.project = project;\n        _this.hasSubscription = false;\n        _this.hasCompleted = false;\n        _this.index = 0;\n        return _this;\n    }\n    ExhaustMapSubscriber.prototype._next = function (value) {\n        if (!this.hasSubscription) {\n            this.tryNext(value);\n        }\n    };\n    ExhaustMapSubscriber.prototype.tryNext = function (value) {\n        var index = this.index++;\n        var destination = this.destination;\n        try {\n            var result = this.project(value, index);\n            this.hasSubscription = true;\n            this.add(subscribeToResult(this, result, value, index));\n        }\n        catch (err) {\n            destination.error(err);\n        }\n    };\n    ExhaustMapSubscriber.prototype._complete = function () {\n        this.hasCompleted = true;\n        if (!this.hasSubscription) {\n            this.destination.complete();\n        }\n    };\n    ExhaustMapSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.destination.next(innerValue);\n    };\n    ExhaustMapSubscriber.prototype.notifyError = function (err) {\n        this.destination.error(err);\n    };\n    ExhaustMapSubscriber.prototype.notifyComplete = function (innerSub) {\n        this.remove(innerSub);\n        this.hasSubscription = false;\n        if (this.hasCompleted) {\n            this.destination.complete();\n        }\n    };\n    return ExhaustMapSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=exhaustMap.js.map\n","/** PURE_IMPORTS_START tslib,_util_tryCatch,_util_errorObject,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n/* tslint:enable:max-line-length */\n/**\n * Recursively projects each source value to an Observable which is merged in\n * the output Observable.\n *\n * <span class=\"informal\">It's similar to {@link mergeMap}, but applies the\n * projection function to every source value as well as every output value.\n * It's recursive.</span>\n *\n * <img src=\"./img/expand.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger. *Expand* will re-emit on the output\n * Observable every source value. Then, each output value is given to the\n * `project` function which returns an inner Observable to be merged on the\n * output Observable. Those output values resulting from the projection are also\n * given to the `project` function to produce new output values. This is how\n * *expand* behaves recursively.\n *\n * @example <caption>Start emitting the powers of two on every click, at most 10 of them</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var powersOfTwo = clicks\n *   .mapTo(1)\n *   .expand(x => Rx.Observable.of(2 * x).delay(1000))\n *   .take(10);\n * powersOfTwo.subscribe(x => console.log(x));\n *\n * @see {@link mergeMap}\n * @see {@link mergeScan}\n *\n * @param {function(value: T, index: number) => Observable} project A function\n * that, when applied to an item emitted by the source or the output Observable,\n * returns an Observable.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for subscribing to\n * each projected inner Observable.\n * @return {Observable} An Observable that emits the source values and also\n * result of applying the projection function to each value emitted on the\n * output Observable and and merging the results of the Observables obtained\n * from this transformation.\n * @method expand\n * @owner Observable\n */\nexport function expand(project, concurrent, scheduler) {\n    if (concurrent === void 0) {\n        concurrent = Number.POSITIVE_INFINITY;\n    }\n    if (scheduler === void 0) {\n        scheduler = undefined;\n    }\n    concurrent = (concurrent || 0) < 1 ? Number.POSITIVE_INFINITY : concurrent;\n    return function (source) { return source.lift(new ExpandOperator(project, concurrent, scheduler)); };\n}\nvar ExpandOperator = /*@__PURE__*/ (function () {\n    function ExpandOperator(project, concurrent, scheduler) {\n        this.project = project;\n        this.concurrent = concurrent;\n        this.scheduler = scheduler;\n    }\n    ExpandOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new ExpandSubscriber(subscriber, this.project, this.concurrent, this.scheduler));\n    };\n    return ExpandOperator;\n}());\nexport { ExpandOperator };\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar ExpandSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(ExpandSubscriber, _super);\n    function ExpandSubscriber(destination, project, concurrent, scheduler) {\n        var _this = _super.call(this, destination) || this;\n        _this.project = project;\n        _this.concurrent = concurrent;\n        _this.scheduler = scheduler;\n        _this.index = 0;\n        _this.active = 0;\n        _this.hasCompleted = false;\n        if (concurrent < Number.POSITIVE_INFINITY) {\n            _this.buffer = [];\n        }\n        return _this;\n    }\n    ExpandSubscriber.dispatch = function (arg) {\n        var subscriber = arg.subscriber, result = arg.result, value = arg.value, index = arg.index;\n        subscriber.subscribeToProjection(result, value, index);\n    };\n    ExpandSubscriber.prototype._next = function (value) {\n        var destination = this.destination;\n        if (destination.closed) {\n            this._complete();\n            return;\n        }\n        var index = this.index++;\n        if (this.active < this.concurrent) {\n            destination.next(value);\n            var result = tryCatch(this.project)(value, index);\n            if (result === errorObject) {\n                destination.error(errorObject.e);\n            }\n            else if (!this.scheduler) {\n                this.subscribeToProjection(result, value, index);\n            }\n            else {\n                var state = { subscriber: this, result: result, value: value, index: index };\n                this.add(this.scheduler.schedule(ExpandSubscriber.dispatch, 0, state));\n            }\n        }\n        else {\n            this.buffer.push(value);\n        }\n    };\n    ExpandSubscriber.prototype.subscribeToProjection = function (result, value, index) {\n        this.active++;\n        this.add(subscribeToResult(this, result, value, index));\n    };\n    ExpandSubscriber.prototype._complete = function () {\n        this.hasCompleted = true;\n        if (this.hasCompleted && this.active === 0) {\n            this.destination.complete();\n        }\n    };\n    ExpandSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this._next(innerValue);\n    };\n    ExpandSubscriber.prototype.notifyComplete = function (innerSub) {\n        var buffer = this.buffer;\n        this.remove(innerSub);\n        this.active--;\n        if (buffer && buffer.length > 0) {\n            this._next(buffer.shift());\n        }\n        if (this.hasCompleted && this.active === 0) {\n            this.destination.complete();\n        }\n    };\n    return ExpandSubscriber;\n}(OuterSubscriber));\nexport { ExpandSubscriber };\n//# sourceMappingURL=expand.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber,_Subscription PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\n/**\n * Returns an Observable that mirrors the source Observable, but will call a specified function when\n * the source terminates on complete or error.\n * @param {function} callback Function to be called when source terminates.\n * @return {Observable} An Observable that mirrors the source, but will call the specified function on termination.\n * @method finally\n * @owner Observable\n */\nexport function finalize(callback) {\n    return function (source) { return source.lift(new FinallyOperator(callback)); };\n}\nvar FinallyOperator = /*@__PURE__*/ (function () {\n    function FinallyOperator(callback) {\n        this.callback = callback;\n    }\n    FinallyOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new FinallySubscriber(subscriber, this.callback));\n    };\n    return FinallyOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar FinallySubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(FinallySubscriber, _super);\n    function FinallySubscriber(destination, callback) {\n        var _this = _super.call(this, destination) || this;\n        _this.add(new Subscription(callback));\n        return _this;\n    }\n    return FinallySubscriber;\n}(Subscriber));\n//# sourceMappingURL=finalize.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\n/**\n * Emits only the first value emitted by the source Observable that meets some\n * condition.\n *\n * <span class=\"informal\">Finds the first value that passes some test and emits\n * that.</span>\n *\n * <img src=\"./img/find.png\" width=\"100%\">\n *\n * `find` searches for the first item in the source Observable that matches the\n * specified condition embodied by the `predicate`, and returns the first\n * occurrence in the source. Unlike {@link first}, the `predicate` is required\n * in `find`, and does not emit an error if a valid value is not found.\n *\n * @example <caption>Find and emit the first click that happens on a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.find(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link first}\n * @see {@link findIndex}\n * @see {@link take}\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} predicate\n * A function called with each item to test for condition matching.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable<T>} An Observable of the first item that matches the\n * condition.\n * @method find\n * @owner Observable\n */\nexport function find(predicate, thisArg) {\n    if (typeof predicate !== 'function') {\n        throw new TypeError('predicate is not a function');\n    }\n    return function (source) { return source.lift(new FindValueOperator(predicate, source, false, thisArg)); };\n}\nvar FindValueOperator = /*@__PURE__*/ (function () {\n    function FindValueOperator(predicate, source, yieldIndex, thisArg) {\n        this.predicate = predicate;\n        this.source = source;\n        this.yieldIndex = yieldIndex;\n        this.thisArg = thisArg;\n    }\n    FindValueOperator.prototype.call = function (observer, source) {\n        return source.subscribe(new FindValueSubscriber(observer, this.predicate, this.source, this.yieldIndex, this.thisArg));\n    };\n    return FindValueOperator;\n}());\nexport { FindValueOperator };\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar FindValueSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(FindValueSubscriber, _super);\n    function FindValueSubscriber(destination, predicate, source, yieldIndex, thisArg) {\n        var _this = _super.call(this, destination) || this;\n        _this.predicate = predicate;\n        _this.source = source;\n        _this.yieldIndex = yieldIndex;\n        _this.thisArg = thisArg;\n        _this.index = 0;\n        return _this;\n    }\n    FindValueSubscriber.prototype.notifyComplete = function (value) {\n        var destination = this.destination;\n        destination.next(value);\n        destination.complete();\n    };\n    FindValueSubscriber.prototype._next = function (value) {\n        var _a = this, predicate = _a.predicate, thisArg = _a.thisArg;\n        var index = this.index++;\n        try {\n            var result = predicate.call(thisArg || this, value, index, this.source);\n            if (result) {\n                this.notifyComplete(this.yieldIndex ? index : value);\n            }\n        }\n        catch (err) {\n            this.destination.error(err);\n        }\n    };\n    FindValueSubscriber.prototype._complete = function () {\n        this.notifyComplete(this.yieldIndex ? -1 : undefined);\n    };\n    return FindValueSubscriber;\n}(Subscriber));\nexport { FindValueSubscriber };\n//# sourceMappingURL=find.js.map\n","/** PURE_IMPORTS_START tslib PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\n/**\n * An error thrown when an action is invalid because the object has been\n * unsubscribed.\n *\n * @see {@link Subject}\n * @see {@link BehaviorSubject}\n *\n * @class ObjectUnsubscribedError\n */\nvar ObjectUnsubscribedError = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(ObjectUnsubscribedError, _super);\n    function ObjectUnsubscribedError() {\n        var _this = _super.call(this, 'object unsubscribed') || this;\n        _this.name = 'ObjectUnsubscribedError';\n        Object.setPrototypeOf(_this, ObjectUnsubscribedError.prototype);\n        return _this;\n    }\n    return ObjectUnsubscribedError;\n}(Error));\nexport { ObjectUnsubscribedError };\n//# sourceMappingURL=ObjectUnsubscribedError.js.map\n","/** PURE_IMPORTS_START tslib,_Subscription PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscription } from './Subscription';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SubjectSubscription = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(SubjectSubscription, _super);\n    function SubjectSubscription(subject, subscriber) {\n        var _this = _super.call(this) || this;\n        _this.subject = subject;\n        _this.subscriber = subscriber;\n        _this.closed = false;\n        return _this;\n    }\n    SubjectSubscription.prototype.unsubscribe = function () {\n        if (this.closed) {\n            return;\n        }\n        this.closed = true;\n        var subject = this.subject;\n        var observers = subject.observers;\n        this.subject = null;\n        if (!observers || observers.length === 0 || subject.isStopped || subject.closed) {\n            return;\n        }\n        var subscriberIndex = observers.indexOf(this.subscriber);\n        if (subscriberIndex !== -1) {\n            observers.splice(subscriberIndex, 1);\n        }\n    };\n    return SubjectSubscription;\n}(Subscription));\nexport { SubjectSubscription };\n//# sourceMappingURL=SubjectSubscription.js.map\n","/** PURE_IMPORTS_START tslib,_Observable,_Subscriber,_Subscription,_util_ObjectUnsubscribedError,_SubjectSubscription,_internal_symbol_rxSubscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Observable } from './Observable';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nimport { SubjectSubscription } from './SubjectSubscription';\nimport { rxSubscriber as rxSubscriberSymbol } from '../internal/symbol/rxSubscriber';\n/**\n * @class SubjectSubscriber<T>\n */\nvar SubjectSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(SubjectSubscriber, _super);\n    function SubjectSubscriber(destination) {\n        var _this = _super.call(this, destination) || this;\n        _this.destination = destination;\n        return _this;\n    }\n    return SubjectSubscriber;\n}(Subscriber));\nexport { SubjectSubscriber };\n/**\n * @class Subject<T>\n */\nvar Subject = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(Subject, _super);\n    function Subject() {\n        var _this = _super.call(this) || this;\n        _this.observers = [];\n        _this.closed = false;\n        _this.isStopped = false;\n        _this.hasError = false;\n        _this.thrownError = null;\n        return _this;\n    }\n    Subject.prototype[rxSubscriberSymbol] = function () {\n        return new SubjectSubscriber(this);\n    };\n    Subject.prototype.lift = function (operator) {\n        var subject = new AnonymousSubject(this, this);\n        subject.operator = operator;\n        return subject;\n    };\n    Subject.prototype.next = function (value) {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError();\n        }\n        if (!this.isStopped) {\n            var observers = this.observers;\n            var len = observers.length;\n            var copy = observers.slice();\n            for (var i = 0; i < len; i++) {\n                copy[i].next(value);\n            }\n        }\n    };\n    Subject.prototype.error = function (err) {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError();\n        }\n        this.hasError = true;\n        this.thrownError = err;\n        this.isStopped = true;\n        var observers = this.observers;\n        var len = observers.length;\n        var copy = observers.slice();\n        for (var i = 0; i < len; i++) {\n            copy[i].error(err);\n        }\n        this.observers.length = 0;\n    };\n    Subject.prototype.complete = function () {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError();\n        }\n        this.isStopped = true;\n        var observers = this.observers;\n        var len = observers.length;\n        var copy = observers.slice();\n        for (var i = 0; i < len; i++) {\n            copy[i].complete();\n        }\n        this.observers.length = 0;\n    };\n    Subject.prototype.unsubscribe = function () {\n        this.isStopped = true;\n        this.closed = true;\n        this.observers = null;\n    };\n    /** @deprecated This is an internal implementation detail, do not use. */\n    Subject.prototype._trySubscribe = function (subscriber) {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError();\n        }\n        else {\n            return _super.prototype._trySubscribe.call(this, subscriber);\n        }\n    };\n    /** @deprecated This is an internal implementation detail, do not use. */\n    Subject.prototype._subscribe = function (subscriber) {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError();\n        }\n        else if (this.hasError) {\n            subscriber.error(this.thrownError);\n            return Subscription.EMPTY;\n        }\n        else if (this.isStopped) {\n            subscriber.complete();\n            return Subscription.EMPTY;\n        }\n        else {\n            this.observers.push(subscriber);\n            return new SubjectSubscription(this, subscriber);\n        }\n    };\n    Subject.prototype.asObservable = function () {\n        var observable = new Observable();\n        observable.source = this;\n        return observable;\n    };\n    /**@nocollapse */\n    Subject.create = function (destination, source) {\n        return new AnonymousSubject(destination, source);\n    };\n    return Subject;\n}(Observable));\nexport { Subject };\n/**\n * @class AnonymousSubject<T>\n */\nvar AnonymousSubject = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(AnonymousSubject, _super);\n    function AnonymousSubject(destination, source) {\n        var _this = _super.call(this) || this;\n        _this.destination = destination;\n        _this.source = source;\n        return _this;\n    }\n    AnonymousSubject.prototype.next = function (value) {\n        var destination = this.destination;\n        if (destination && destination.next) {\n            destination.next(value);\n        }\n    };\n    AnonymousSubject.prototype.error = function (err) {\n        var destination = this.destination;\n        if (destination && destination.error) {\n            this.destination.error(err);\n        }\n    };\n    AnonymousSubject.prototype.complete = function () {\n        var destination = this.destination;\n        if (destination && destination.complete) {\n            this.destination.complete();\n        }\n    };\n    /** @deprecated This is an internal implementation detail, do not use. */\n    AnonymousSubject.prototype._subscribe = function (subscriber) {\n        var source = this.source;\n        if (source) {\n            return this.source.subscribe(subscriber);\n        }\n        else {\n            return Subscription.EMPTY;\n        }\n    };\n    return AnonymousSubject;\n}(Subject));\nexport { AnonymousSubject };\n//# sourceMappingURL=Subject.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber,_Subscription,_Observable,_Subject PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\n/* tslint:enable:max-line-length */\n/**\n * Groups the items emitted by an Observable according to a specified criterion,\n * and emits these grouped items as `GroupedObservables`, one\n * {@link GroupedObservable} per group.\n *\n * <img src=\"./img/groupBy.png\" width=\"100%\">\n *\n * @example <caption>Group objects by id and return as array</caption>\n * Observable.of<Obj>({id: 1, name: 'aze1'},\n *                    {id: 2, name: 'sf2'},\n *                    {id: 2, name: 'dg2'},\n *                    {id: 1, name: 'erg1'},\n *                    {id: 1, name: 'df1'},\n *                    {id: 2, name: 'sfqfb2'},\n *                    {id: 3, name: 'qfs3'},\n *                    {id: 2, name: 'qsgqsfg2'}\n *     )\n *     .groupBy(p => p.id)\n *     .flatMap( (group$) => group$.reduce((acc, cur) => [...acc, cur], []))\n *     .subscribe(p => console.log(p));\n *\n * // displays:\n * // [ { id: 1, name: 'aze1' },\n * //   { id: 1, name: 'erg1' },\n * //   { id: 1, name: 'df1' } ]\n * //\n * // [ { id: 2, name: 'sf2' },\n * //   { id: 2, name: 'dg2' },\n * //   { id: 2, name: 'sfqfb2' },\n * //   { id: 2, name: 'qsgqsfg2' } ]\n * //\n * // [ { id: 3, name: 'qfs3' } ]\n *\n * @example <caption>Pivot data on the id field</caption>\n * Observable.of<Obj>({id: 1, name: 'aze1'},\n *                    {id: 2, name: 'sf2'},\n *                    {id: 2, name: 'dg2'},\n *                    {id: 1, name: 'erg1'},\n *                    {id: 1, name: 'df1'},\n *                    {id: 2, name: 'sfqfb2'},\n *                    {id: 3, name: 'qfs1'},\n *                    {id: 2, name: 'qsgqsfg2'}\n *                   )\n *     .groupBy(p => p.id, p => p.name)\n *     .flatMap( (group$) => group$.reduce((acc, cur) => [...acc, cur], [\"\" + group$.key]))\n *     .map(arr => ({'id': parseInt(arr[0]), 'values': arr.slice(1)}))\n *     .subscribe(p => console.log(p));\n *\n * // displays:\n * // { id: 1, values: [ 'aze1', 'erg1', 'df1' ] }\n * // { id: 2, values: [ 'sf2', 'dg2', 'sfqfb2', 'qsgqsfg2' ] }\n * // { id: 3, values: [ 'qfs1' ] }\n *\n * @param {function(value: T): K} keySelector A function that extracts the key\n * for each item.\n * @param {function(value: T): R} [elementSelector] A function that extracts the\n * return element for each item.\n * @param {function(grouped: GroupedObservable<K,R>): Observable<any>} [durationSelector]\n * A function that returns an Observable to determine how long each group should\n * exist.\n * @return {Observable<GroupedObservable<K,R>>} An Observable that emits\n * GroupedObservables, each of which corresponds to a unique key value and each\n * of which emits those items from the source Observable that share that key\n * value.\n * @method groupBy\n * @owner Observable\n */\nexport function groupBy(keySelector, elementSelector, durationSelector, subjectSelector) {\n    return function (source) {\n        return source.lift(new GroupByOperator(keySelector, elementSelector, durationSelector, subjectSelector));\n    };\n}\nvar GroupByOperator = /*@__PURE__*/ (function () {\n    function GroupByOperator(keySelector, elementSelector, durationSelector, subjectSelector) {\n        this.keySelector = keySelector;\n        this.elementSelector = elementSelector;\n        this.durationSelector = durationSelector;\n        this.subjectSelector = subjectSelector;\n    }\n    GroupByOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new GroupBySubscriber(subscriber, this.keySelector, this.elementSelector, this.durationSelector, this.subjectSelector));\n    };\n    return GroupByOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar GroupBySubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(GroupBySubscriber, _super);\n    function GroupBySubscriber(destination, keySelector, elementSelector, durationSelector, subjectSelector) {\n        var _this = _super.call(this, destination) || this;\n        _this.keySelector = keySelector;\n        _this.elementSelector = elementSelector;\n        _this.durationSelector = durationSelector;\n        _this.subjectSelector = subjectSelector;\n        _this.groups = null;\n        _this.attemptedToUnsubscribe = false;\n        _this.count = 0;\n        return _this;\n    }\n    GroupBySubscriber.prototype._next = function (value) {\n        var key;\n        try {\n            key = this.keySelector(value);\n        }\n        catch (err) {\n            this.error(err);\n            return;\n        }\n        this._group(value, key);\n    };\n    GroupBySubscriber.prototype._group = function (value, key) {\n        var groups = this.groups;\n        if (!groups) {\n            groups = this.groups = new Map();\n        }\n        var group = groups.get(key);\n        var element;\n        if (this.elementSelector) {\n            try {\n                element = this.elementSelector(value);\n            }\n            catch (err) {\n                this.error(err);\n            }\n        }\n        else {\n            element = value;\n        }\n        if (!group) {\n            group = (this.subjectSelector ? this.subjectSelector() : new Subject());\n            groups.set(key, group);\n            var groupedObservable = new GroupedObservable(key, group, this);\n            this.destination.next(groupedObservable);\n            if (this.durationSelector) {\n                var duration = void 0;\n                try {\n                    duration = this.durationSelector(new GroupedObservable(key, group));\n                }\n                catch (err) {\n                    this.error(err);\n                    return;\n                }\n                this.add(duration.subscribe(new GroupDurationSubscriber(key, group, this)));\n            }\n        }\n        if (!group.closed) {\n            group.next(element);\n        }\n    };\n    GroupBySubscriber.prototype._error = function (err) {\n        var groups = this.groups;\n        if (groups) {\n            groups.forEach(function (group, key) {\n                group.error(err);\n            });\n            groups.clear();\n        }\n        this.destination.error(err);\n    };\n    GroupBySubscriber.prototype._complete = function () {\n        var groups = this.groups;\n        if (groups) {\n            groups.forEach(function (group, key) {\n                group.complete();\n            });\n            groups.clear();\n        }\n        this.destination.complete();\n    };\n    GroupBySubscriber.prototype.removeGroup = function (key) {\n        this.groups.delete(key);\n    };\n    GroupBySubscriber.prototype.unsubscribe = function () {\n        if (!this.closed) {\n            this.attemptedToUnsubscribe = true;\n            if (this.count === 0) {\n                _super.prototype.unsubscribe.call(this);\n            }\n        }\n    };\n    return GroupBySubscriber;\n}(Subscriber));\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar GroupDurationSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(GroupDurationSubscriber, _super);\n    function GroupDurationSubscriber(key, group, parent) {\n        var _this = _super.call(this, group) || this;\n        _this.key = key;\n        _this.group = group;\n        _this.parent = parent;\n        return _this;\n    }\n    GroupDurationSubscriber.prototype._next = function (value) {\n        this.complete();\n    };\n    /** @deprecated This is an internal implementation detail, do not use. */\n    GroupDurationSubscriber.prototype._unsubscribe = function () {\n        var _a = this, parent = _a.parent, key = _a.key;\n        this.key = this.parent = null;\n        if (parent) {\n            parent.removeGroup(key);\n        }\n    };\n    return GroupDurationSubscriber;\n}(Subscriber));\n/**\n * An Observable representing values belonging to the same group represented by\n * a common key. The values emitted by a GroupedObservable come from the source\n * Observable. The common key is available as the field `key` on a\n * GroupedObservable instance.\n *\n * @class GroupedObservable<K, T>\n */\nvar GroupedObservable = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(GroupedObservable, _super);\n    /** @deprecated Do not construct this type. Internal use only */\n    function GroupedObservable(key, groupSubject, refCountSubscription) {\n        var _this = _super.call(this) || this;\n        _this.key = key;\n        _this.groupSubject = groupSubject;\n        _this.refCountSubscription = refCountSubscription;\n        return _this;\n    }\n    /** @deprecated This is an internal implementation detail, do not use. */\n    GroupedObservable.prototype._subscribe = function (subscriber) {\n        var subscription = new Subscription();\n        var _a = this, refCountSubscription = _a.refCountSubscription, groupSubject = _a.groupSubject;\n        if (refCountSubscription && !refCountSubscription.closed) {\n            subscription.add(new InnerRefCountSubscription(refCountSubscription));\n        }\n        subscription.add(groupSubject.subscribe(subscriber));\n        return subscription;\n    };\n    return GroupedObservable;\n}(Observable));\nexport { GroupedObservable };\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar InnerRefCountSubscription = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(InnerRefCountSubscription, _super);\n    function InnerRefCountSubscription(parent) {\n        var _this = _super.call(this) || this;\n        _this.parent = parent;\n        parent.count++;\n        return _this;\n    }\n    InnerRefCountSubscription.prototype.unsubscribe = function () {\n        var parent = this.parent;\n        if (!parent.closed && !this.closed) {\n            _super.prototype.unsubscribe.call(this);\n            parent.count -= 1;\n            if (parent.count === 0 && parent.attemptedToUnsubscribe) {\n                parent.unsubscribe();\n            }\n        }\n    };\n    return InnerRefCountSubscription;\n}(Subscription));\n//# sourceMappingURL=groupBy.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\n/**\n * Ignores all items emitted by the source Observable and only passes calls of `complete` or `error`.\n *\n * <img src=\"./img/ignoreElements.png\" width=\"100%\">\n *\n * @return {Observable} An empty Observable that only calls `complete`\n * or `error`, based on which one is called by the source Observable.\n * @method ignoreElements\n * @owner Observable\n */\nexport function ignoreElements() {\n    return function ignoreElementsOperatorFunction(source) {\n        return source.lift(new IgnoreElementsOperator());\n    };\n}\nvar IgnoreElementsOperator = /*@__PURE__*/ (function () {\n    function IgnoreElementsOperator() {\n    }\n    IgnoreElementsOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new IgnoreElementsSubscriber(subscriber));\n    };\n    return IgnoreElementsOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar IgnoreElementsSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(IgnoreElementsSubscriber, _super);\n    function IgnoreElementsSubscriber() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    IgnoreElementsSubscriber.prototype._next = function (unused) {\n        // Do nothing\n    };\n    return IgnoreElementsSubscriber;\n}(Subscriber));\n//# sourceMappingURL=ignoreElements.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nexport function isEmpty() {\n    return function (source) { return source.lift(new IsEmptyOperator()); };\n}\nvar IsEmptyOperator = /*@__PURE__*/ (function () {\n    function IsEmptyOperator() {\n    }\n    IsEmptyOperator.prototype.call = function (observer, source) {\n        return source.subscribe(new IsEmptySubscriber(observer));\n    };\n    return IsEmptyOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar IsEmptySubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(IsEmptySubscriber, _super);\n    function IsEmptySubscriber(destination) {\n        return _super.call(this, destination) || this;\n    }\n    IsEmptySubscriber.prototype.notifyComplete = function (isEmpty) {\n        var destination = this.destination;\n        destination.next(isEmpty);\n        destination.complete();\n    };\n    IsEmptySubscriber.prototype._next = function (value) {\n        this.notifyComplete(false);\n    };\n    IsEmptySubscriber.prototype._complete = function () {\n        this.notifyComplete(true);\n    };\n    return IsEmptySubscriber;\n}(Subscriber));\n//# sourceMappingURL=isEmpty.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber,_util_ArgumentOutOfRangeError,_observable_empty PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { empty } from '../observable/empty';\n/**\n * Emits only the last `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Remembers the latest `count` values, then emits those\n * only when the source completes.</span>\n *\n * <img src=\"./img/takeLast.png\" width=\"100%\">\n *\n * `takeLast` returns an Observable that emits at most the last `count` values\n * emitted by the source Observable. If the source emits fewer than `count`\n * values then all of its values are emitted. This operator must wait until the\n * `complete` notification emission from the source in order to emit the `next`\n * values on the output Observable, because otherwise it is impossible to know\n * whether or not more values will be emitted on the source. For this reason,\n * all values are emitted synchronously, followed by the complete notification.\n *\n * @example <caption>Take the last 3 values of an Observable with many values</caption>\n * var many = Rx.Observable.range(1, 100);\n * var lastThree = many.pipe(takeLast(3));\n * lastThree.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `takeLast(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of values to emit from the end of\n * the sequence of values emitted by the source Observable.\n * @return {Observable<T>} An Observable that emits at most the last count\n * values emitted by the source Observable.\n * @method takeLast\n * @owner Observable\n */\nexport function takeLast(count) {\n    return function takeLastOperatorFunction(source) {\n        if (count === 0) {\n            return empty();\n        }\n        else {\n            return source.lift(new TakeLastOperator(count));\n        }\n    };\n}\nvar TakeLastOperator = /*@__PURE__*/ (function () {\n    function TakeLastOperator(total) {\n        this.total = total;\n        if (this.total < 0) {\n            throw new ArgumentOutOfRangeError;\n        }\n    }\n    TakeLastOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new TakeLastSubscriber(subscriber, this.total));\n    };\n    return TakeLastOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar TakeLastSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(TakeLastSubscriber, _super);\n    function TakeLastSubscriber(destination, total) {\n        var _this = _super.call(this, destination) || this;\n        _this.total = total;\n        _this.ring = new Array();\n        _this.count = 0;\n        return _this;\n    }\n    TakeLastSubscriber.prototype._next = function (value) {\n        var ring = this.ring;\n        var total = this.total;\n        var count = this.count++;\n        if (ring.length < total) {\n            ring.push(value);\n        }\n        else {\n            var index = count % total;\n            ring[index] = value;\n        }\n    };\n    TakeLastSubscriber.prototype._complete = function () {\n        var destination = this.destination;\n        var count = this.count;\n        if (count > 0) {\n            var total = this.count >= this.total ? this.total : this.count;\n            var ring = this.ring;\n            for (var i = 0; i < total; i++) {\n                var idx = (count++) % total;\n                destination.next(ring[idx]);\n            }\n        }\n        destination.complete();\n    };\n    return TakeLastSubscriber;\n}(Subscriber));\n//# sourceMappingURL=takeLast.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\n/**\n * Emits the given constant value on the output Observable every time the source\n * Observable emits a value.\n *\n * <span class=\"informal\">Like {@link map}, but it maps every source value to\n * the same output value every time.</span>\n *\n * <img src=\"./img/mapTo.png\" width=\"100%\">\n *\n * Takes a constant `value` as argument, and emits that whenever the source\n * Observable emits a value. In other words, ignores the actual source value,\n * and simply uses the emission moment to know when to emit the given `value`.\n *\n * @example <caption>Map every click to the string 'Hi'</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var greetings = clicks.mapTo('Hi');\n * greetings.subscribe(x => console.log(x));\n *\n * @see {@link map}\n *\n * @param {any} value The value to map each source value to.\n * @return {Observable} An Observable that emits the given `value` every time\n * the source Observable emits something.\n * @method mapTo\n * @owner Observable\n */\nexport function mapTo(value) {\n    return function (source) { return source.lift(new MapToOperator(value)); };\n}\nvar MapToOperator = /*@__PURE__*/ (function () {\n    function MapToOperator(value) {\n        this.value = value;\n    }\n    MapToOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new MapToSubscriber(subscriber, this.value));\n    };\n    return MapToOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar MapToSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(MapToSubscriber, _super);\n    function MapToSubscriber(destination, value) {\n        var _this = _super.call(this, destination) || this;\n        _this.value = value;\n        return _this;\n    }\n    MapToSubscriber.prototype._next = function (x) {\n        this.destination.next(this.value);\n    };\n    return MapToSubscriber;\n}(Subscriber));\n//# sourceMappingURL=mapTo.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber,_Notification PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\n/**\n * Represents all of the notifications from the source Observable as `next`\n * emissions marked with their original types within {@link Notification}\n * objects.\n *\n * <span class=\"informal\">Wraps `next`, `error` and `complete` emissions in\n * {@link Notification} objects, emitted as `next` on the output Observable.\n * </span>\n *\n * <img src=\"./img/materialize.png\" width=\"100%\">\n *\n * `materialize` returns an Observable that emits a `next` notification for each\n * `next`, `error`, or `complete` emission of the source Observable. When the\n * source Observable emits `complete`, the output Observable will emit `next` as\n * a Notification of type \"complete\", and then it will emit `complete` as well.\n * When the source Observable emits `error`, the output will emit `next` as a\n * Notification of type \"error\", and then `complete`.\n *\n * This operator is useful for producing metadata of the source Observable, to\n * be consumed as `next` emissions. Use it in conjunction with\n * {@link dematerialize}.\n *\n * @example <caption>Convert a faulty Observable to an Observable of Notifications</caption>\n * var letters = Rx.Observable.of('a', 'b', 13, 'd');\n * var upperCase = letters.map(x => x.toUpperCase());\n * var materialized = upperCase.materialize();\n * materialized.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // - Notification {kind: \"N\", value: \"A\", error: undefined, hasValue: true}\n * // - Notification {kind: \"N\", value: \"B\", error: undefined, hasValue: true}\n * // - Notification {kind: \"E\", value: undefined, error: TypeError:\n * //   x.toUpperCase is not a function at MapSubscriber.letters.map.x\n * //   [as project] (http://1…, hasValue: false}\n *\n * @see {@link Notification}\n * @see {@link dematerialize}\n *\n * @return {Observable<Notification<T>>} An Observable that emits\n * {@link Notification} objects that wrap the original emissions from the source\n * Observable with metadata.\n * @method materialize\n * @owner Observable\n */\nexport function materialize() {\n    return function materializeOperatorFunction(source) {\n        return source.lift(new MaterializeOperator());\n    };\n}\nvar MaterializeOperator = /*@__PURE__*/ (function () {\n    function MaterializeOperator() {\n    }\n    MaterializeOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new MaterializeSubscriber(subscriber));\n    };\n    return MaterializeOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar MaterializeSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(MaterializeSubscriber, _super);\n    function MaterializeSubscriber(destination) {\n        return _super.call(this, destination) || this;\n    }\n    MaterializeSubscriber.prototype._next = function (value) {\n        this.destination.next(Notification.createNext(value));\n    };\n    MaterializeSubscriber.prototype._error = function (err) {\n        var destination = this.destination;\n        destination.next(Notification.createError(err));\n        destination.complete();\n    };\n    MaterializeSubscriber.prototype._complete = function () {\n        var destination = this.destination;\n        destination.next(Notification.createComplete());\n        destination.complete();\n    };\n    return MaterializeSubscriber;\n}(Subscriber));\n//# sourceMappingURL=materialize.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\n/* tslint:enable:max-line-length */\n/**\n * Applies an accumulator function over the source Observable, and returns each\n * intermediate result, with an optional seed value.\n *\n * <span class=\"informal\">It's like {@link reduce}, but emits the current\n * accumulation whenever the source emits a value.</span>\n *\n * <img src=\"./img/scan.png\" width=\"100%\">\n *\n * Combines together all values emitted on the source, using an accumulator\n * function that knows how to join a new source value into the accumulation from\n * the past. Is similar to {@link reduce}, but emits the intermediate\n * accumulations.\n *\n * Returns an Observable that applies a specified `accumulator` function to each\n * item emitted by the source Observable. If a `seed` value is specified, then\n * that value will be used as the initial value for the accumulator. If no seed\n * value is specified, the first item of the source is used as the seed.\n *\n * @example <caption>Count the number of click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var ones = clicks.mapTo(1);\n * var seed = 0;\n * var count = ones.scan((acc, one) => acc + one, seed);\n * count.subscribe(x => console.log(x));\n *\n * @see {@link expand}\n * @see {@link mergeScan}\n * @see {@link reduce}\n *\n * @param {function(acc: R, value: T, index: number): R} accumulator\n * The accumulator function called on each source value.\n * @param {T|R} [seed] The initial accumulation value.\n * @return {Observable<R>} An observable of the accumulated values.\n * @method scan\n * @owner Observable\n */\nexport function scan(accumulator, seed) {\n    var hasSeed = false;\n    // providing a seed of `undefined` *should* be valid and trigger\n    // hasSeed! so don't use `seed !== undefined` checks!\n    // For this reason, we have to check it here at the original call site\n    // otherwise inside Operator/Subscriber we won't know if `undefined`\n    // means they didn't provide anything or if they literally provided `undefined`\n    if (arguments.length >= 2) {\n        hasSeed = true;\n    }\n    return function scanOperatorFunction(source) {\n        return source.lift(new ScanOperator(accumulator, seed, hasSeed));\n    };\n}\nvar ScanOperator = /*@__PURE__*/ (function () {\n    function ScanOperator(accumulator, seed, hasSeed) {\n        if (hasSeed === void 0) {\n            hasSeed = false;\n        }\n        this.accumulator = accumulator;\n        this.seed = seed;\n        this.hasSeed = hasSeed;\n    }\n    ScanOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new ScanSubscriber(subscriber, this.accumulator, this.seed, this.hasSeed));\n    };\n    return ScanOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar ScanSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(ScanSubscriber, _super);\n    function ScanSubscriber(destination, accumulator, _seed, hasSeed) {\n        var _this = _super.call(this, destination) || this;\n        _this.accumulator = accumulator;\n        _this._seed = _seed;\n        _this.hasSeed = hasSeed;\n        _this.index = 0;\n        return _this;\n    }\n    Object.defineProperty(ScanSubscriber.prototype, \"seed\", {\n        get: function () {\n            return this._seed;\n        },\n        set: function (value) {\n            this.hasSeed = true;\n            this._seed = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ScanSubscriber.prototype._next = function (value) {\n        if (!this.hasSeed) {\n            this.seed = value;\n            this.destination.next(value);\n        }\n        else {\n            return this._tryNext(value);\n        }\n    };\n    ScanSubscriber.prototype._tryNext = function (value) {\n        var index = this.index++;\n        var result;\n        try {\n            result = this.accumulator(this.seed, value, index);\n        }\n        catch (err) {\n            this.destination.error(err);\n        }\n        this.seed = result;\n        this.destination.next(result);\n    };\n    return ScanSubscriber;\n}(Subscriber));\n//# sourceMappingURL=scan.js.map\n","/** PURE_IMPORTS_START tslib,_util_tryCatch,_util_errorObject,_util_subscribeToResult,_OuterSubscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\n/**\n * Applies an accumulator function over the source Observable where the\n * accumulator function itself returns an Observable, then each intermediate\n * Observable returned is merged into the output Observable.\n *\n * <span class=\"informal\">It's like {@link scan}, but the Observables returned\n * by the accumulator are merged into the outer Observable.</span>\n *\n * @example <caption>Count the number of click events</caption>\n * const click$ = Rx.Observable.fromEvent(document, 'click');\n * const one$ = click$.mapTo(1);\n * const seed = 0;\n * const count$ = one$.mergeScan((acc, one) => Rx.Observable.of(acc + one), seed);\n * count$.subscribe(x => console.log(x));\n *\n * // Results:\n * 1\n * 2\n * 3\n * 4\n * // ...and so on for each click\n *\n * @param {function(acc: R, value: T): Observable<R>} accumulator\n * The accumulator function called on each source value.\n * @param seed The initial accumulation value.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of\n * input Observables being subscribed to concurrently.\n * @return {Observable<R>} An observable of the accumulated values.\n * @method mergeScan\n * @owner Observable\n */\nexport function mergeScan(accumulator, seed, concurrent) {\n    if (concurrent === void 0) {\n        concurrent = Number.POSITIVE_INFINITY;\n    }\n    return function (source) { return source.lift(new MergeScanOperator(accumulator, seed, concurrent)); };\n}\nvar MergeScanOperator = /*@__PURE__*/ (function () {\n    function MergeScanOperator(accumulator, seed, concurrent) {\n        this.accumulator = accumulator;\n        this.seed = seed;\n        this.concurrent = concurrent;\n    }\n    MergeScanOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new MergeScanSubscriber(subscriber, this.accumulator, this.seed, this.concurrent));\n    };\n    return MergeScanOperator;\n}());\nexport { MergeScanOperator };\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar MergeScanSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(MergeScanSubscriber, _super);\n    function MergeScanSubscriber(destination, accumulator, acc, concurrent) {\n        var _this = _super.call(this, destination) || this;\n        _this.accumulator = accumulator;\n        _this.acc = acc;\n        _this.concurrent = concurrent;\n        _this.hasValue = false;\n        _this.hasCompleted = false;\n        _this.buffer = [];\n        _this.active = 0;\n        _this.index = 0;\n        return _this;\n    }\n    MergeScanSubscriber.prototype._next = function (value) {\n        if (this.active < this.concurrent) {\n            var index = this.index++;\n            var ish = tryCatch(this.accumulator)(this.acc, value);\n            var destination = this.destination;\n            if (ish === errorObject) {\n                destination.error(errorObject.e);\n            }\n            else {\n                this.active++;\n                this._innerSub(ish, value, index);\n            }\n        }\n        else {\n            this.buffer.push(value);\n        }\n    };\n    MergeScanSubscriber.prototype._innerSub = function (ish, value, index) {\n        this.add(subscribeToResult(this, ish, value, index));\n    };\n    MergeScanSubscriber.prototype._complete = function () {\n        this.hasCompleted = true;\n        if (this.active === 0 && this.buffer.length === 0) {\n            if (this.hasValue === false) {\n                this.destination.next(this.acc);\n            }\n            this.destination.complete();\n        }\n    };\n    MergeScanSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        var destination = this.destination;\n        this.acc = innerValue;\n        this.hasValue = true;\n        destination.next(innerValue);\n    };\n    MergeScanSubscriber.prototype.notifyComplete = function (innerSub) {\n        var buffer = this.buffer;\n        this.remove(innerSub);\n        this.active--;\n        if (buffer.length > 0) {\n            this._next(buffer.shift());\n        }\n        else if (this.active === 0 && this.hasCompleted) {\n            if (this.hasValue === false) {\n                this.destination.next(this.acc);\n            }\n            this.destination.complete();\n        }\n    };\n    return MergeScanSubscriber;\n}(OuterSubscriber));\nexport { MergeScanSubscriber };\n//# sourceMappingURL=mergeScan.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nexport function refCount() {\n    return function refCountOperatorFunction(source) {\n        return source.lift(new RefCountOperator(source));\n    };\n}\nvar RefCountOperator = /*@__PURE__*/ (function () {\n    function RefCountOperator(connectable) {\n        this.connectable = connectable;\n    }\n    RefCountOperator.prototype.call = function (subscriber, source) {\n        var connectable = this.connectable;\n        connectable._refCount++;\n        var refCounter = new RefCountSubscriber(subscriber, connectable);\n        var subscription = source.subscribe(refCounter);\n        if (!refCounter.closed) {\n            refCounter.connection = connectable.connect();\n        }\n        return subscription;\n    };\n    return RefCountOperator;\n}());\nvar RefCountSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(RefCountSubscriber, _super);\n    function RefCountSubscriber(destination, connectable) {\n        var _this = _super.call(this, destination) || this;\n        _this.connectable = connectable;\n        return _this;\n    }\n    RefCountSubscriber.prototype._unsubscribe = function () {\n        var connectable = this.connectable;\n        if (!connectable) {\n            this.connection = null;\n            return;\n        }\n        this.connectable = null;\n        var refCount = connectable._refCount;\n        if (refCount <= 0) {\n            this.connection = null;\n            return;\n        }\n        connectable._refCount = refCount - 1;\n        if (refCount > 1) {\n            this.connection = null;\n            return;\n        }\n        ///\n        // Compare the local RefCountSubscriber's connection Subscription to the\n        // connection Subscription on the shared ConnectableObservable. In cases\n        // where the ConnectableObservable source synchronously emits values, and\n        // the RefCountSubscriber's downstream Observers synchronously unsubscribe,\n        // execution continues to here before the RefCountOperator has a chance to\n        // supply the RefCountSubscriber with the shared connection Subscription.\n        // For example:\n        // ```\n        // Observable.range(0, 10)\n        //   .publish()\n        //   .refCount()\n        //   .take(5)\n        //   .subscribe();\n        // ```\n        // In order to account for this case, RefCountSubscriber should only dispose\n        // the ConnectableObservable's shared connection Subscription if the\n        // connection Subscription exists, *and* either:\n        //   a. RefCountSubscriber doesn't have a reference to the shared connection\n        //      Subscription yet, or,\n        //   b. RefCountSubscriber's connection Subscription reference is identical\n        //      to the shared connection Subscription\n        ///\n        var connection = this.connection;\n        var sharedConnection = connectable._connection;\n        this.connection = null;\n        if (sharedConnection && (!connection || sharedConnection === connection)) {\n            sharedConnection.unsubscribe();\n        }\n    };\n    return RefCountSubscriber;\n}(Subscriber));\n//# sourceMappingURL=refCount.js.map\n","/** PURE_IMPORTS_START tslib,_Subject,_Observable,_Subscriber,_Subscription,_operators_refCount PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { SubjectSubscriber } from '../Subject';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { refCount as higherOrderRefCount } from '../operators/refCount';\n/**\n * @class ConnectableObservable<T>\n */\nvar ConnectableObservable = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(ConnectableObservable, _super);\n    function ConnectableObservable(source, subjectFactory) {\n        var _this = _super.call(this) || this;\n        _this.source = source;\n        _this.subjectFactory = subjectFactory;\n        _this._refCount = 0;\n        /** @internal */\n        _this._isComplete = false;\n        return _this;\n    }\n    /** @deprecated This is an internal implementation detail, do not use. */\n    ConnectableObservable.prototype._subscribe = function (subscriber) {\n        return this.getSubject().subscribe(subscriber);\n    };\n    ConnectableObservable.prototype.getSubject = function () {\n        var subject = this._subject;\n        if (!subject || subject.isStopped) {\n            this._subject = this.subjectFactory();\n        }\n        return this._subject;\n    };\n    ConnectableObservable.prototype.connect = function () {\n        var connection = this._connection;\n        if (!connection) {\n            this._isComplete = false;\n            connection = this._connection = new Subscription();\n            connection.add(this.source\n                .subscribe(new ConnectableSubscriber(this.getSubject(), this)));\n            if (connection.closed) {\n                this._connection = null;\n                connection = Subscription.EMPTY;\n            }\n            else {\n                this._connection = connection;\n            }\n        }\n        return connection;\n    };\n    ConnectableObservable.prototype.refCount = function () {\n        return higherOrderRefCount()(this);\n    };\n    return ConnectableObservable;\n}(Observable));\nexport { ConnectableObservable };\nvar connectableProto = ConnectableObservable.prototype;\nexport var connectableObservableDescriptor = {\n    operator: { value: null },\n    _refCount: { value: 0, writable: true },\n    _subject: { value: null, writable: true },\n    _connection: { value: null, writable: true },\n    _subscribe: { value: connectableProto._subscribe },\n    _isComplete: { value: connectableProto._isComplete, writable: true },\n    getSubject: { value: connectableProto.getSubject },\n    connect: { value: connectableProto.connect },\n    refCount: { value: connectableProto.refCount }\n};\nvar ConnectableSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(ConnectableSubscriber, _super);\n    function ConnectableSubscriber(destination, connectable) {\n        var _this = _super.call(this, destination) || this;\n        _this.connectable = connectable;\n        return _this;\n    }\n    ConnectableSubscriber.prototype._error = function (err) {\n        this._unsubscribe();\n        _super.prototype._error.call(this, err);\n    };\n    ConnectableSubscriber.prototype._complete = function () {\n        this.connectable._isComplete = true;\n        this._unsubscribe();\n        _super.prototype._complete.call(this);\n    };\n    ConnectableSubscriber.prototype._unsubscribe = function () {\n        var connectable = this.connectable;\n        if (connectable) {\n            this.connectable = null;\n            var connection = connectable._connection;\n            connectable._refCount = 0;\n            connectable._subject = null;\n            connectable._connection = null;\n            if (connection) {\n                connection.unsubscribe();\n            }\n        }\n    };\n    return ConnectableSubscriber;\n}(SubjectSubscriber));\nvar RefCountOperator = /*@__PURE__*/ (function () {\n    function RefCountOperator(connectable) {\n        this.connectable = connectable;\n    }\n    RefCountOperator.prototype.call = function (subscriber, source) {\n        var connectable = this.connectable;\n        connectable._refCount++;\n        var refCounter = new RefCountSubscriber(subscriber, connectable);\n        var subscription = source.subscribe(refCounter);\n        if (!refCounter.closed) {\n            refCounter.connection = connectable.connect();\n        }\n        return subscription;\n    };\n    return RefCountOperator;\n}());\nvar RefCountSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(RefCountSubscriber, _super);\n    function RefCountSubscriber(destination, connectable) {\n        var _this = _super.call(this, destination) || this;\n        _this.connectable = connectable;\n        return _this;\n    }\n    RefCountSubscriber.prototype._unsubscribe = function () {\n        var connectable = this.connectable;\n        if (!connectable) {\n            this.connection = null;\n            return;\n        }\n        this.connectable = null;\n        var refCount = connectable._refCount;\n        if (refCount <= 0) {\n            this.connection = null;\n            return;\n        }\n        connectable._refCount = refCount - 1;\n        if (refCount > 1) {\n            this.connection = null;\n            return;\n        }\n        ///\n        // Compare the local RefCountSubscriber's connection Subscription to the\n        // connection Subscription on the shared ConnectableObservable. In cases\n        // where the ConnectableObservable source synchronously emits values, and\n        // the RefCountSubscriber's downstream Observers synchronously unsubscribe,\n        // execution continues to here before the RefCountOperator has a chance to\n        // supply the RefCountSubscriber with the shared connection Subscription.\n        // For example:\n        // ```\n        // Observable.range(0, 10)\n        //   .publish()\n        //   .refCount()\n        //   .take(5)\n        //   .subscribe();\n        // ```\n        // In order to account for this case, RefCountSubscriber should only dispose\n        // the ConnectableObservable's shared connection Subscription if the\n        // connection Subscription exists, *and* either:\n        //   a. RefCountSubscriber doesn't have a reference to the shared connection\n        //      Subscription yet, or,\n        //   b. RefCountSubscriber's connection Subscription reference is identical\n        //      to the shared connection Subscription\n        ///\n        var connection = this.connection;\n        var sharedConnection = connectable._connection;\n        this.connection = null;\n        if (sharedConnection && (!connection || sharedConnection === connection)) {\n            sharedConnection.unsubscribe();\n        }\n    };\n    return RefCountSubscriber;\n}(Subscriber));\n//# sourceMappingURL=ConnectableObservable.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber,_Notification PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\n/**\n *\n * Re-emits all notifications from source Observable with specified scheduler.\n *\n * <span class=\"informal\">Ensure a specific scheduler is used, from outside of an Observable.</span>\n *\n * `observeOn` is an operator that accepts a scheduler as a first parameter, which will be used to reschedule\n * notifications emitted by the source Observable. It might be useful, if you do not have control over\n * internal scheduler of a given Observable, but want to control when its values are emitted nevertheless.\n *\n * Returned Observable emits the same notifications (nexted values, complete and error events) as the source Observable,\n * but rescheduled with provided scheduler. Note that this doesn't mean that source Observables internal\n * scheduler will be replaced in any way. Original scheduler still will be used, but when the source Observable emits\n * notification, it will be immediately scheduled again - this time with scheduler passed to `observeOn`.\n * An anti-pattern would be calling `observeOn` on Observable that emits lots of values synchronously, to split\n * that emissions into asynchronous chunks. For this to happen, scheduler would have to be passed into the source\n * Observable directly (usually into the operator that creates it). `observeOn` simply delays notifications a\n * little bit more, to ensure that they are emitted at expected moments.\n *\n * As a matter of fact, `observeOn` accepts second parameter, which specifies in milliseconds with what delay notifications\n * will be emitted. The main difference between {@link delay} operator and `observeOn` is that `observeOn`\n * will delay all notifications - including error notifications - while `delay` will pass through error\n * from source Observable immediately when it is emitted. In general it is highly recommended to use `delay` operator\n * for any kind of delaying of values in the stream, while using `observeOn` to specify which scheduler should be used\n * for notification emissions in general.\n *\n * @example <caption>Ensure values in subscribe are called just before browser repaint.</caption>\n * const intervals = Rx.Observable.interval(10); // Intervals are scheduled\n *                                               // with async scheduler by default...\n *\n * intervals\n * .observeOn(Rx.Scheduler.animationFrame)       // ...but we will observe on animationFrame\n * .subscribe(val => {                           // scheduler to ensure smooth animation.\n *   someDiv.style.height = val + 'px';\n * });\n *\n * @see {@link delay}\n *\n * @param {SchedulerLike} scheduler Scheduler that will be used to reschedule notifications from source Observable.\n * @param {number} [delay] Number of milliseconds that states with what delay every notification should be rescheduled.\n * @return {Observable<T>} Observable that emits the same notifications as the source Observable,\n * but with provided scheduler.\n *\n * @method observeOn\n * @owner Observable\n */\nexport function observeOn(scheduler, delay) {\n    if (delay === void 0) {\n        delay = 0;\n    }\n    return function observeOnOperatorFunction(source) {\n        return source.lift(new ObserveOnOperator(scheduler, delay));\n    };\n}\nvar ObserveOnOperator = /*@__PURE__*/ (function () {\n    function ObserveOnOperator(scheduler, delay) {\n        if (delay === void 0) {\n            delay = 0;\n        }\n        this.scheduler = scheduler;\n        this.delay = delay;\n    }\n    ObserveOnOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new ObserveOnSubscriber(subscriber, this.scheduler, this.delay));\n    };\n    return ObserveOnOperator;\n}());\nexport { ObserveOnOperator };\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar ObserveOnSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(ObserveOnSubscriber, _super);\n    function ObserveOnSubscriber(destination, scheduler, delay) {\n        if (delay === void 0) {\n            delay = 0;\n        }\n        var _this = _super.call(this, destination) || this;\n        _this.scheduler = scheduler;\n        _this.delay = delay;\n        return _this;\n    }\n    /** @nocollapse */\n    ObserveOnSubscriber.dispatch = function (arg) {\n        var notification = arg.notification, destination = arg.destination;\n        notification.observe(destination);\n        this.unsubscribe();\n    };\n    ObserveOnSubscriber.prototype.scheduleMessage = function (notification) {\n        this.add(this.scheduler.schedule(ObserveOnSubscriber.dispatch, this.delay, new ObserveOnMessage(notification, this.destination)));\n    };\n    ObserveOnSubscriber.prototype._next = function (value) {\n        this.scheduleMessage(Notification.createNext(value));\n    };\n    ObserveOnSubscriber.prototype._error = function (err) {\n        this.scheduleMessage(Notification.createError(err));\n    };\n    ObserveOnSubscriber.prototype._complete = function () {\n        this.scheduleMessage(Notification.createComplete());\n    };\n    return ObserveOnSubscriber;\n}(Subscriber));\nexport { ObserveOnSubscriber };\nvar ObserveOnMessage = /*@__PURE__*/ (function () {\n    function ObserveOnMessage(notification, destination) {\n        this.notification = notification;\n        this.destination = destination;\n    }\n    return ObserveOnMessage;\n}());\nexport { ObserveOnMessage };\n//# sourceMappingURL=observeOn.js.map\n","/** PURE_IMPORTS_START tslib,_observable_from,_util_isArray,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { from } from '../observable/from';\nimport { isArray } from '../util/isArray';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n/* tslint:enable:max-line-length */\n/**\n * When any of the provided Observable emits an complete or error notification, it immediately subscribes to the next one\n * that was passed.\n *\n * <span class=\"informal\">Execute series of Observables no matter what, even if it means swallowing errors.</span>\n *\n * <img src=\"./img/onErrorResumeNext.png\" width=\"100%\">\n *\n * `onErrorResumeNext` is an operator that accepts a series of Observables, provided either directly as\n * arguments or as an array. If no single Observable is provided, returned Observable will simply behave the same\n * as the source.\n *\n * `onErrorResumeNext` returns an Observable that starts by subscribing and re-emitting values from the source Observable.\n * When its stream of values ends - no matter if Observable completed or emitted an error - `onErrorResumeNext`\n * will subscribe to the first Observable that was passed as an argument to the method. It will start re-emitting\n * its values as well and - again - when that stream ends, `onErrorResumeNext` will proceed to subscribing yet another\n * Observable in provided series, no matter if previous Observable completed or ended with an error. This will\n * be happening until there is no more Observables left in the series, at which point returned Observable will\n * complete - even if the last subscribed stream ended with an error.\n *\n * `onErrorResumeNext` can be therefore thought of as version of {@link concat} operator, which is more permissive\n * when it comes to the errors emitted by its input Observables. While `concat` subscribes to the next Observable\n * in series only if previous one successfully completed, `onErrorResumeNext` subscribes even if it ended with\n * an error.\n *\n * Note that you do not get any access to errors emitted by the Observables. In particular do not\n * expect these errors to appear in error callback passed to {@link subscribe}. If you want to take\n * specific actions based on what error was emitted by an Observable, you should try out {@link catch} instead.\n *\n *\n * @example <caption>Subscribe to the next Observable after map fails</caption>\n * Rx.Observable.of(1, 2, 3, 0)\n *   .map(x => {\n *       if (x === 0) { throw Error(); }\n         return 10 / x;\n *   })\n *   .onErrorResumeNext(Rx.Observable.of(1, 2, 3))\n *   .subscribe(\n *     val => console.log(val),\n *     err => console.log(err),          // Will never be called.\n *     () => console.log('that\\'s it!')\n *   );\n *\n * // Logs:\n * // 10\n * // 5\n * // 3.3333333333333335\n * // 1\n * // 2\n * // 3\n * // \"that's it!\"\n *\n * @see {@link concat}\n * @see {@link catch}\n *\n * @param {...ObservableInput} observables Observables passed either directly or as an array.\n * @return {Observable} An Observable that emits values from source Observable, but - if it errors - subscribes\n * to the next passed Observable and so on, until it completes or runs out of Observables.\n * @method onErrorResumeNext\n * @owner Observable\n */\nexport function onErrorResumeNext() {\n    var nextSources = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        nextSources[_i] = arguments[_i];\n    }\n    if (nextSources.length === 1 && isArray(nextSources[0])) {\n        nextSources = nextSources[0];\n    }\n    return function (source) { return source.lift(new OnErrorResumeNextOperator(nextSources)); };\n}\n/* tslint:enable:max-line-length */\nexport function onErrorResumeNextStatic() {\n    var nextSources = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        nextSources[_i] = arguments[_i];\n    }\n    var source = null;\n    if (nextSources.length === 1 && isArray(nextSources[0])) {\n        nextSources = nextSources[0];\n    }\n    source = nextSources.shift();\n    return from(source, null).lift(new OnErrorResumeNextOperator(nextSources));\n}\nvar OnErrorResumeNextOperator = /*@__PURE__*/ (function () {\n    function OnErrorResumeNextOperator(nextSources) {\n        this.nextSources = nextSources;\n    }\n    OnErrorResumeNextOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new OnErrorResumeNextSubscriber(subscriber, this.nextSources));\n    };\n    return OnErrorResumeNextOperator;\n}());\nvar OnErrorResumeNextSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(OnErrorResumeNextSubscriber, _super);\n    function OnErrorResumeNextSubscriber(destination, nextSources) {\n        var _this = _super.call(this, destination) || this;\n        _this.destination = destination;\n        _this.nextSources = nextSources;\n        return _this;\n    }\n    OnErrorResumeNextSubscriber.prototype.notifyError = function (error, innerSub) {\n        this.subscribeToNextSource();\n    };\n    OnErrorResumeNextSubscriber.prototype.notifyComplete = function (innerSub) {\n        this.subscribeToNextSource();\n    };\n    OnErrorResumeNextSubscriber.prototype._error = function (err) {\n        this.subscribeToNextSource();\n    };\n    OnErrorResumeNextSubscriber.prototype._complete = function () {\n        this.subscribeToNextSource();\n    };\n    OnErrorResumeNextSubscriber.prototype.subscribeToNextSource = function () {\n        var next = this.nextSources.shift();\n        if (next) {\n            this.add(subscribeToResult(this, next));\n        }\n        else {\n            this.destination.complete();\n        }\n    };\n    return OnErrorResumeNextSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=onErrorResumeNext.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\n/**\n * Groups pairs of consecutive emissions together and emits them as an array of\n * two values.\n *\n * <span class=\"informal\">Puts the current value and previous value together as\n * an array, and emits that.</span>\n *\n * <img src=\"./img/pairwise.png\" width=\"100%\">\n *\n * The Nth emission from the source Observable will cause the output Observable\n * to emit an array [(N-1)th, Nth] of the previous and the current value, as a\n * pair. For this reason, `pairwise` emits on the second and subsequent\n * emissions from the source Observable, but not on the first emission, because\n * there is no previous value in that case.\n *\n * @example <caption>On every click (starting from the second), emit the relative distance to the previous click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var pairs = clicks.pairwise();\n * var distance = pairs.map(pair => {\n *   var x0 = pair[0].clientX;\n *   var y0 = pair[0].clientY;\n *   var x1 = pair[1].clientX;\n *   var y1 = pair[1].clientY;\n *   return Math.sqrt(Math.pow(x0 - x1, 2) + Math.pow(y0 - y1, 2));\n * });\n * distance.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n *\n * @return {Observable<Array<T>>} An Observable of pairs (as arrays) of\n * consecutive values from the source Observable.\n * @method pairwise\n * @owner Observable\n */\nexport function pairwise() {\n    return function (source) { return source.lift(new PairwiseOperator()); };\n}\nvar PairwiseOperator = /*@__PURE__*/ (function () {\n    function PairwiseOperator() {\n    }\n    PairwiseOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new PairwiseSubscriber(subscriber));\n    };\n    return PairwiseOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar PairwiseSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(PairwiseSubscriber, _super);\n    function PairwiseSubscriber(destination) {\n        var _this = _super.call(this, destination) || this;\n        _this.hasPrev = false;\n        return _this;\n    }\n    PairwiseSubscriber.prototype._next = function (value) {\n        if (this.hasPrev) {\n            this.destination.next([this.prev, value]);\n        }\n        else {\n            this.hasPrev = true;\n        }\n        this.prev = value;\n    };\n    return PairwiseSubscriber;\n}(Subscriber));\n//# sourceMappingURL=pairwise.js.map\n","/** PURE_IMPORTS_START tslib,_Subject,_util_ObjectUnsubscribedError PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subject } from './Subject';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\n/**\n * @class BehaviorSubject<T>\n */\nvar BehaviorSubject = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(BehaviorSubject, _super);\n    function BehaviorSubject(_value) {\n        var _this = _super.call(this) || this;\n        _this._value = _value;\n        return _this;\n    }\n    Object.defineProperty(BehaviorSubject.prototype, \"value\", {\n        get: function () {\n            return this.getValue();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /** @deprecated This is an internal implementation detail, do not use. */\n    BehaviorSubject.prototype._subscribe = function (subscriber) {\n        var subscription = _super.prototype._subscribe.call(this, subscriber);\n        if (subscription && !subscription.closed) {\n            subscriber.next(this._value);\n        }\n        return subscription;\n    };\n    BehaviorSubject.prototype.getValue = function () {\n        if (this.hasError) {\n            throw this.thrownError;\n        }\n        else if (this.closed) {\n            throw new ObjectUnsubscribedError();\n        }\n        else {\n            return this._value;\n        }\n    };\n    BehaviorSubject.prototype.next = function (value) {\n        _super.prototype.next.call(this, this._value = value);\n    };\n    return BehaviorSubject;\n}(Subject));\nexport { BehaviorSubject };\n//# sourceMappingURL=BehaviorSubject.js.map\n","/** PURE_IMPORTS_START tslib,_Subject,_Subscription PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subject } from './Subject';\nimport { Subscription } from './Subscription';\n/**\n * @class AsyncSubject<T>\n */\nvar AsyncSubject = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(AsyncSubject, _super);\n    function AsyncSubject() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.value = null;\n        _this.hasNext = false;\n        _this.hasCompleted = false;\n        return _this;\n    }\n    /** @deprecated This is an internal implementation detail, do not use. */\n    AsyncSubject.prototype._subscribe = function (subscriber) {\n        if (this.hasError) {\n            subscriber.error(this.thrownError);\n            return Subscription.EMPTY;\n        }\n        else if (this.hasCompleted && this.hasNext) {\n            subscriber.next(this.value);\n            subscriber.complete();\n            return Subscription.EMPTY;\n        }\n        return _super.prototype._subscribe.call(this, subscriber);\n    };\n    AsyncSubject.prototype.next = function (value) {\n        if (!this.hasCompleted) {\n            this.value = value;\n            this.hasNext = true;\n        }\n    };\n    AsyncSubject.prototype.error = function (error) {\n        if (!this.hasCompleted) {\n            _super.prototype.error.call(this, error);\n        }\n    };\n    AsyncSubject.prototype.complete = function () {\n        this.hasCompleted = true;\n        if (this.hasNext) {\n            _super.prototype.next.call(this, this.value);\n        }\n        _super.prototype.complete.call(this);\n    };\n    return AsyncSubject;\n}(Subject));\nexport { AsyncSubject };\n//# sourceMappingURL=AsyncSubject.js.map\n","/** PURE_IMPORTS_START tslib,_AsyncAction PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { AsyncAction } from './AsyncAction';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar QueueAction = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(QueueAction, _super);\n    function QueueAction(scheduler, work) {\n        var _this = _super.call(this, scheduler, work) || this;\n        _this.scheduler = scheduler;\n        _this.work = work;\n        return _this;\n    }\n    QueueAction.prototype.schedule = function (state, delay) {\n        if (delay === void 0) {\n            delay = 0;\n        }\n        if (delay > 0) {\n            return _super.prototype.schedule.call(this, state, delay);\n        }\n        this.delay = delay;\n        this.state = state;\n        this.scheduler.flush(this);\n        return this;\n    };\n    QueueAction.prototype.execute = function (state, delay) {\n        return (delay > 0 || this.closed) ?\n            _super.prototype.execute.call(this, state, delay) :\n            this._execute(state, delay);\n    };\n    QueueAction.prototype.requestAsyncId = function (scheduler, id, delay) {\n        if (delay === void 0) {\n            delay = 0;\n        }\n        // If delay exists and is greater than 0, or if the delay is null (the\n        // action wasn't rescheduled) but was originally scheduled as an async\n        // action, then recycle as an async action.\n        if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {\n            return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);\n        }\n        // Otherwise flush the scheduler starting with this action.\n        return scheduler.flush(this);\n    };\n    return QueueAction;\n}(AsyncAction));\nexport { QueueAction };\n//# sourceMappingURL=QueueAction.js.map\n","/** PURE_IMPORTS_START tslib,_AsyncScheduler PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { AsyncScheduler } from './AsyncScheduler';\nvar QueueScheduler = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(QueueScheduler, _super);\n    function QueueScheduler() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return QueueScheduler;\n}(AsyncScheduler));\nexport { QueueScheduler };\n//# sourceMappingURL=QueueScheduler.js.map\n","/** PURE_IMPORTS_START _QueueAction,_QueueScheduler PURE_IMPORTS_END */\nimport { QueueAction } from './QueueAction';\nimport { QueueScheduler } from './QueueScheduler';\n/**\n *\n * Queue Scheduler\n *\n * <span class=\"informal\">Put every next task on a queue, instead of executing it immediately</span>\n *\n * `queue` scheduler, when used with delay, behaves the same as {@link async} scheduler.\n *\n * When used without delay, it schedules given task synchronously - executes it right when\n * it is scheduled. However when called recursively, that is when inside the scheduled task,\n * another task is scheduled with queue scheduler, instead of executing immediately as well,\n * that task will be put on a queue and wait for current one to finish.\n *\n * This means that when you execute task with `queue` scheduler, you are sure it will end\n * before any other task scheduled with that scheduler will start.\n *\n * @examples <caption>Schedule recursively first, then do something</caption>\n *\n * Rx.Scheduler.queue.schedule(() => {\n *   Rx.Scheduler.queue.schedule(() => console.log('second')); // will not happen now, but will be put on a queue\n *\n *   console.log('first');\n * });\n *\n * // Logs:\n * // \"first\"\n * // \"second\"\n *\n *\n * @example <caption>Reschedule itself recursively</caption>\n *\n * Rx.Scheduler.queue.schedule(function(state) {\n *   if (state !== 0) {\n *     console.log('before', state);\n *     this.schedule(state - 1); // `this` references currently executing Action,\n *                               // which we reschedule with new state\n *     console.log('after', state);\n *   }\n * }, 0, 3);\n *\n * // In scheduler that runs recursively, you would expect:\n * // \"before\", 3\n * // \"before\", 2\n * // \"before\", 1\n * // \"after\", 1\n * // \"after\", 2\n * // \"after\", 3\n *\n * // But with queue it logs:\n * // \"before\", 3\n * // \"after\", 3\n * // \"before\", 2\n * // \"after\", 2\n * // \"before\", 1\n * // \"after\", 1\n *\n *\n * @static true\n * @name queue\n * @owner Scheduler\n */\nexport var queue = /*@__PURE__*/ new QueueScheduler(QueueAction);\n//# sourceMappingURL=queue.js.map\n","/** PURE_IMPORTS_START tslib,_Subject,_scheduler_queue,_Subscription,_operators_observeOn,_util_ObjectUnsubscribedError,_SubjectSubscription PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subject } from './Subject';\nimport { queue } from './scheduler/queue';\nimport { Subscription } from './Subscription';\nimport { ObserveOnSubscriber } from './operators/observeOn';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nimport { SubjectSubscription } from './SubjectSubscription';\n/**\n * @class ReplaySubject<T>\n */\nvar ReplaySubject = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(ReplaySubject, _super);\n    function ReplaySubject(bufferSize, windowTime, scheduler) {\n        if (bufferSize === void 0) {\n            bufferSize = Number.POSITIVE_INFINITY;\n        }\n        if (windowTime === void 0) {\n            windowTime = Number.POSITIVE_INFINITY;\n        }\n        var _this = _super.call(this) || this;\n        _this.scheduler = scheduler;\n        _this._events = [];\n        _this._infiniteTimeWindow = false;\n        _this._bufferSize = bufferSize < 1 ? 1 : bufferSize;\n        _this._windowTime = windowTime < 1 ? 1 : windowTime;\n        if (windowTime === Number.POSITIVE_INFINITY) {\n            _this._infiniteTimeWindow = true;\n            _this.next = _this.nextInfiniteTimeWindow;\n        }\n        else {\n            _this.next = _this.nextTimeWindow;\n        }\n        return _this;\n    }\n    ReplaySubject.prototype.nextInfiniteTimeWindow = function (value) {\n        var _events = this._events;\n        _events.push(value);\n        // Since this method is invoked in every next() call than the buffer\n        // can overgrow the max size only by one item\n        if (_events.length > this._bufferSize) {\n            _events.shift();\n        }\n        _super.prototype.next.call(this, value);\n    };\n    ReplaySubject.prototype.nextTimeWindow = function (value) {\n        this._events.push(new ReplayEvent(this._getNow(), value));\n        this._trimBufferThenGetEvents();\n        _super.prototype.next.call(this, value);\n    };\n    /** @deprecated This is an internal implementation detail, do not use. */\n    ReplaySubject.prototype._subscribe = function (subscriber) {\n        // When `_infiniteTimeWindow === true` then the buffer is already trimmed\n        var _infiniteTimeWindow = this._infiniteTimeWindow;\n        var _events = _infiniteTimeWindow ? this._events : this._trimBufferThenGetEvents();\n        var scheduler = this.scheduler;\n        var len = _events.length;\n        var subscription;\n        if (this.closed) {\n            throw new ObjectUnsubscribedError();\n        }\n        else if (this.isStopped || this.hasError) {\n            subscription = Subscription.EMPTY;\n        }\n        else {\n            this.observers.push(subscriber);\n            subscription = new SubjectSubscription(this, subscriber);\n        }\n        if (scheduler) {\n            subscriber.add(subscriber = new ObserveOnSubscriber(subscriber, scheduler));\n        }\n        if (_infiniteTimeWindow) {\n            for (var i = 0; i < len && !subscriber.closed; i++) {\n                subscriber.next(_events[i]);\n            }\n        }\n        else {\n            for (var i = 0; i < len && !subscriber.closed; i++) {\n                subscriber.next(_events[i].value);\n            }\n        }\n        if (this.hasError) {\n            subscriber.error(this.thrownError);\n        }\n        else if (this.isStopped) {\n            subscriber.complete();\n        }\n        return subscription;\n    };\n    ReplaySubject.prototype._getNow = function () {\n        return (this.scheduler || queue).now();\n    };\n    ReplaySubject.prototype._trimBufferThenGetEvents = function () {\n        var now = this._getNow();\n        var _bufferSize = this._bufferSize;\n        var _windowTime = this._windowTime;\n        var _events = this._events;\n        var eventsCount = _events.length;\n        var spliceCount = 0;\n        // Trim events that fall out of the time window.\n        // Start at the front of the list. Break early once\n        // we encounter an event that falls within the window.\n        while (spliceCount < eventsCount) {\n            if ((now - _events[spliceCount].time) < _windowTime) {\n                break;\n            }\n            spliceCount++;\n        }\n        if (eventsCount > _bufferSize) {\n            spliceCount = Math.max(spliceCount, eventsCount - _bufferSize);\n        }\n        if (spliceCount > 0) {\n            _events.splice(0, spliceCount);\n        }\n        return _events;\n    };\n    return ReplaySubject;\n}(Subject));\nexport { ReplaySubject };\nvar ReplayEvent = /*@__PURE__*/ (function () {\n    function ReplayEvent(time, value) {\n        this.time = time;\n        this.value = value;\n    }\n    return ReplayEvent;\n}());\n//# sourceMappingURL=ReplaySubject.js.map\n","/** PURE_IMPORTS_START tslib,_util_isArray,_fromArray,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { isArray } from '../util/isArray';\nimport { fromArray } from './fromArray';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nexport function race() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i] = arguments[_i];\n    }\n    // if the only argument is an array, it was most likely called with\n    // `race([obs1, obs2, ...])`\n    if (observables.length === 1) {\n        if (isArray(observables[0])) {\n            observables = observables[0];\n        }\n        else {\n            return observables[0];\n        }\n    }\n    return fromArray(observables, undefined).lift(new RaceOperator());\n}\nvar RaceOperator = /*@__PURE__*/ (function () {\n    function RaceOperator() {\n    }\n    RaceOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new RaceSubscriber(subscriber));\n    };\n    return RaceOperator;\n}());\nexport { RaceOperator };\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar RaceSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(RaceSubscriber, _super);\n    function RaceSubscriber(destination) {\n        var _this = _super.call(this, destination) || this;\n        _this.hasFirst = false;\n        _this.observables = [];\n        _this.subscriptions = [];\n        return _this;\n    }\n    RaceSubscriber.prototype._next = function (observable) {\n        this.observables.push(observable);\n    };\n    RaceSubscriber.prototype._complete = function () {\n        var observables = this.observables;\n        var len = observables.length;\n        if (len === 0) {\n            this.destination.complete();\n        }\n        else {\n            for (var i = 0; i < len && !this.hasFirst; i++) {\n                var observable = observables[i];\n                var subscription = subscribeToResult(this, observable, observable, i);\n                if (this.subscriptions) {\n                    this.subscriptions.push(subscription);\n                }\n                this.add(subscription);\n            }\n            this.observables = null;\n        }\n    };\n    RaceSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        if (!this.hasFirst) {\n            this.hasFirst = true;\n            for (var i = 0; i < this.subscriptions.length; i++) {\n                if (i !== outerIndex) {\n                    var subscription = this.subscriptions[i];\n                    subscription.unsubscribe();\n                    this.remove(subscription);\n                }\n            }\n            this.subscriptions = null;\n        }\n        this.destination.next(innerValue);\n    };\n    return RaceSubscriber;\n}(OuterSubscriber));\nexport { RaceSubscriber };\n//# sourceMappingURL=race.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber,_observable_empty PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nimport { empty } from '../observable/empty';\n/**\n * Returns an Observable that repeats the stream of items emitted by the source Observable at most count times.\n *\n * <img src=\"./img/repeat.png\" width=\"100%\">\n *\n * @param {number} [count] The number of times the source Observable items are repeated, a count of 0 will yield\n * an empty Observable.\n * @return {Observable} An Observable that repeats the stream of items emitted by the source Observable at most\n * count times.\n * @method repeat\n * @owner Observable\n */\nexport function repeat(count) {\n    if (count === void 0) {\n        count = -1;\n    }\n    return function (source) {\n        if (count === 0) {\n            return empty();\n        }\n        else if (count < 0) {\n            return source.lift(new RepeatOperator(-1, source));\n        }\n        else {\n            return source.lift(new RepeatOperator(count - 1, source));\n        }\n    };\n}\nvar RepeatOperator = /*@__PURE__*/ (function () {\n    function RepeatOperator(count, source) {\n        this.count = count;\n        this.source = source;\n    }\n    RepeatOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new RepeatSubscriber(subscriber, this.count, this.source));\n    };\n    return RepeatOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar RepeatSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(RepeatSubscriber, _super);\n    function RepeatSubscriber(destination, count, source) {\n        var _this = _super.call(this, destination) || this;\n        _this.count = count;\n        _this.source = source;\n        return _this;\n    }\n    RepeatSubscriber.prototype.complete = function () {\n        if (!this.isStopped) {\n            var _a = this, source = _a.source, count = _a.count;\n            if (count === 0) {\n                return _super.prototype.complete.call(this);\n            }\n            else if (count > -1) {\n                this.count = count - 1;\n            }\n            source.subscribe(this._unsubscribeAndRecycle());\n        }\n    };\n    return RepeatSubscriber;\n}(Subscriber));\n//# sourceMappingURL=repeat.js.map\n","/** PURE_IMPORTS_START tslib,_Subject,_util_tryCatch,_util_errorObject,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subject } from '../Subject';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n/**\n * Returns an Observable that mirrors the source Observable with the exception of a `complete`. If the source\n * Observable calls `complete`, this method will emit to the Observable returned from `notifier`. If that Observable\n * calls `complete` or `error`, then this method will call `complete` or `error` on the child subscription. Otherwise\n * this method will resubscribe to the source Observable.\n *\n * <img src=\"./img/repeatWhen.png\" width=\"100%\">\n *\n * @param {function(notifications: Observable): Observable} notifier - Receives an Observable of notifications with\n * which a user can `complete` or `error`, aborting the repetition.\n * @return {Observable} The source Observable modified with repeat logic.\n * @method repeatWhen\n * @owner Observable\n */\nexport function repeatWhen(notifier) {\n    return function (source) { return source.lift(new RepeatWhenOperator(notifier)); };\n}\nvar RepeatWhenOperator = /*@__PURE__*/ (function () {\n    function RepeatWhenOperator(notifier) {\n        this.notifier = notifier;\n    }\n    RepeatWhenOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new RepeatWhenSubscriber(subscriber, this.notifier, source));\n    };\n    return RepeatWhenOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar RepeatWhenSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(RepeatWhenSubscriber, _super);\n    function RepeatWhenSubscriber(destination, notifier, source) {\n        var _this = _super.call(this, destination) || this;\n        _this.notifier = notifier;\n        _this.source = source;\n        _this.sourceIsBeingSubscribedTo = true;\n        return _this;\n    }\n    RepeatWhenSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.sourceIsBeingSubscribedTo = true;\n        this.source.subscribe(this);\n    };\n    RepeatWhenSubscriber.prototype.notifyComplete = function (innerSub) {\n        if (this.sourceIsBeingSubscribedTo === false) {\n            return _super.prototype.complete.call(this);\n        }\n    };\n    RepeatWhenSubscriber.prototype.complete = function () {\n        this.sourceIsBeingSubscribedTo = false;\n        if (!this.isStopped) {\n            if (!this.retries) {\n                this.subscribeToRetries();\n            }\n            if (!this.retriesSubscription || this.retriesSubscription.closed) {\n                return _super.prototype.complete.call(this);\n            }\n            this._unsubscribeAndRecycle();\n            this.notifications.next();\n        }\n    };\n    /** @deprecated This is an internal implementation detail, do not use. */\n    RepeatWhenSubscriber.prototype._unsubscribe = function () {\n        var _a = this, notifications = _a.notifications, retriesSubscription = _a.retriesSubscription;\n        if (notifications) {\n            notifications.unsubscribe();\n            this.notifications = null;\n        }\n        if (retriesSubscription) {\n            retriesSubscription.unsubscribe();\n            this.retriesSubscription = null;\n        }\n        this.retries = null;\n    };\n    /** @deprecated This is an internal implementation detail, do not use. */\n    RepeatWhenSubscriber.prototype._unsubscribeAndRecycle = function () {\n        var _unsubscribe = this._unsubscribe;\n        this._unsubscribe = null;\n        _super.prototype._unsubscribeAndRecycle.call(this);\n        this._unsubscribe = _unsubscribe;\n        return this;\n    };\n    RepeatWhenSubscriber.prototype.subscribeToRetries = function () {\n        this.notifications = new Subject();\n        var retries = tryCatch(this.notifier)(this.notifications);\n        if (retries === errorObject) {\n            return _super.prototype.complete.call(this);\n        }\n        this.retries = retries;\n        this.retriesSubscription = subscribeToResult(this, retries);\n    };\n    return RepeatWhenSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=repeatWhen.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\n/**\n * Returns an Observable that mirrors the source Observable with the exception of an `error`. If the source Observable\n * calls `error`, this method will resubscribe to the source Observable for a maximum of `count` resubscriptions (given\n * as a number parameter) rather than propagating the `error` call.\n *\n * <img src=\"./img/retry.png\" width=\"100%\">\n *\n * Any and all items emitted by the source Observable will be emitted by the resulting Observable, even those emitted\n * during failed subscriptions. For example, if an Observable fails at first but emits [1, 2] then succeeds the second\n * time and emits: [1, 2, 3, 4, 5] then the complete stream of emissions and notifications\n * would be: [1, 2, 1, 2, 3, 4, 5, `complete`].\n * @param {number} count - Number of retry attempts before failing.\n * @return {Observable} The source Observable modified with the retry logic.\n * @method retry\n * @owner Observable\n */\nexport function retry(count) {\n    if (count === void 0) {\n        count = -1;\n    }\n    return function (source) { return source.lift(new RetryOperator(count, source)); };\n}\nvar RetryOperator = /*@__PURE__*/ (function () {\n    function RetryOperator(count, source) {\n        this.count = count;\n        this.source = source;\n    }\n    RetryOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new RetrySubscriber(subscriber, this.count, this.source));\n    };\n    return RetryOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar RetrySubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(RetrySubscriber, _super);\n    function RetrySubscriber(destination, count, source) {\n        var _this = _super.call(this, destination) || this;\n        _this.count = count;\n        _this.source = source;\n        return _this;\n    }\n    RetrySubscriber.prototype.error = function (err) {\n        if (!this.isStopped) {\n            var _a = this, source = _a.source, count = _a.count;\n            if (count === 0) {\n                return _super.prototype.error.call(this, err);\n            }\n            else if (count > -1) {\n                this.count = count - 1;\n            }\n            source.subscribe(this._unsubscribeAndRecycle());\n        }\n    };\n    return RetrySubscriber;\n}(Subscriber));\n//# sourceMappingURL=retry.js.map\n","/** PURE_IMPORTS_START tslib,_Subject,_util_tryCatch,_util_errorObject,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subject } from '../Subject';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n/**\n * Returns an Observable that mirrors the source Observable with the exception of an `error`. If the source Observable\n * calls `error`, this method will emit the Throwable that caused the error to the Observable returned from `notifier`.\n * If that Observable calls `complete` or `error` then this method will call `complete` or `error` on the child\n * subscription. Otherwise this method will resubscribe to the source Observable.\n *\n * <img src=\"./img/retryWhen.png\" width=\"100%\">\n *\n * @param {function(errors: Observable): Observable} notifier - Receives an Observable of notifications with which a\n * user can `complete` or `error`, aborting the retry.\n * @return {Observable} The source Observable modified with retry logic.\n * @method retryWhen\n * @owner Observable\n */\nexport function retryWhen(notifier) {\n    return function (source) { return source.lift(new RetryWhenOperator(notifier, source)); };\n}\nvar RetryWhenOperator = /*@__PURE__*/ (function () {\n    function RetryWhenOperator(notifier, source) {\n        this.notifier = notifier;\n        this.source = source;\n    }\n    RetryWhenOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new RetryWhenSubscriber(subscriber, this.notifier, this.source));\n    };\n    return RetryWhenOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar RetryWhenSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(RetryWhenSubscriber, _super);\n    function RetryWhenSubscriber(destination, notifier, source) {\n        var _this = _super.call(this, destination) || this;\n        _this.notifier = notifier;\n        _this.source = source;\n        return _this;\n    }\n    RetryWhenSubscriber.prototype.error = function (err) {\n        if (!this.isStopped) {\n            var errors = this.errors;\n            var retries = this.retries;\n            var retriesSubscription = this.retriesSubscription;\n            if (!retries) {\n                errors = new Subject();\n                retries = tryCatch(this.notifier)(errors);\n                if (retries === errorObject) {\n                    return _super.prototype.error.call(this, errorObject.e);\n                }\n                retriesSubscription = subscribeToResult(this, retries);\n            }\n            else {\n                this.errors = null;\n                this.retriesSubscription = null;\n            }\n            this._unsubscribeAndRecycle();\n            this.errors = errors;\n            this.retries = retries;\n            this.retriesSubscription = retriesSubscription;\n            errors.next(err);\n        }\n    };\n    /** @deprecated This is an internal implementation detail, do not use. */\n    RetryWhenSubscriber.prototype._unsubscribe = function () {\n        var _a = this, errors = _a.errors, retriesSubscription = _a.retriesSubscription;\n        if (errors) {\n            errors.unsubscribe();\n            this.errors = null;\n        }\n        if (retriesSubscription) {\n            retriesSubscription.unsubscribe();\n            this.retriesSubscription = null;\n        }\n        this.retries = null;\n    };\n    RetryWhenSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        var _unsubscribe = this._unsubscribe;\n        this._unsubscribe = null;\n        this._unsubscribeAndRecycle();\n        this._unsubscribe = _unsubscribe;\n        this.source.subscribe(this);\n    };\n    return RetryWhenSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=retryWhen.js.map\n","/** PURE_IMPORTS_START tslib,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n/**\n * Emits the most recently emitted value from the source Observable whenever\n * another Observable, the `notifier`, emits.\n *\n * <span class=\"informal\">It's like {@link sampleTime}, but samples whenever\n * the `notifier` Observable emits something.</span>\n *\n * <img src=\"./img/sample.png\" width=\"100%\">\n *\n * Whenever the `notifier` Observable emits a value or completes, `sample`\n * looks at the source Observable and emits whichever value it has most recently\n * emitted since the previous sampling, unless the source has not emitted\n * anything since the previous sampling. The `notifier` is subscribed to as soon\n * as the output Observable is subscribed.\n *\n * @example <caption>On every click, sample the most recent \"seconds\" timer</caption>\n * var seconds = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = seconds.sample(clicks);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param {Observable<any>} notifier The Observable to use for sampling the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the results of sampling the\n * values emitted by the source Observable whenever the notifier Observable\n * emits value or completes.\n * @method sample\n * @owner Observable\n */\nexport function sample(notifier) {\n    return function (source) { return source.lift(new SampleOperator(notifier)); };\n}\nvar SampleOperator = /*@__PURE__*/ (function () {\n    function SampleOperator(notifier) {\n        this.notifier = notifier;\n    }\n    SampleOperator.prototype.call = function (subscriber, source) {\n        var sampleSubscriber = new SampleSubscriber(subscriber);\n        var subscription = source.subscribe(sampleSubscriber);\n        subscription.add(subscribeToResult(sampleSubscriber, this.notifier));\n        return subscription;\n    };\n    return SampleOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SampleSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(SampleSubscriber, _super);\n    function SampleSubscriber() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.hasValue = false;\n        return _this;\n    }\n    SampleSubscriber.prototype._next = function (value) {\n        this.value = value;\n        this.hasValue = true;\n    };\n    SampleSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.emitValue();\n    };\n    SampleSubscriber.prototype.notifyComplete = function () {\n        this.emitValue();\n    };\n    SampleSubscriber.prototype.emitValue = function () {\n        if (this.hasValue) {\n            this.hasValue = false;\n            this.destination.next(this.value);\n        }\n    };\n    return SampleSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=sample.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber,_scheduler_async PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nimport { async } from '../scheduler/async';\n/**\n * Emits the most recently emitted value from the source Observable within\n * periodic time intervals.\n *\n * <span class=\"informal\">Samples the source Observable at periodic time\n * intervals, emitting what it samples.</span>\n *\n * <img src=\"./img/sampleTime.png\" width=\"100%\">\n *\n * `sampleTime` periodically looks at the source Observable and emits whichever\n * value it has most recently emitted since the previous sampling, unless the\n * source has not emitted anything since the previous sampling. The sampling\n * happens periodically in time every `period` milliseconds (or the time unit\n * defined by the optional `scheduler` argument). The sampling starts as soon as\n * the output Observable is subscribed.\n *\n * @example <caption>Every second, emit the most recent click at most once</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.sampleTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sample}\n * @see {@link throttleTime}\n *\n * @param {number} period The sampling period expressed in milliseconds or the\n * time unit determined internally by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the sampling.\n * @return {Observable<T>} An Observable that emits the results of sampling the\n * values emitted by the source Observable at the specified time interval.\n * @method sampleTime\n * @owner Observable\n */\nexport function sampleTime(period, scheduler) {\n    if (scheduler === void 0) {\n        scheduler = async;\n    }\n    return function (source) { return source.lift(new SampleTimeOperator(period, scheduler)); };\n}\nvar SampleTimeOperator = /*@__PURE__*/ (function () {\n    function SampleTimeOperator(period, scheduler) {\n        this.period = period;\n        this.scheduler = scheduler;\n    }\n    SampleTimeOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new SampleTimeSubscriber(subscriber, this.period, this.scheduler));\n    };\n    return SampleTimeOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SampleTimeSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(SampleTimeSubscriber, _super);\n    function SampleTimeSubscriber(destination, period, scheduler) {\n        var _this = _super.call(this, destination) || this;\n        _this.period = period;\n        _this.scheduler = scheduler;\n        _this.hasValue = false;\n        _this.add(scheduler.schedule(dispatchNotification, period, { subscriber: _this, period: period }));\n        return _this;\n    }\n    SampleTimeSubscriber.prototype._next = function (value) {\n        this.lastValue = value;\n        this.hasValue = true;\n    };\n    SampleTimeSubscriber.prototype.notifyNext = function () {\n        if (this.hasValue) {\n            this.hasValue = false;\n            this.destination.next(this.lastValue);\n        }\n    };\n    return SampleTimeSubscriber;\n}(Subscriber));\nfunction dispatchNotification(state) {\n    var subscriber = state.subscriber, period = state.period;\n    subscriber.notifyNext();\n    this.schedule(state, period);\n}\n//# sourceMappingURL=sampleTime.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber,_util_tryCatch,_util_errorObject PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n/**\n * Compares all values of two observables in sequence using an optional comparor function\n * and returns an observable of a single boolean value representing whether or not the two sequences\n * are equal.\n *\n * <span class=\"informal\">Checks to see of all values emitted by both observables are equal, in order.</span>\n *\n * <img src=\"./img/sequenceEqual.png\" width=\"100%\">\n *\n * `sequenceEqual` subscribes to two observables and buffers incoming values from each observable. Whenever either\n * observable emits a value, the value is buffered and the buffers are shifted and compared from the bottom\n * up; If any value pair doesn't match, the returned observable will emit `false` and complete. If one of the\n * observables completes, the operator will wait for the other observable to complete; If the other\n * observable emits before completing, the returned observable will emit `false` and complete. If one observable never\n * completes or emits after the other complets, the returned observable will never complete.\n *\n * @example <caption>figure out if the Konami code matches</caption>\n * var code = Rx.Observable.from([\n *  \"ArrowUp\",\n *  \"ArrowUp\",\n *  \"ArrowDown\",\n *  \"ArrowDown\",\n *  \"ArrowLeft\",\n *  \"ArrowRight\",\n *  \"ArrowLeft\",\n *  \"ArrowRight\",\n *  \"KeyB\",\n *  \"KeyA\",\n *  \"Enter\" // no start key, clearly.\n * ]);\n *\n * var keys = Rx.Observable.fromEvent(document, 'keyup')\n *  .map(e => e.code);\n * var matches = keys.bufferCount(11, 1)\n *  .mergeMap(\n *    last11 =>\n *      Rx.Observable.from(last11)\n *        .sequenceEqual(code)\n *   );\n * matches.subscribe(matched => console.log('Successful cheat at Contra? ', matched));\n *\n * @see {@link combineLatest}\n * @see {@link zip}\n * @see {@link withLatestFrom}\n *\n * @param {Observable} compareTo The observable sequence to compare the source sequence to.\n * @param {function} [comparor] An optional function to compare each value pair\n * @return {Observable} An Observable of a single boolean value representing whether or not\n * the values emitted by both observables were equal in sequence.\n * @method sequenceEqual\n * @owner Observable\n */\nexport function sequenceEqual(compareTo, comparor) {\n    return function (source) { return source.lift(new SequenceEqualOperator(compareTo, comparor)); };\n}\nvar SequenceEqualOperator = /*@__PURE__*/ (function () {\n    function SequenceEqualOperator(compareTo, comparor) {\n        this.compareTo = compareTo;\n        this.comparor = comparor;\n    }\n    SequenceEqualOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new SequenceEqualSubscriber(subscriber, this.compareTo, this.comparor));\n    };\n    return SequenceEqualOperator;\n}());\nexport { SequenceEqualOperator };\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SequenceEqualSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(SequenceEqualSubscriber, _super);\n    function SequenceEqualSubscriber(destination, compareTo, comparor) {\n        var _this = _super.call(this, destination) || this;\n        _this.compareTo = compareTo;\n        _this.comparor = comparor;\n        _this._a = [];\n        _this._b = [];\n        _this._oneComplete = false;\n        _this.add(compareTo.subscribe(new SequenceEqualCompareToSubscriber(destination, _this)));\n        return _this;\n    }\n    SequenceEqualSubscriber.prototype._next = function (value) {\n        if (this._oneComplete && this._b.length === 0) {\n            this.emit(false);\n        }\n        else {\n            this._a.push(value);\n            this.checkValues();\n        }\n    };\n    SequenceEqualSubscriber.prototype._complete = function () {\n        if (this._oneComplete) {\n            this.emit(this._a.length === 0 && this._b.length === 0);\n        }\n        else {\n            this._oneComplete = true;\n        }\n    };\n    SequenceEqualSubscriber.prototype.checkValues = function () {\n        var _c = this, _a = _c._a, _b = _c._b, comparor = _c.comparor;\n        while (_a.length > 0 && _b.length > 0) {\n            var a = _a.shift();\n            var b = _b.shift();\n            var areEqual = false;\n            if (comparor) {\n                areEqual = tryCatch(comparor)(a, b);\n                if (areEqual === errorObject) {\n                    this.destination.error(errorObject.e);\n                }\n            }\n            else {\n                areEqual = a === b;\n            }\n            if (!areEqual) {\n                this.emit(false);\n            }\n        }\n    };\n    SequenceEqualSubscriber.prototype.emit = function (value) {\n        var destination = this.destination;\n        destination.next(value);\n        destination.complete();\n    };\n    SequenceEqualSubscriber.prototype.nextB = function (value) {\n        if (this._oneComplete && this._a.length === 0) {\n            this.emit(false);\n        }\n        else {\n            this._b.push(value);\n            this.checkValues();\n        }\n    };\n    return SequenceEqualSubscriber;\n}(Subscriber));\nexport { SequenceEqualSubscriber };\nvar SequenceEqualCompareToSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(SequenceEqualCompareToSubscriber, _super);\n    function SequenceEqualCompareToSubscriber(destination, parent) {\n        var _this = _super.call(this, destination) || this;\n        _this.parent = parent;\n        return _this;\n    }\n    SequenceEqualCompareToSubscriber.prototype._next = function (value) {\n        this.parent.nextB(value);\n    };\n    SequenceEqualCompareToSubscriber.prototype._error = function (err) {\n        this.parent.error(err);\n    };\n    SequenceEqualCompareToSubscriber.prototype._complete = function () {\n        this.parent._complete();\n    };\n    return SequenceEqualCompareToSubscriber;\n}(Subscriber));\n//# sourceMappingURL=sequenceEqual.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber,_util_EmptyError PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nimport { EmptyError } from '../util/EmptyError';\n/**\n * Returns an Observable that emits the single item emitted by the source Observable that matches a specified\n * predicate, if that Observable emits one such item. If the source Observable emits more than one such item or no\n * items, notify of an IllegalArgumentException or NoSuchElementException respectively. If the source Observable\n * emits items but none match the specified predicate then `undefined` is emiited.\n *\n * <img src=\"./img/single.png\" width=\"100%\">\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n * @param {Function} predicate - A predicate function to evaluate items emitted by the source Observable.\n * @return {Observable<T>} An Observable that emits the single item emitted by the source Observable that matches\n * the predicate or `undefined` when no items match.\n *\n * @method single\n * @owner Observable\n */\nexport function single(predicate) {\n    return function (source) { return source.lift(new SingleOperator(predicate, source)); };\n}\nvar SingleOperator = /*@__PURE__*/ (function () {\n    function SingleOperator(predicate, source) {\n        this.predicate = predicate;\n        this.source = source;\n    }\n    SingleOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new SingleSubscriber(subscriber, this.predicate, this.source));\n    };\n    return SingleOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SingleSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(SingleSubscriber, _super);\n    function SingleSubscriber(destination, predicate, source) {\n        var _this = _super.call(this, destination) || this;\n        _this.predicate = predicate;\n        _this.source = source;\n        _this.seenValue = false;\n        _this.index = 0;\n        return _this;\n    }\n    SingleSubscriber.prototype.applySingleValue = function (value) {\n        if (this.seenValue) {\n            this.destination.error('Sequence contains more than one element');\n        }\n        else {\n            this.seenValue = true;\n            this.singleValue = value;\n        }\n    };\n    SingleSubscriber.prototype._next = function (value) {\n        var index = this.index++;\n        if (this.predicate) {\n            this.tryNext(value, index);\n        }\n        else {\n            this.applySingleValue(value);\n        }\n    };\n    SingleSubscriber.prototype.tryNext = function (value, index) {\n        try {\n            if (this.predicate(value, index, this.source)) {\n                this.applySingleValue(value);\n            }\n        }\n        catch (err) {\n            this.destination.error(err);\n        }\n    };\n    SingleSubscriber.prototype._complete = function () {\n        var destination = this.destination;\n        if (this.index > 0) {\n            destination.next(this.seenValue ? this.singleValue : undefined);\n            destination.complete();\n        }\n        else {\n            destination.error(new EmptyError);\n        }\n    };\n    return SingleSubscriber;\n}(Subscriber));\n//# sourceMappingURL=single.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\n/**\n * Returns an Observable that skips the first `count` items emitted by the source Observable.\n *\n * <img src=\"./img/skip.png\" width=\"100%\">\n *\n * @param {Number} count - The number of times, items emitted by source Observable should be skipped.\n * @return {Observable} An Observable that skips values emitted by the source Observable.\n *\n * @method skip\n * @owner Observable\n */\nexport function skip(count) {\n    return function (source) { return source.lift(new SkipOperator(count)); };\n}\nvar SkipOperator = /*@__PURE__*/ (function () {\n    function SkipOperator(total) {\n        this.total = total;\n    }\n    SkipOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new SkipSubscriber(subscriber, this.total));\n    };\n    return SkipOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SkipSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(SkipSubscriber, _super);\n    function SkipSubscriber(destination, total) {\n        var _this = _super.call(this, destination) || this;\n        _this.total = total;\n        _this.count = 0;\n        return _this;\n    }\n    SkipSubscriber.prototype._next = function (x) {\n        if (++this.count > this.total) {\n            this.destination.next(x);\n        }\n    };\n    return SkipSubscriber;\n}(Subscriber));\n//# sourceMappingURL=skip.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber,_util_ArgumentOutOfRangeError PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\n/**\n * Skip the last `count` values emitted by the source Observable.\n *\n * <img src=\"./img/skipLast.png\" width=\"100%\">\n *\n * `skipLast` returns an Observable that accumulates a queue with a length\n * enough to store the first `count` values. As more values are received,\n * values are taken from the front of the queue and produced on the result\n * sequence. This causes values to be delayed.\n *\n * @example <caption>Skip the last 2 values of an Observable with many values</caption>\n * var many = Rx.Observable.range(1, 5);\n * var skipLastTwo = many.skipLast(2);\n * skipLastTwo.subscribe(x => console.log(x));\n *\n * // Results in:\n * // 1 2 3\n *\n * @see {@link skip}\n * @see {@link skipUntil}\n * @see {@link skipWhile}\n * @see {@link take}\n *\n * @throws {ArgumentOutOfRangeError} When using `skipLast(i)`, it throws\n * ArgumentOutOrRangeError if `i < 0`.\n *\n * @param {number} count Number of elements to skip from the end of the source Observable.\n * @returns {Observable<T>} An Observable that skips the last count values\n * emitted by the source Observable.\n * @method skipLast\n * @owner Observable\n */\nexport function skipLast(count) {\n    return function (source) { return source.lift(new SkipLastOperator(count)); };\n}\nvar SkipLastOperator = /*@__PURE__*/ (function () {\n    function SkipLastOperator(_skipCount) {\n        this._skipCount = _skipCount;\n        if (this._skipCount < 0) {\n            throw new ArgumentOutOfRangeError;\n        }\n    }\n    SkipLastOperator.prototype.call = function (subscriber, source) {\n        if (this._skipCount === 0) {\n            // If we don't want to skip any values then just subscribe\n            // to Subscriber without any further logic.\n            return source.subscribe(new Subscriber(subscriber));\n        }\n        else {\n            return source.subscribe(new SkipLastSubscriber(subscriber, this._skipCount));\n        }\n    };\n    return SkipLastOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SkipLastSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(SkipLastSubscriber, _super);\n    function SkipLastSubscriber(destination, _skipCount) {\n        var _this = _super.call(this, destination) || this;\n        _this._skipCount = _skipCount;\n        _this._count = 0;\n        _this._ring = new Array(_skipCount);\n        return _this;\n    }\n    SkipLastSubscriber.prototype._next = function (value) {\n        var skipCount = this._skipCount;\n        var count = this._count++;\n        if (count < skipCount) {\n            this._ring[count] = value;\n        }\n        else {\n            var currentIndex = count % skipCount;\n            var ring = this._ring;\n            var oldValue = ring[currentIndex];\n            ring[currentIndex] = value;\n            this.destination.next(oldValue);\n        }\n    };\n    return SkipLastSubscriber;\n}(Subscriber));\n//# sourceMappingURL=skipLast.js.map\n","/** PURE_IMPORTS_START tslib,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n/**\n * Returns an Observable that skips items emitted by the source Observable until a second Observable emits an item.\n *\n * <img src=\"./img/skipUntil.png\" width=\"100%\">\n *\n * @param {Observable} notifier - The second Observable that has to emit an item before the source Observable's elements begin to\n * be mirrored by the resulting Observable.\n * @return {Observable<T>} An Observable that skips items from the source Observable until the second Observable emits\n * an item, then emits the remaining items.\n * @method skipUntil\n * @owner Observable\n */\nexport function skipUntil(notifier) {\n    return function (source) { return source.lift(new SkipUntilOperator(notifier)); };\n}\nvar SkipUntilOperator = /*@__PURE__*/ (function () {\n    function SkipUntilOperator(notifier) {\n        this.notifier = notifier;\n    }\n    SkipUntilOperator.prototype.call = function (destination, source) {\n        return source.subscribe(new SkipUntilSubscriber(destination, this.notifier));\n    };\n    return SkipUntilOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SkipUntilSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(SkipUntilSubscriber, _super);\n    function SkipUntilSubscriber(destination, notifier) {\n        var _this = _super.call(this, destination) || this;\n        _this.hasValue = false;\n        _this.add(_this.innerSubscription = subscribeToResult(_this, notifier));\n        return _this;\n    }\n    SkipUntilSubscriber.prototype._next = function (value) {\n        if (this.hasValue) {\n            _super.prototype._next.call(this, value);\n        }\n    };\n    SkipUntilSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.hasValue = true;\n        if (this.innerSubscription) {\n            this.innerSubscription.unsubscribe();\n        }\n    };\n    SkipUntilSubscriber.prototype.notifyComplete = function () {\n        /* do nothing */\n    };\n    return SkipUntilSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=skipUntil.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\n/**\n * Returns an Observable that skips all items emitted by the source Observable as long as a specified condition holds\n * true, but emits all further source items as soon as the condition becomes false.\n *\n * <img src=\"./img/skipWhile.png\" width=\"100%\">\n *\n * @param {Function} predicate - A function to test each item emitted from the source Observable.\n * @return {Observable<T>} An Observable that begins emitting items emitted by the source Observable when the\n * specified predicate becomes false.\n * @method skipWhile\n * @owner Observable\n */\nexport function skipWhile(predicate) {\n    return function (source) { return source.lift(new SkipWhileOperator(predicate)); };\n}\nvar SkipWhileOperator = /*@__PURE__*/ (function () {\n    function SkipWhileOperator(predicate) {\n        this.predicate = predicate;\n    }\n    SkipWhileOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new SkipWhileSubscriber(subscriber, this.predicate));\n    };\n    return SkipWhileOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SkipWhileSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(SkipWhileSubscriber, _super);\n    function SkipWhileSubscriber(destination, predicate) {\n        var _this = _super.call(this, destination) || this;\n        _this.predicate = predicate;\n        _this.skipping = true;\n        _this.index = 0;\n        return _this;\n    }\n    SkipWhileSubscriber.prototype._next = function (value) {\n        var destination = this.destination;\n        if (this.skipping) {\n            this.tryCallPredicate(value);\n        }\n        if (!this.skipping) {\n            destination.next(value);\n        }\n    };\n    SkipWhileSubscriber.prototype.tryCallPredicate = function (value) {\n        try {\n            var result = this.predicate(value, this.index++);\n            this.skipping = Boolean(result);\n        }\n        catch (err) {\n            this.destination.error(err);\n        }\n    };\n    return SkipWhileSubscriber;\n}(Subscriber));\n//# sourceMappingURL=skipWhile.js.map\n","/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nvar nextHandle = 1;\nvar tasksByHandle = {};\nfunction runIfPresent(handle) {\n    var cb = tasksByHandle[handle];\n    if (cb) {\n        cb();\n    }\n}\nexport var Immediate = {\n    setImmediate: function (cb) {\n        var handle = nextHandle++;\n        tasksByHandle[handle] = cb;\n        Promise.resolve().then(function () { return runIfPresent(handle); });\n        return handle;\n    },\n    clearImmediate: function (handle) {\n        delete tasksByHandle[handle];\n    },\n};\n//# sourceMappingURL=Immediate.js.map\n","/** PURE_IMPORTS_START tslib,_util_Immediate,_AsyncAction PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Immediate } from '../util/Immediate';\nimport { AsyncAction } from './AsyncAction';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar AsapAction = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(AsapAction, _super);\n    function AsapAction(scheduler, work) {\n        var _this = _super.call(this, scheduler, work) || this;\n        _this.scheduler = scheduler;\n        _this.work = work;\n        return _this;\n    }\n    AsapAction.prototype.requestAsyncId = function (scheduler, id, delay) {\n        if (delay === void 0) {\n            delay = 0;\n        }\n        // If delay is greater than 0, request as an async action.\n        if (delay !== null && delay > 0) {\n            return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);\n        }\n        // Push the action to the end of the scheduler queue.\n        scheduler.actions.push(this);\n        // If a microtask has already been scheduled, don't schedule another\n        // one. If a microtask hasn't been scheduled yet, schedule one now. Return\n        // the current scheduled microtask id.\n        return scheduler.scheduled || (scheduler.scheduled = Immediate.setImmediate(scheduler.flush.bind(scheduler, null)));\n    };\n    AsapAction.prototype.recycleAsyncId = function (scheduler, id, delay) {\n        if (delay === void 0) {\n            delay = 0;\n        }\n        // If delay exists and is greater than 0, or if the delay is null (the\n        // action wasn't rescheduled) but was originally scheduled as an async\n        // action, then recycle as an async action.\n        if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {\n            return _super.prototype.recycleAsyncId.call(this, scheduler, id, delay);\n        }\n        // If the scheduler queue is empty, cancel the requested microtask and\n        // set the scheduled flag to undefined so the next AsapAction will schedule\n        // its own.\n        if (scheduler.actions.length === 0) {\n            Immediate.clearImmediate(id);\n            scheduler.scheduled = undefined;\n        }\n        // Return undefined so the action knows to request a new async id if it's rescheduled.\n        return undefined;\n    };\n    return AsapAction;\n}(AsyncAction));\nexport { AsapAction };\n//# sourceMappingURL=AsapAction.js.map\n","/** PURE_IMPORTS_START tslib,_AsyncScheduler PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { AsyncScheduler } from './AsyncScheduler';\nvar AsapScheduler = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(AsapScheduler, _super);\n    function AsapScheduler() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    AsapScheduler.prototype.flush = function (action) {\n        this.active = true;\n        this.scheduled = undefined;\n        var actions = this.actions;\n        var error;\n        var index = -1;\n        var count = actions.length;\n        action = action || actions.shift();\n        do {\n            if (error = action.execute(action.state, action.delay)) {\n                break;\n            }\n        } while (++index < count && (action = actions.shift()));\n        this.active = false;\n        if (error) {\n            while (++index < count && (action = actions.shift())) {\n                action.unsubscribe();\n            }\n            throw error;\n        }\n    };\n    return AsapScheduler;\n}(AsyncScheduler));\nexport { AsapScheduler };\n//# sourceMappingURL=AsapScheduler.js.map\n","/** PURE_IMPORTS_START _AsapAction,_AsapScheduler PURE_IMPORTS_END */\nimport { AsapAction } from './AsapAction';\nimport { AsapScheduler } from './AsapScheduler';\n/**\n *\n * Asap Scheduler\n *\n * <span class=\"informal\">Perform task as fast as it can be performed asynchronously</span>\n *\n * `asap` scheduler behaves the same as {@link async} scheduler when you use it to delay task\n * in time. If however you set delay to `0`, `asap` will wait for current synchronously executing\n * code to end and then it will try to execute given task as fast as possible.\n *\n * `asap` scheduler will do its best to minimize time between end of currently executing code\n * and start of scheduled task. This makes it best candidate for performing so called \"deferring\".\n * Traditionally this was achieved by calling `setTimeout(deferredTask, 0)`, but that technique involves\n * some (although minimal) unwanted delay.\n *\n * Note that using `asap` scheduler does not necessarily mean that your task will be first to process\n * after currently executing code. In particular, if some task was also scheduled with `asap` before,\n * that task will execute first. That being said, if you need to schedule task asynchronously, but\n * as soon as possible, `asap` scheduler is your best bet.\n *\n * @example <caption>Compare async and asap scheduler</caption>\n *\n * Rx.Scheduler.async.schedule(() => console.log('async')); // scheduling 'async' first...\n * Rx.Scheduler.asap.schedule(() => console.log('asap'));\n *\n * // Logs:\n * // \"asap\"\n * // \"async\"\n * // ... but 'asap' goes first!\n *\n * @static true\n * @name asap\n * @owner Scheduler\n */\nexport var asap = /*@__PURE__*/ new AsapScheduler(AsapAction);\n//# sourceMappingURL=asap.js.map\n","/** PURE_IMPORTS_START tslib,_Observable,_scheduler_asap,_util_isNumeric PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Observable } from '../Observable';\nimport { asap } from '../scheduler/asap';\nimport { isNumeric } from '../util/isNumeric';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar SubscribeOnObservable = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(SubscribeOnObservable, _super);\n    function SubscribeOnObservable(source, delayTime, scheduler) {\n        if (delayTime === void 0) {\n            delayTime = 0;\n        }\n        if (scheduler === void 0) {\n            scheduler = asap;\n        }\n        var _this = _super.call(this) || this;\n        _this.source = source;\n        _this.delayTime = delayTime;\n        _this.scheduler = scheduler;\n        if (!isNumeric(delayTime) || delayTime < 0) {\n            _this.delayTime = 0;\n        }\n        if (!scheduler || typeof scheduler.schedule !== 'function') {\n            _this.scheduler = asap;\n        }\n        return _this;\n    }\n    /** @nocollapse */\n    SubscribeOnObservable.create = function (source, delay, scheduler) {\n        if (delay === void 0) {\n            delay = 0;\n        }\n        if (scheduler === void 0) {\n            scheduler = asap;\n        }\n        return new SubscribeOnObservable(source, delay, scheduler);\n    };\n    /** @nocollapse */\n    SubscribeOnObservable.dispatch = function (arg) {\n        var source = arg.source, subscriber = arg.subscriber;\n        return this.add(source.subscribe(subscriber));\n    };\n    /** @deprecated This is an internal implementation detail, do not use. */\n    SubscribeOnObservable.prototype._subscribe = function (subscriber) {\n        var delay = this.delayTime;\n        var source = this.source;\n        var scheduler = this.scheduler;\n        return scheduler.schedule(SubscribeOnObservable.dispatch, delay, {\n            source: source, subscriber: subscriber\n        });\n    };\n    return SubscribeOnObservable;\n}(Observable));\nexport { SubscribeOnObservable };\n//# sourceMappingURL=SubscribeOnObservable.js.map\n","/** PURE_IMPORTS_START tslib,_OuterSubscriber,_util_subscribeToResult,_map,_observable_from PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { map } from './map';\nimport { from } from '../observable/from';\n/* tslint:enable:max-line-length */\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, emitting values only from the most recently projected Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link switch}.</span>\n *\n * <img src=\"./img/switchMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each time it observes one of these\n * inner Observables, the output Observable begins emitting the items emitted by\n * that inner Observable. When a new inner Observable is emitted, `switchMap`\n * stops emitting items from the earlier-emitted inner Observable and begins\n * emitting items from the new one. It continues to behave like this for\n * subsequent inner Observables.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.switchMap((ev) => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switch}\n * @see {@link switchMapTo}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and taking only the values from the most recently\n * projected inner Observable.\n * @method switchMap\n * @owner Observable\n */\nexport function switchMap(project, resultSelector) {\n    if (typeof resultSelector === 'function') {\n        return function (source) { return source.pipe(switchMap(function (a, i) { return from(project(a, i)).pipe(map(function (b, ii) { return resultSelector(a, b, i, ii); })); })); };\n    }\n    return function (source) { return source.lift(new SwitchMapOperator(project)); };\n}\nvar SwitchMapOperator = /*@__PURE__*/ (function () {\n    function SwitchMapOperator(project) {\n        this.project = project;\n    }\n    SwitchMapOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new SwitchMapSubscriber(subscriber, this.project));\n    };\n    return SwitchMapOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SwitchMapSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(SwitchMapSubscriber, _super);\n    function SwitchMapSubscriber(destination, project) {\n        var _this = _super.call(this, destination) || this;\n        _this.project = project;\n        _this.index = 0;\n        return _this;\n    }\n    SwitchMapSubscriber.prototype._next = function (value) {\n        var result;\n        var index = this.index++;\n        try {\n            result = this.project(value, index);\n        }\n        catch (error) {\n            this.destination.error(error);\n            return;\n        }\n        this._innerSub(result, value, index);\n    };\n    SwitchMapSubscriber.prototype._innerSub = function (result, value, index) {\n        var innerSubscription = this.innerSubscription;\n        if (innerSubscription) {\n            innerSubscription.unsubscribe();\n        }\n        this.add(this.innerSubscription = subscribeToResult(this, result, value, index));\n    };\n    SwitchMapSubscriber.prototype._complete = function () {\n        var innerSubscription = this.innerSubscription;\n        if (!innerSubscription || innerSubscription.closed) {\n            _super.prototype._complete.call(this);\n        }\n    };\n    SwitchMapSubscriber.prototype._unsubscribe = function () {\n        this.innerSubscription = null;\n    };\n    SwitchMapSubscriber.prototype.notifyComplete = function (innerSub) {\n        this.remove(innerSub);\n        this.innerSubscription = null;\n        if (this.isStopped) {\n            _super.prototype._complete.call(this);\n        }\n    };\n    SwitchMapSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.destination.next(innerValue);\n    };\n    return SwitchMapSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=switchMap.js.map\n","/** PURE_IMPORTS_START tslib,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n/**\n * Emits the values emitted by the source Observable until a `notifier`\n * Observable emits a value.\n *\n * <span class=\"informal\">Lets values pass until a second Observable,\n * `notifier`, emits a value. Then, it completes.</span>\n *\n * <img src=\"./img/takeUntil.png\" width=\"100%\">\n *\n * `takeUntil` subscribes and begins mirroring the source Observable. It also\n * monitors a second Observable, `notifier` that you provide. If the `notifier`\n * emits a value, the output Observable stops mirroring the source Observable\n * and completes. If the `notifier` doesn't emit any value and completes\n * then `takeUntil` will pass all values.\n *\n * @example <caption>Tick every second until the first click happens</caption>\n * var interval = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = interval.takeUntil(clicks);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @param {Observable} notifier The Observable whose first emitted value will\n * cause the output Observable of `takeUntil` to stop emitting values from the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable until such time as `notifier` emits its first value.\n * @method takeUntil\n * @owner Observable\n */\nexport function takeUntil(notifier) {\n    return function (source) { return source.lift(new TakeUntilOperator(notifier)); };\n}\nvar TakeUntilOperator = /*@__PURE__*/ (function () {\n    function TakeUntilOperator(notifier) {\n        this.notifier = notifier;\n    }\n    TakeUntilOperator.prototype.call = function (subscriber, source) {\n        var takeUntilSubscriber = new TakeUntilSubscriber(subscriber);\n        var notifierSubscription = subscribeToResult(takeUntilSubscriber, this.notifier);\n        if (notifierSubscription && !notifierSubscription.closed) {\n            takeUntilSubscriber.add(notifierSubscription);\n            return source.subscribe(takeUntilSubscriber);\n        }\n        return takeUntilSubscriber;\n    };\n    return TakeUntilOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar TakeUntilSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(TakeUntilSubscriber, _super);\n    function TakeUntilSubscriber(destination) {\n        return _super.call(this, destination) || this;\n    }\n    TakeUntilSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.complete();\n    };\n    TakeUntilSubscriber.prototype.notifyComplete = function () {\n        // noop\n    };\n    return TakeUntilSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=takeUntil.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\n/**\n * Emits values emitted by the source Observable so long as each value satisfies\n * the given `predicate`, and then completes as soon as this `predicate` is not\n * satisfied.\n *\n * <span class=\"informal\">Takes values from the source only while they pass the\n * condition given. When the first value does not satisfy, it completes.</span>\n *\n * <img src=\"./img/takeWhile.png\" width=\"100%\">\n *\n * `takeWhile` subscribes and begins mirroring the source Observable. Each value\n * emitted on the source is given to the `predicate` function which returns a\n * boolean, representing a condition to be satisfied by the source values. The\n * output Observable emits the source values until such time as the `predicate`\n * returns false, at which point `takeWhile` stops mirroring the source\n * Observable and completes the output Observable.\n *\n * @example <caption>Emit click events only while the clientX property is greater than 200</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.takeWhile(ev => ev.clientX > 200);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates a value emitted by the source Observable and returns a boolean.\n * Also takes the (zero-based) index as the second argument.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable so long as each value satisfies the condition defined by the\n * `predicate`, then completes.\n * @method takeWhile\n * @owner Observable\n */\nexport function takeWhile(predicate) {\n    return function (source) { return source.lift(new TakeWhileOperator(predicate)); };\n}\nvar TakeWhileOperator = /*@__PURE__*/ (function () {\n    function TakeWhileOperator(predicate) {\n        this.predicate = predicate;\n    }\n    TakeWhileOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new TakeWhileSubscriber(subscriber, this.predicate));\n    };\n    return TakeWhileOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar TakeWhileSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(TakeWhileSubscriber, _super);\n    function TakeWhileSubscriber(destination, predicate) {\n        var _this = _super.call(this, destination) || this;\n        _this.predicate = predicate;\n        _this.index = 0;\n        return _this;\n    }\n    TakeWhileSubscriber.prototype._next = function (value) {\n        var destination = this.destination;\n        var result;\n        try {\n            result = this.predicate(value, this.index++);\n        }\n        catch (err) {\n            destination.error(err);\n            return;\n        }\n        this.nextOrComplete(value, result);\n    };\n    TakeWhileSubscriber.prototype.nextOrComplete = function (value, predicateResult) {\n        var destination = this.destination;\n        if (Boolean(predicateResult)) {\n            destination.next(value);\n        }\n        else {\n            destination.complete();\n        }\n    };\n    return TakeWhileSubscriber;\n}(Subscriber));\n//# sourceMappingURL=takeWhile.js.map\n","/** PURE_IMPORTS_START tslib,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nexport var defaultThrottleConfig = {\n    leading: true,\n    trailing: false\n};\n/**\n * Emits a value from the source Observable, then ignores subsequent source\n * values for a duration determined by another Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link throttleTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/throttle.png\" width=\"100%\">\n *\n * `throttle` emits the source Observable values on the output Observable\n * when its internal timer is disabled, and ignores source values when the timer\n * is enabled. Initially, the timer is disabled. As soon as the first source\n * value arrives, it is forwarded to the output Observable, and then the timer\n * is enabled by calling the `durationSelector` function with the source value,\n * which returns the \"duration\" Observable. When the duration Observable emits a\n * value or completes, the timer is disabled, and this process repeats for the\n * next source value.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.throttle(ev => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttleTime}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration for each source value, returned as an Observable or a Promise.\n * @param {Object} config a configuration object to define `leading` and `trailing` behavior. Defaults\n * to `{ leading: true, trailing: false }`.\n * @return {Observable<T>} An Observable that performs the throttle operation to\n * limit the rate of emissions from the source.\n * @method throttle\n * @owner Observable\n */\nexport function throttle(durationSelector, config) {\n    if (config === void 0) {\n        config = defaultThrottleConfig;\n    }\n    return function (source) { return source.lift(new ThrottleOperator(durationSelector, config.leading, config.trailing)); };\n}\nvar ThrottleOperator = /*@__PURE__*/ (function () {\n    function ThrottleOperator(durationSelector, leading, trailing) {\n        this.durationSelector = durationSelector;\n        this.leading = leading;\n        this.trailing = trailing;\n    }\n    ThrottleOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new ThrottleSubscriber(subscriber, this.durationSelector, this.leading, this.trailing));\n    };\n    return ThrottleOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc\n * @ignore\n * @extends {Ignored}\n */\nvar ThrottleSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(ThrottleSubscriber, _super);\n    function ThrottleSubscriber(destination, durationSelector, _leading, _trailing) {\n        var _this = _super.call(this, destination) || this;\n        _this.destination = destination;\n        _this.durationSelector = durationSelector;\n        _this._leading = _leading;\n        _this._trailing = _trailing;\n        _this._hasValue = false;\n        return _this;\n    }\n    ThrottleSubscriber.prototype._next = function (value) {\n        this._hasValue = true;\n        this._sendValue = value;\n        if (!this._throttled) {\n            if (this._leading) {\n                this.send();\n            }\n            else {\n                this.throttle(value);\n            }\n        }\n    };\n    ThrottleSubscriber.prototype.send = function () {\n        var _a = this, _hasValue = _a._hasValue, _sendValue = _a._sendValue;\n        if (_hasValue) {\n            this.destination.next(_sendValue);\n            this.throttle(_sendValue);\n        }\n        this._hasValue = false;\n        this._sendValue = null;\n    };\n    ThrottleSubscriber.prototype.throttle = function (value) {\n        var duration = this.tryDurationSelector(value);\n        if (duration) {\n            this.add(this._throttled = subscribeToResult(this, duration));\n        }\n    };\n    ThrottleSubscriber.prototype.tryDurationSelector = function (value) {\n        try {\n            return this.durationSelector(value);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return null;\n        }\n    };\n    ThrottleSubscriber.prototype.throttlingDone = function () {\n        var _a = this, _throttled = _a._throttled, _trailing = _a._trailing;\n        if (_throttled) {\n            _throttled.unsubscribe();\n        }\n        this._throttled = null;\n        if (_trailing) {\n            this.send();\n        }\n    };\n    ThrottleSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.throttlingDone();\n    };\n    ThrottleSubscriber.prototype.notifyComplete = function () {\n        this.throttlingDone();\n    };\n    return ThrottleSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=throttle.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber,_scheduler_async,_throttle PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nimport { async } from '../scheduler/async';\nimport { defaultThrottleConfig } from './throttle';\n/**\n * Emits a value from the source Observable, then ignores subsequent source\n * values for `duration` milliseconds, then repeats this process.\n *\n * <span class=\"informal\">Lets a value pass, then ignores source values for the\n * next `duration` milliseconds.</span>\n *\n * <img src=\"./img/throttleTime.png\" width=\"100%\">\n *\n * `throttleTime` emits the source Observable values on the output Observable\n * when its internal timer is disabled, and ignores source values when the timer\n * is enabled. Initially, the timer is disabled. As soon as the first source\n * value arrives, it is forwarded to the output Observable, and then the timer\n * is enabled. After `duration` milliseconds (or the time unit determined\n * internally by the optional `scheduler`) has passed, the timer is disabled,\n * and this process repeats for the next source value. Optionally takes a\n * {@link IScheduler} for managing timers.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.throttleTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param {number} duration Time to wait before emitting another value after\n * emitting the last value, measured in milliseconds or the time unit determined\n * internally by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the throttling.\n * @param {Object} config a configuration object to define `leading` and\n * `trailing` behavior. Defaults to `{ leading: true, trailing: false }`.\n * @return {Observable<T>} An Observable that performs the throttle operation to\n * limit the rate of emissions from the source.\n * @method throttleTime\n * @owner Observable\n */\nexport function throttleTime(duration, scheduler, config) {\n    if (scheduler === void 0) {\n        scheduler = async;\n    }\n    if (config === void 0) {\n        config = defaultThrottleConfig;\n    }\n    return function (source) { return source.lift(new ThrottleTimeOperator(duration, scheduler, config.leading, config.trailing)); };\n}\nvar ThrottleTimeOperator = /*@__PURE__*/ (function () {\n    function ThrottleTimeOperator(duration, scheduler, leading, trailing) {\n        this.duration = duration;\n        this.scheduler = scheduler;\n        this.leading = leading;\n        this.trailing = trailing;\n    }\n    ThrottleTimeOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new ThrottleTimeSubscriber(subscriber, this.duration, this.scheduler, this.leading, this.trailing));\n    };\n    return ThrottleTimeOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar ThrottleTimeSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(ThrottleTimeSubscriber, _super);\n    function ThrottleTimeSubscriber(destination, duration, scheduler, leading, trailing) {\n        var _this = _super.call(this, destination) || this;\n        _this.duration = duration;\n        _this.scheduler = scheduler;\n        _this.leading = leading;\n        _this.trailing = trailing;\n        _this._hasTrailingValue = false;\n        _this._trailingValue = null;\n        return _this;\n    }\n    ThrottleTimeSubscriber.prototype._next = function (value) {\n        if (this.throttled) {\n            if (this.trailing) {\n                this._trailingValue = value;\n                this._hasTrailingValue = true;\n            }\n        }\n        else {\n            this.add(this.throttled = this.scheduler.schedule(dispatchNext, this.duration, { subscriber: this }));\n            if (this.leading) {\n                this.destination.next(value);\n            }\n        }\n    };\n    ThrottleTimeSubscriber.prototype._complete = function () {\n        if (this._hasTrailingValue) {\n            this.destination.next(this._trailingValue);\n            this.destination.complete();\n        }\n        else {\n            this.destination.complete();\n        }\n    };\n    ThrottleTimeSubscriber.prototype.clearThrottle = function () {\n        var throttled = this.throttled;\n        if (throttled) {\n            if (this.trailing && this._hasTrailingValue) {\n                this.destination.next(this._trailingValue);\n                this._trailingValue = null;\n                this._hasTrailingValue = false;\n            }\n            throttled.unsubscribe();\n            this.remove(throttled);\n            this.throttled = null;\n        }\n    };\n    return ThrottleTimeSubscriber;\n}(Subscriber));\nfunction dispatchNext(arg) {\n    var subscriber = arg.subscriber;\n    subscriber.clearThrottle();\n}\n//# sourceMappingURL=throttleTime.js.map\n","/** PURE_IMPORTS_START tslib PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\n/**\n * An error thrown when duetime elapses.\n *\n * @see {@link timeout}\n *\n * @class TimeoutError\n */\nvar TimeoutError = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(TimeoutError, _super);\n    function TimeoutError() {\n        var _this = _super.call(this, 'Timeout has occurred') || this;\n        _this.name = 'TimeoutError';\n        Object.setPrototypeOf(_this, TimeoutError.prototype);\n        return _this;\n    }\n    return TimeoutError;\n}(Error));\nexport { TimeoutError };\n//# sourceMappingURL=TimeoutError.js.map\n","/** PURE_IMPORTS_START tslib,_scheduler_async,_util_isDate,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { async } from '../scheduler/async';\nimport { isDate } from '../util/isDate';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n/* tslint:enable:max-line-length */\n/**\n *\n * Errors if Observable does not emit a value in given time span, in case of which\n * subscribes to the second Observable.\n *\n * <span class=\"informal\">It's a version of `timeout` operator that let's you specify fallback Observable.</span>\n *\n * <img src=\"./img/timeoutWith.png\" width=\"100%\">\n *\n * `timeoutWith` is a variation of `timeout` operator. It behaves exactly the same,\n * still accepting as a first argument either a number or a Date, which control - respectively -\n * when values of source Observable should be emitted or when it should complete.\n *\n * The only difference is that it accepts a second, required parameter. This parameter\n * should be an Observable which will be subscribed when source Observable fails any timeout check.\n * So whenever regular `timeout` would emit an error, `timeoutWith` will instead start re-emitting\n * values from second Observable. Note that this fallback Observable is not checked for timeouts\n * itself, so it can emit values and complete at arbitrary points in time. From the moment of a second\n * subscription, Observable returned from `timeoutWith` simply mirrors fallback stream. When that\n * stream completes, it completes as well.\n *\n * Scheduler, which in case of `timeout` is provided as as second argument, can be still provided\n * here - as a third, optional parameter. It still is used to schedule timeout checks and -\n * as a consequence - when second Observable will be subscribed, since subscription happens\n * immediately after failing check.\n *\n * @example <caption>Add fallback observable</caption>\n * const seconds = Rx.Observable.interval(1000);\n * const minutes = Rx.Observable.interval(60 * 1000);\n *\n * seconds.timeoutWith(900, minutes)\n *     .subscribe(\n *         value => console.log(value), // After 900ms, will start emitting `minutes`,\n *                                      // since first value of `seconds` will not arrive fast enough.\n *         err => console.log(err) // Would be called after 900ms in case of `timeout`,\n *                                 // but here will never be called.\n *     );\n *\n * @param {number|Date} due Number specifying period within which Observable must emit values\n *                          or Date specifying before when Observable should complete\n * @param {Observable<T>} withObservable Observable which will be subscribed if source fails timeout check.\n * @param {Scheduler} [scheduler] Scheduler controlling when timeout checks occur.\n * @return {Observable<T>} Observable that mirrors behaviour of source or, when timeout check fails, of an Observable\n *                          passed as a second parameter.\n * @method timeoutWith\n * @owner Observable\n */\nexport function timeoutWith(due, withObservable, scheduler) {\n    if (scheduler === void 0) {\n        scheduler = async;\n    }\n    return function (source) {\n        var absoluteTimeout = isDate(due);\n        var waitFor = absoluteTimeout ? (+due - scheduler.now()) : Math.abs(due);\n        return source.lift(new TimeoutWithOperator(waitFor, absoluteTimeout, withObservable, scheduler));\n    };\n}\nvar TimeoutWithOperator = /*@__PURE__*/ (function () {\n    function TimeoutWithOperator(waitFor, absoluteTimeout, withObservable, scheduler) {\n        this.waitFor = waitFor;\n        this.absoluteTimeout = absoluteTimeout;\n        this.withObservable = withObservable;\n        this.scheduler = scheduler;\n    }\n    TimeoutWithOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new TimeoutWithSubscriber(subscriber, this.absoluteTimeout, this.waitFor, this.withObservable, this.scheduler));\n    };\n    return TimeoutWithOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar TimeoutWithSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(TimeoutWithSubscriber, _super);\n    function TimeoutWithSubscriber(destination, absoluteTimeout, waitFor, withObservable, scheduler) {\n        var _this = _super.call(this, destination) || this;\n        _this.absoluteTimeout = absoluteTimeout;\n        _this.waitFor = waitFor;\n        _this.withObservable = withObservable;\n        _this.scheduler = scheduler;\n        _this.action = null;\n        _this.scheduleTimeout();\n        return _this;\n    }\n    TimeoutWithSubscriber.dispatchTimeout = function (subscriber) {\n        var withObservable = subscriber.withObservable;\n        subscriber._unsubscribeAndRecycle();\n        subscriber.add(subscribeToResult(subscriber, withObservable));\n    };\n    TimeoutWithSubscriber.prototype.scheduleTimeout = function () {\n        var action = this.action;\n        if (action) {\n            // Recycle the action if we've already scheduled one. All the production\n            // Scheduler Actions mutate their state/delay time and return themeselves.\n            // VirtualActions are immutable, so they create and return a clone. In this\n            // case, we need to set the action reference to the most recent VirtualAction,\n            // to ensure that's the one we clone from next time.\n            this.action = action.schedule(this, this.waitFor);\n        }\n        else {\n            this.add(this.action = this.scheduler.schedule(TimeoutWithSubscriber.dispatchTimeout, this.waitFor, this));\n        }\n    };\n    TimeoutWithSubscriber.prototype._next = function (value) {\n        if (!this.absoluteTimeout) {\n            this.scheduleTimeout();\n        }\n        _super.prototype._next.call(this, value);\n    };\n    /** @deprecated This is an internal implementation detail, do not use. */\n    TimeoutWithSubscriber.prototype._unsubscribe = function () {\n        this.action = null;\n        this.scheduler = null;\n        this.withObservable = null;\n    };\n    return TimeoutWithSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=timeoutWith.js.map\n","/** PURE_IMPORTS_START tslib,_Subject,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subject } from '../Subject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n/**\n * Branch out the source Observable values as a nested Observable whenever\n * `windowBoundaries` emits.\n *\n * <span class=\"informal\">It's like {@link buffer}, but emits a nested Observable\n * instead of an array.</span>\n *\n * <img src=\"./img/window.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits connected, non-overlapping\n * windows. It emits the current window and opens a new one whenever the\n * Observable `windowBoundaries` emits an item. Because each window is an\n * Observable, the output is a higher-order Observable.\n *\n * @example <caption>In every window of 1 second each, emit at most 2 click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var interval = Rx.Observable.interval(1000);\n * var result = clicks.window(interval)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link buffer}\n *\n * @param {Observable<any>} windowBoundaries An Observable that completes the\n * previous window and starts a new window.\n * @return {Observable<Observable<T>>} An Observable of windows, which are\n * Observables emitting values of the source Observable.\n * @method window\n * @owner Observable\n */\nexport function window(windowBoundaries) {\n    return function windowOperatorFunction(source) {\n        return source.lift(new WindowOperator(windowBoundaries));\n    };\n}\nvar WindowOperator = /*@__PURE__*/ (function () {\n    function WindowOperator(windowBoundaries) {\n        this.windowBoundaries = windowBoundaries;\n    }\n    WindowOperator.prototype.call = function (subscriber, source) {\n        var windowSubscriber = new WindowSubscriber(subscriber);\n        var sourceSubscription = source.subscribe(windowSubscriber);\n        if (!sourceSubscription.closed) {\n            windowSubscriber.add(subscribeToResult(windowSubscriber, this.windowBoundaries));\n        }\n        return sourceSubscription;\n    };\n    return WindowOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar WindowSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(WindowSubscriber, _super);\n    function WindowSubscriber(destination) {\n        var _this = _super.call(this, destination) || this;\n        _this.window = new Subject();\n        destination.next(_this.window);\n        return _this;\n    }\n    WindowSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.openWindow();\n    };\n    WindowSubscriber.prototype.notifyError = function (error, innerSub) {\n        this._error(error);\n    };\n    WindowSubscriber.prototype.notifyComplete = function (innerSub) {\n        this._complete();\n    };\n    WindowSubscriber.prototype._next = function (value) {\n        this.window.next(value);\n    };\n    WindowSubscriber.prototype._error = function (err) {\n        this.window.error(err);\n        this.destination.error(err);\n    };\n    WindowSubscriber.prototype._complete = function () {\n        this.window.complete();\n        this.destination.complete();\n    };\n    /** @deprecated This is an internal implementation detail, do not use. */\n    WindowSubscriber.prototype._unsubscribe = function () {\n        this.window = null;\n    };\n    WindowSubscriber.prototype.openWindow = function () {\n        var prevWindow = this.window;\n        if (prevWindow) {\n            prevWindow.complete();\n        }\n        var destination = this.destination;\n        var newWindow = this.window = new Subject();\n        destination.next(newWindow);\n    };\n    return WindowSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=window.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber,_Subject PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nimport { Subject } from '../Subject';\n/**\n * Branch out the source Observable values as a nested Observable with each\n * nested Observable emitting at most `windowSize` values.\n *\n * <span class=\"informal\">It's like {@link bufferCount}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowCount.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits windows every `startWindowEvery`\n * items, each containing no more than `windowSize` items. When the source\n * Observable completes or encounters an error, the output Observable emits\n * the current window and propagates the notification from the source\n * Observable. If `startWindowEvery` is not provided, then new windows are\n * started immediately at the start of the source and when each window completes\n * with size `windowSize`.\n *\n * @example <caption>Ignore every 3rd click event, starting from the first one</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowCount(3)\n *   .map(win => win.skip(1)) // skip first of every 3 clicks\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Ignore every 3rd click event, starting from the third one</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowCount(2, 3)\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link bufferCount}\n *\n * @param {number} windowSize The maximum number of values emitted by each\n * window.\n * @param {number} [startWindowEvery] Interval at which to start a new window.\n * For example if `startWindowEvery` is `2`, then a new window will be started\n * on every other value from the source. A new window is started at the\n * beginning of the source by default.\n * @return {Observable<Observable<T>>} An Observable of windows, which in turn\n * are Observable of values.\n * @method windowCount\n * @owner Observable\n */\nexport function windowCount(windowSize, startWindowEvery) {\n    if (startWindowEvery === void 0) {\n        startWindowEvery = 0;\n    }\n    return function windowCountOperatorFunction(source) {\n        return source.lift(new WindowCountOperator(windowSize, startWindowEvery));\n    };\n}\nvar WindowCountOperator = /*@__PURE__*/ (function () {\n    function WindowCountOperator(windowSize, startWindowEvery) {\n        this.windowSize = windowSize;\n        this.startWindowEvery = startWindowEvery;\n    }\n    WindowCountOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new WindowCountSubscriber(subscriber, this.windowSize, this.startWindowEvery));\n    };\n    return WindowCountOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar WindowCountSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(WindowCountSubscriber, _super);\n    function WindowCountSubscriber(destination, windowSize, startWindowEvery) {\n        var _this = _super.call(this, destination) || this;\n        _this.destination = destination;\n        _this.windowSize = windowSize;\n        _this.startWindowEvery = startWindowEvery;\n        _this.windows = [new Subject()];\n        _this.count = 0;\n        destination.next(_this.windows[0]);\n        return _this;\n    }\n    WindowCountSubscriber.prototype._next = function (value) {\n        var startWindowEvery = (this.startWindowEvery > 0) ? this.startWindowEvery : this.windowSize;\n        var destination = this.destination;\n        var windowSize = this.windowSize;\n        var windows = this.windows;\n        var len = windows.length;\n        for (var i = 0; i < len && !this.closed; i++) {\n            windows[i].next(value);\n        }\n        var c = this.count - windowSize + 1;\n        if (c >= 0 && c % startWindowEvery === 0 && !this.closed) {\n            windows.shift().complete();\n        }\n        if (++this.count % startWindowEvery === 0 && !this.closed) {\n            var window_1 = new Subject();\n            windows.push(window_1);\n            destination.next(window_1);\n        }\n    };\n    WindowCountSubscriber.prototype._error = function (err) {\n        var windows = this.windows;\n        if (windows) {\n            while (windows.length > 0 && !this.closed) {\n                windows.shift().error(err);\n            }\n        }\n        this.destination.error(err);\n    };\n    WindowCountSubscriber.prototype._complete = function () {\n        var windows = this.windows;\n        if (windows) {\n            while (windows.length > 0 && !this.closed) {\n                windows.shift().complete();\n            }\n        }\n        this.destination.complete();\n    };\n    WindowCountSubscriber.prototype._unsubscribe = function () {\n        this.count = 0;\n        this.windows = null;\n    };\n    return WindowCountSubscriber;\n}(Subscriber));\n//# sourceMappingURL=windowCount.js.map\n","/** PURE_IMPORTS_START tslib,_Subject,_scheduler_async,_Subscriber,_util_isNumeric,_util_isScheduler PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subject } from '../Subject';\nimport { async } from '../scheduler/async';\nimport { Subscriber } from '../Subscriber';\nimport { isNumeric } from '../util/isNumeric';\nimport { isScheduler } from '../util/isScheduler';\nexport function windowTime(windowTimeSpan) {\n    var scheduler = async;\n    var windowCreationInterval = null;\n    var maxWindowSize = Number.POSITIVE_INFINITY;\n    if (isScheduler(arguments[3])) {\n        scheduler = arguments[3];\n    }\n    if (isScheduler(arguments[2])) {\n        scheduler = arguments[2];\n    }\n    else if (isNumeric(arguments[2])) {\n        maxWindowSize = arguments[2];\n    }\n    if (isScheduler(arguments[1])) {\n        scheduler = arguments[1];\n    }\n    else if (isNumeric(arguments[1])) {\n        windowCreationInterval = arguments[1];\n    }\n    return function windowTimeOperatorFunction(source) {\n        return source.lift(new WindowTimeOperator(windowTimeSpan, windowCreationInterval, maxWindowSize, scheduler));\n    };\n}\nvar WindowTimeOperator = /*@__PURE__*/ (function () {\n    function WindowTimeOperator(windowTimeSpan, windowCreationInterval, maxWindowSize, scheduler) {\n        this.windowTimeSpan = windowTimeSpan;\n        this.windowCreationInterval = windowCreationInterval;\n        this.maxWindowSize = maxWindowSize;\n        this.scheduler = scheduler;\n    }\n    WindowTimeOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new WindowTimeSubscriber(subscriber, this.windowTimeSpan, this.windowCreationInterval, this.maxWindowSize, this.scheduler));\n    };\n    return WindowTimeOperator;\n}());\nvar CountedSubject = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(CountedSubject, _super);\n    function CountedSubject() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this._numberOfNextedValues = 0;\n        return _this;\n    }\n    CountedSubject.prototype.next = function (value) {\n        this._numberOfNextedValues++;\n        _super.prototype.next.call(this, value);\n    };\n    Object.defineProperty(CountedSubject.prototype, \"numberOfNextedValues\", {\n        get: function () {\n            return this._numberOfNextedValues;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return CountedSubject;\n}(Subject));\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar WindowTimeSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(WindowTimeSubscriber, _super);\n    function WindowTimeSubscriber(destination, windowTimeSpan, windowCreationInterval, maxWindowSize, scheduler) {\n        var _this = _super.call(this, destination) || this;\n        _this.destination = destination;\n        _this.windowTimeSpan = windowTimeSpan;\n        _this.windowCreationInterval = windowCreationInterval;\n        _this.maxWindowSize = maxWindowSize;\n        _this.scheduler = scheduler;\n        _this.windows = [];\n        var window = _this.openWindow();\n        if (windowCreationInterval !== null && windowCreationInterval >= 0) {\n            var closeState = { subscriber: _this, window: window, context: null };\n            var creationState = { windowTimeSpan: windowTimeSpan, windowCreationInterval: windowCreationInterval, subscriber: _this, scheduler: scheduler };\n            _this.add(scheduler.schedule(dispatchWindowClose, windowTimeSpan, closeState));\n            _this.add(scheduler.schedule(dispatchWindowCreation, windowCreationInterval, creationState));\n        }\n        else {\n            var timeSpanOnlyState = { subscriber: _this, window: window, windowTimeSpan: windowTimeSpan };\n            _this.add(scheduler.schedule(dispatchWindowTimeSpanOnly, windowTimeSpan, timeSpanOnlyState));\n        }\n        return _this;\n    }\n    WindowTimeSubscriber.prototype._next = function (value) {\n        var windows = this.windows;\n        var len = windows.length;\n        for (var i = 0; i < len; i++) {\n            var window_1 = windows[i];\n            if (!window_1.closed) {\n                window_1.next(value);\n                if (window_1.numberOfNextedValues >= this.maxWindowSize) {\n                    this.closeWindow(window_1);\n                }\n            }\n        }\n    };\n    WindowTimeSubscriber.prototype._error = function (err) {\n        var windows = this.windows;\n        while (windows.length > 0) {\n            windows.shift().error(err);\n        }\n        this.destination.error(err);\n    };\n    WindowTimeSubscriber.prototype._complete = function () {\n        var windows = this.windows;\n        while (windows.length > 0) {\n            var window_2 = windows.shift();\n            if (!window_2.closed) {\n                window_2.complete();\n            }\n        }\n        this.destination.complete();\n    };\n    WindowTimeSubscriber.prototype.openWindow = function () {\n        var window = new CountedSubject();\n        this.windows.push(window);\n        var destination = this.destination;\n        destination.next(window);\n        return window;\n    };\n    WindowTimeSubscriber.prototype.closeWindow = function (window) {\n        window.complete();\n        var windows = this.windows;\n        windows.splice(windows.indexOf(window), 1);\n    };\n    return WindowTimeSubscriber;\n}(Subscriber));\nfunction dispatchWindowTimeSpanOnly(state) {\n    var subscriber = state.subscriber, windowTimeSpan = state.windowTimeSpan, window = state.window;\n    if (window) {\n        subscriber.closeWindow(window);\n    }\n    state.window = subscriber.openWindow();\n    this.schedule(state, windowTimeSpan);\n}\nfunction dispatchWindowCreation(state) {\n    var windowTimeSpan = state.windowTimeSpan, subscriber = state.subscriber, scheduler = state.scheduler, windowCreationInterval = state.windowCreationInterval;\n    var window = subscriber.openWindow();\n    var action = this;\n    var context = { action: action, subscription: null };\n    var timeSpanState = { subscriber: subscriber, window: window, context: context };\n    context.subscription = scheduler.schedule(dispatchWindowClose, windowTimeSpan, timeSpanState);\n    action.add(context.subscription);\n    action.schedule(state, windowCreationInterval);\n}\nfunction dispatchWindowClose(state) {\n    var subscriber = state.subscriber, window = state.window, context = state.context;\n    if (context && context.action && context.subscription) {\n        context.action.remove(context.subscription);\n    }\n    subscriber.closeWindow(window);\n}\n//# sourceMappingURL=windowTime.js.map\n","/** PURE_IMPORTS_START tslib,_Subject,_Subscription,_util_tryCatch,_util_errorObject,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subject } from '../Subject';\nimport { Subscription } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n/**\n * Branch out the source Observable values as a nested Observable starting from\n * an emission from `openings` and ending when the output of `closingSelector`\n * emits.\n *\n * <span class=\"informal\">It's like {@link bufferToggle}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowToggle.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits windows that contain those items\n * emitted by the source Observable between the time when the `openings`\n * Observable emits an item and when the Observable returned by\n * `closingSelector` emits an item.\n *\n * @example <caption>Every other second, emit the click events from the next 500ms</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var openings = Rx.Observable.interval(1000);\n * var result = clicks.windowToggle(openings, i =>\n *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()\n * ).mergeAll();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowWhen}\n * @see {@link bufferToggle}\n *\n * @param {Observable<O>} openings An observable of notifications to start new\n * windows.\n * @param {function(value: O): Observable} closingSelector A function that takes\n * the value emitted by the `openings` observable and returns an Observable,\n * which, when it emits (either `next` or `complete`), signals that the\n * associated window should complete.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowToggle\n * @owner Observable\n */\nexport function windowToggle(openings, closingSelector) {\n    return function (source) { return source.lift(new WindowToggleOperator(openings, closingSelector)); };\n}\nvar WindowToggleOperator = /*@__PURE__*/ (function () {\n    function WindowToggleOperator(openings, closingSelector) {\n        this.openings = openings;\n        this.closingSelector = closingSelector;\n    }\n    WindowToggleOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new WindowToggleSubscriber(subscriber, this.openings, this.closingSelector));\n    };\n    return WindowToggleOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar WindowToggleSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(WindowToggleSubscriber, _super);\n    function WindowToggleSubscriber(destination, openings, closingSelector) {\n        var _this = _super.call(this, destination) || this;\n        _this.openings = openings;\n        _this.closingSelector = closingSelector;\n        _this.contexts = [];\n        _this.add(_this.openSubscription = subscribeToResult(_this, openings, openings));\n        return _this;\n    }\n    WindowToggleSubscriber.prototype._next = function (value) {\n        var contexts = this.contexts;\n        if (contexts) {\n            var len = contexts.length;\n            for (var i = 0; i < len; i++) {\n                contexts[i].window.next(value);\n            }\n        }\n    };\n    WindowToggleSubscriber.prototype._error = function (err) {\n        var contexts = this.contexts;\n        this.contexts = null;\n        if (contexts) {\n            var len = contexts.length;\n            var index = -1;\n            while (++index < len) {\n                var context_1 = contexts[index];\n                context_1.window.error(err);\n                context_1.subscription.unsubscribe();\n            }\n        }\n        _super.prototype._error.call(this, err);\n    };\n    WindowToggleSubscriber.prototype._complete = function () {\n        var contexts = this.contexts;\n        this.contexts = null;\n        if (contexts) {\n            var len = contexts.length;\n            var index = -1;\n            while (++index < len) {\n                var context_2 = contexts[index];\n                context_2.window.complete();\n                context_2.subscription.unsubscribe();\n            }\n        }\n        _super.prototype._complete.call(this);\n    };\n    /** @deprecated This is an internal implementation detail, do not use. */\n    WindowToggleSubscriber.prototype._unsubscribe = function () {\n        var contexts = this.contexts;\n        this.contexts = null;\n        if (contexts) {\n            var len = contexts.length;\n            var index = -1;\n            while (++index < len) {\n                var context_3 = contexts[index];\n                context_3.window.unsubscribe();\n                context_3.subscription.unsubscribe();\n            }\n        }\n    };\n    WindowToggleSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        if (outerValue === this.openings) {\n            var closingSelector = this.closingSelector;\n            var closingNotifier = tryCatch(closingSelector)(innerValue);\n            if (closingNotifier === errorObject) {\n                return this.error(errorObject.e);\n            }\n            else {\n                var window_1 = new Subject();\n                var subscription = new Subscription();\n                var context_4 = { window: window_1, subscription: subscription };\n                this.contexts.push(context_4);\n                var innerSubscription = subscribeToResult(this, closingNotifier, context_4);\n                if (innerSubscription.closed) {\n                    this.closeWindow(this.contexts.length - 1);\n                }\n                else {\n                    innerSubscription.context = context_4;\n                    subscription.add(innerSubscription);\n                }\n                this.destination.next(window_1);\n            }\n        }\n        else {\n            this.closeWindow(this.contexts.indexOf(outerValue));\n        }\n    };\n    WindowToggleSubscriber.prototype.notifyError = function (err) {\n        this.error(err);\n    };\n    WindowToggleSubscriber.prototype.notifyComplete = function (inner) {\n        if (inner !== this.openSubscription) {\n            this.closeWindow(this.contexts.indexOf(inner.context));\n        }\n    };\n    WindowToggleSubscriber.prototype.closeWindow = function (index) {\n        if (index === -1) {\n            return;\n        }\n        var contexts = this.contexts;\n        var context = contexts[index];\n        var window = context.window, subscription = context.subscription;\n        contexts.splice(index, 1);\n        window.complete();\n        subscription.unsubscribe();\n    };\n    return WindowToggleSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=windowToggle.js.map\n","/** PURE_IMPORTS_START tslib,_Subject,_util_tryCatch,_util_errorObject,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subject } from '../Subject';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n/**\n * Branch out the source Observable values as a nested Observable using a\n * factory function of closing Observables to determine when to start a new\n * window.\n *\n * <span class=\"informal\">It's like {@link bufferWhen}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowWhen.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits connected, non-overlapping windows.\n * It emits the current window and opens a new one whenever the Observable\n * produced by the specified `closingSelector` function emits an item. The first\n * window is opened immediately when subscribing to the output Observable.\n *\n * @example <caption>Emit only the first two clicks events in every window of [1-5] random seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks\n *   .windowWhen(() => Rx.Observable.interval(1000 + Math.random() * 4000))\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link bufferWhen}\n *\n * @param {function(): Observable} closingSelector A function that takes no\n * arguments and returns an Observable that signals (on either `next` or\n * `complete`) when to close the previous window and start a new one.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowWhen\n * @owner Observable\n */\nexport function windowWhen(closingSelector) {\n    return function windowWhenOperatorFunction(source) {\n        return source.lift(new WindowOperator(closingSelector));\n    };\n}\nvar WindowOperator = /*@__PURE__*/ (function () {\n    function WindowOperator(closingSelector) {\n        this.closingSelector = closingSelector;\n    }\n    WindowOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new WindowSubscriber(subscriber, this.closingSelector));\n    };\n    return WindowOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar WindowSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(WindowSubscriber, _super);\n    function WindowSubscriber(destination, closingSelector) {\n        var _this = _super.call(this, destination) || this;\n        _this.destination = destination;\n        _this.closingSelector = closingSelector;\n        _this.openWindow();\n        return _this;\n    }\n    WindowSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.openWindow(innerSub);\n    };\n    WindowSubscriber.prototype.notifyError = function (error, innerSub) {\n        this._error(error);\n    };\n    WindowSubscriber.prototype.notifyComplete = function (innerSub) {\n        this.openWindow(innerSub);\n    };\n    WindowSubscriber.prototype._next = function (value) {\n        this.window.next(value);\n    };\n    WindowSubscriber.prototype._error = function (err) {\n        this.window.error(err);\n        this.destination.error(err);\n        this.unsubscribeClosingNotification();\n    };\n    WindowSubscriber.prototype._complete = function () {\n        this.window.complete();\n        this.destination.complete();\n        this.unsubscribeClosingNotification();\n    };\n    WindowSubscriber.prototype.unsubscribeClosingNotification = function () {\n        if (this.closingNotification) {\n            this.closingNotification.unsubscribe();\n        }\n    };\n    WindowSubscriber.prototype.openWindow = function (innerSub) {\n        if (innerSub === void 0) {\n            innerSub = null;\n        }\n        if (innerSub) {\n            this.remove(innerSub);\n            innerSub.unsubscribe();\n        }\n        var prevWindow = this.window;\n        if (prevWindow) {\n            prevWindow.complete();\n        }\n        var window = this.window = new Subject();\n        this.destination.next(window);\n        var closingNotifier = tryCatch(this.closingSelector)();\n        if (closingNotifier === errorObject) {\n            var err = errorObject.e;\n            this.destination.error(err);\n            this.window.error(err);\n        }\n        else {\n            this.add(this.closingNotification = subscribeToResult(this, closingNotifier));\n        }\n    };\n    return WindowSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=windowWhen.js.map\n","/** PURE_IMPORTS_START tslib,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n/* tslint:enable:max-line-length */\n/**\n * Combines the source Observable with other Observables to create an Observable\n * whose values are calculated from the latest values of each, only when the\n * source emits.\n *\n * <span class=\"informal\">Whenever the source Observable emits a value, it\n * computes a formula using that value plus the latest values from other input\n * Observables, then emits the output of that formula.</span>\n *\n * <img src=\"./img/withLatestFrom.png\" width=\"100%\">\n *\n * `withLatestFrom` combines each value from the source Observable (the\n * instance) with the latest values from the other input Observables only when\n * the source emits a value, optionally using a `project` function to determine\n * the value to be emitted on the output Observable. All input Observables must\n * emit at least one value before the output Observable will emit a value.\n *\n * @example <caption>On every click event, emit an array with the latest timer event plus the click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var result = clicks.withLatestFrom(timer);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineLatest}\n *\n * @param {ObservableInput} other An input Observable to combine with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {Function} [project] Projection function for combining values\n * together. Receives all values in order of the Observables passed, where the\n * first parameter is a value from the source Observable. (e.g.\n * `a.withLatestFrom(b, c, (a1, b1, c1) => a1 + b1 + c1)`). If this is not\n * passed, arrays will be emitted on the output Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @method withLatestFrom\n * @owner Observable\n */\nexport function withLatestFrom() {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n    }\n    return function (source) {\n        var project;\n        if (typeof args[args.length - 1] === 'function') {\n            project = args.pop();\n        }\n        var observables = args;\n        return source.lift(new WithLatestFromOperator(observables, project));\n    };\n}\nvar WithLatestFromOperator = /*@__PURE__*/ (function () {\n    function WithLatestFromOperator(observables, project) {\n        this.observables = observables;\n        this.project = project;\n    }\n    WithLatestFromOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new WithLatestFromSubscriber(subscriber, this.observables, this.project));\n    };\n    return WithLatestFromOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar WithLatestFromSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(WithLatestFromSubscriber, _super);\n    function WithLatestFromSubscriber(destination, observables, project) {\n        var _this = _super.call(this, destination) || this;\n        _this.observables = observables;\n        _this.project = project;\n        _this.toRespond = [];\n        var len = observables.length;\n        _this.values = new Array(len);\n        for (var i = 0; i < len; i++) {\n            _this.toRespond.push(i);\n        }\n        for (var i = 0; i < len; i++) {\n            var observable = observables[i];\n            _this.add(subscribeToResult(_this, observable, observable, i));\n        }\n        return _this;\n    }\n    WithLatestFromSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.values[outerIndex] = innerValue;\n        var toRespond = this.toRespond;\n        if (toRespond.length > 0) {\n            var found = toRespond.indexOf(outerIndex);\n            if (found !== -1) {\n                toRespond.splice(found, 1);\n            }\n        }\n    };\n    WithLatestFromSubscriber.prototype.notifyComplete = function () {\n        // noop\n    };\n    WithLatestFromSubscriber.prototype._next = function (value) {\n        if (this.toRespond.length === 0) {\n            var args = [value].concat(this.values);\n            if (this.project) {\n                this._tryProject(args);\n            }\n            else {\n                this.destination.next(args);\n            }\n        }\n    };\n    WithLatestFromSubscriber.prototype._tryProject = function (args) {\n        var result;\n        try {\n            result = this.project.apply(this, args);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.destination.next(result);\n    };\n    return WithLatestFromSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=withLatestFrom.js.map\n","/** PURE_IMPORTS_START tslib,_fromArray,_util_isArray,_Subscriber,_OuterSubscriber,_util_subscribeToResult,_.._internal_symbol_iterator PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { fromArray } from './fromArray';\nimport { isArray } from '../util/isArray';\nimport { Subscriber } from '../Subscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { iterator as Symbol_iterator } from '../../internal/symbol/iterator';\n/* tslint:enable:max-line-length */\n/**\n * Combines multiple Observables to create an Observable whose values are calculated from the values, in order, of each\n * of its input Observables.\n *\n * If the latest parameter is a function, this function is used to compute the created value from the input values.\n * Otherwise, an array of the input values is returned.\n *\n * @example <caption>Combine age and name from different sources</caption>\n *\n * let age$ = Observable.of<number>(27, 25, 29);\n * let name$ = Observable.of<string>('Foo', 'Bar', 'Beer');\n * let isDev$ = Observable.of<boolean>(true, true, false);\n *\n * Observable\n *     .zip(age$,\n *          name$,\n *          isDev$,\n *          (age: number, name: string, isDev: boolean) => ({ age, name, isDev }))\n *     .subscribe(x => console.log(x));\n *\n * // outputs\n * // { age: 27, name: 'Foo', isDev: true }\n * // { age: 25, name: 'Bar', isDev: true }\n * // { age: 29, name: 'Beer', isDev: false }\n *\n * @param observables\n * @return {Observable<R>}\n * @static true\n * @name zip\n * @owner Observable\n */\nexport function zip() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i] = arguments[_i];\n    }\n    var resultSelector = observables[observables.length - 1];\n    if (typeof resultSelector === 'function') {\n        observables.pop();\n    }\n    return fromArray(observables, undefined).lift(new ZipOperator(resultSelector));\n}\nvar ZipOperator = /*@__PURE__*/ (function () {\n    function ZipOperator(resultSelector) {\n        this.resultSelector = resultSelector;\n    }\n    ZipOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new ZipSubscriber(subscriber, this.resultSelector));\n    };\n    return ZipOperator;\n}());\nexport { ZipOperator };\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar ZipSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(ZipSubscriber, _super);\n    function ZipSubscriber(destination, resultSelector, values) {\n        if (values === void 0) {\n            values = Object.create(null);\n        }\n        var _this = _super.call(this, destination) || this;\n        _this.iterators = [];\n        _this.active = 0;\n        _this.resultSelector = (typeof resultSelector === 'function') ? resultSelector : null;\n        _this.values = values;\n        return _this;\n    }\n    ZipSubscriber.prototype._next = function (value) {\n        var iterators = this.iterators;\n        if (isArray(value)) {\n            iterators.push(new StaticArrayIterator(value));\n        }\n        else if (typeof value[Symbol_iterator] === 'function') {\n            iterators.push(new StaticIterator(value[Symbol_iterator]()));\n        }\n        else {\n            iterators.push(new ZipBufferIterator(this.destination, this, value));\n        }\n    };\n    ZipSubscriber.prototype._complete = function () {\n        var iterators = this.iterators;\n        var len = iterators.length;\n        if (len === 0) {\n            this.destination.complete();\n            return;\n        }\n        this.active = len;\n        for (var i = 0; i < len; i++) {\n            var iterator = iterators[i];\n            if (iterator.stillUnsubscribed) {\n                this.add(iterator.subscribe(iterator, i));\n            }\n            else {\n                this.active--; // not an observable\n            }\n        }\n    };\n    ZipSubscriber.prototype.notifyInactive = function () {\n        this.active--;\n        if (this.active === 0) {\n            this.destination.complete();\n        }\n    };\n    ZipSubscriber.prototype.checkIterators = function () {\n        var iterators = this.iterators;\n        var len = iterators.length;\n        var destination = this.destination;\n        // abort if not all of them have values\n        for (var i = 0; i < len; i++) {\n            var iterator = iterators[i];\n            if (typeof iterator.hasValue === 'function' && !iterator.hasValue()) {\n                return;\n            }\n        }\n        var shouldComplete = false;\n        var args = [];\n        for (var i = 0; i < len; i++) {\n            var iterator = iterators[i];\n            var result = iterator.next();\n            // check to see if it's completed now that you've gotten\n            // the next value.\n            if (iterator.hasCompleted()) {\n                shouldComplete = true;\n            }\n            if (result.done) {\n                destination.complete();\n                return;\n            }\n            args.push(result.value);\n        }\n        if (this.resultSelector) {\n            this._tryresultSelector(args);\n        }\n        else {\n            destination.next(args);\n        }\n        if (shouldComplete) {\n            destination.complete();\n        }\n    };\n    ZipSubscriber.prototype._tryresultSelector = function (args) {\n        var result;\n        try {\n            result = this.resultSelector.apply(this, args);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.destination.next(result);\n    };\n    return ZipSubscriber;\n}(Subscriber));\nexport { ZipSubscriber };\nvar StaticIterator = /*@__PURE__*/ (function () {\n    function StaticIterator(iterator) {\n        this.iterator = iterator;\n        this.nextResult = iterator.next();\n    }\n    StaticIterator.prototype.hasValue = function () {\n        return true;\n    };\n    StaticIterator.prototype.next = function () {\n        var result = this.nextResult;\n        this.nextResult = this.iterator.next();\n        return result;\n    };\n    StaticIterator.prototype.hasCompleted = function () {\n        var nextResult = this.nextResult;\n        return nextResult && nextResult.done;\n    };\n    return StaticIterator;\n}());\nvar StaticArrayIterator = /*@__PURE__*/ (function () {\n    function StaticArrayIterator(array) {\n        this.array = array;\n        this.index = 0;\n        this.length = 0;\n        this.length = array.length;\n    }\n    StaticArrayIterator.prototype[Symbol_iterator] = function () {\n        return this;\n    };\n    StaticArrayIterator.prototype.next = function (value) {\n        var i = this.index++;\n        var array = this.array;\n        return i < this.length ? { value: array[i], done: false } : { value: null, done: true };\n    };\n    StaticArrayIterator.prototype.hasValue = function () {\n        return this.array.length > this.index;\n    };\n    StaticArrayIterator.prototype.hasCompleted = function () {\n        return this.array.length === this.index;\n    };\n    return StaticArrayIterator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar ZipBufferIterator = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(ZipBufferIterator, _super);\n    function ZipBufferIterator(destination, parent, observable) {\n        var _this = _super.call(this, destination) || this;\n        _this.parent = parent;\n        _this.observable = observable;\n        _this.stillUnsubscribed = true;\n        _this.buffer = [];\n        _this.isComplete = false;\n        return _this;\n    }\n    ZipBufferIterator.prototype[Symbol_iterator] = function () {\n        return this;\n    };\n    // NOTE: there is actually a name collision here with Subscriber.next and Iterator.next\n    //    this is legit because `next()` will never be called by a subscription in this case.\n    ZipBufferIterator.prototype.next = function () {\n        var buffer = this.buffer;\n        if (buffer.length === 0 && this.isComplete) {\n            return { value: null, done: true };\n        }\n        else {\n            return { value: buffer.shift(), done: false };\n        }\n    };\n    ZipBufferIterator.prototype.hasValue = function () {\n        return this.buffer.length > 0;\n    };\n    ZipBufferIterator.prototype.hasCompleted = function () {\n        return this.buffer.length === 0 && this.isComplete;\n    };\n    ZipBufferIterator.prototype.notifyComplete = function () {\n        if (this.buffer.length > 0) {\n            this.isComplete = true;\n            this.parent.notifyInactive();\n        }\n        else {\n            this.destination.complete();\n        }\n    };\n    ZipBufferIterator.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.buffer.push(innerValue);\n        this.parent.checkIterators();\n    };\n    ZipBufferIterator.prototype.subscribe = function (value, index) {\n        return subscribeToResult(this, this.observable, this, index);\n    };\n    return ZipBufferIterator;\n}(OuterSubscriber));\n//# sourceMappingURL=zip.js.map\n","import { StepActionType } from \"../services/joyride-steps-container.service\";\r\n\r\nexport class JoyrideStepInfo {\r\n    number: number;\r\n    name: string;\r\n    route: string;\r\n    actionType: StepActionType;\r\n}","import { Injectable, Inject, PLATFORM_ID } from '@angular/core';\r\nimport { JoyrideStepService } from './joyride-step.service';\r\nimport { JoyrideOptionsService } from './joyride-options.service';\r\nimport { JoyrideOptions } from '../models/joyride-options.class';\r\nimport { Observable, of } from 'rxjs';\r\nimport { finalize } from 'rxjs/operators';\r\nimport { JoyrideStepInfo } from '../models/joyride-step-info.class';\r\nimport { isPlatformBrowser } from '@angular/common';\r\n\r\n@Injectable()\r\nexport class JoyrideService {\r\n    protected tourInProgress: boolean = false;\r\n    protected tour$: Observable<JoyrideStepInfo>;\r\n\r\n    constructor(\r\n        @Inject(PLATFORM_ID) protected platformId: Object,\r\n        protected readonly stepService: JoyrideStepService,\r\n        protected readonly optionsService: JoyrideOptionsService\r\n    ) {}\r\n\r\n    startTour(options?: JoyrideOptions): Observable<JoyrideStepInfo> {\r\n        if (!isPlatformBrowser(this.platformId)) {\r\n            return of(new JoyrideStepInfo());\r\n        }\r\n        if (!this.tourInProgress) {\r\n            this.tourInProgress = true;\r\n            if (options) {\r\n                this.optionsService.setOptions(options);\r\n            }\r\n            this.tour$ = this.stepService.startTour().pipe(finalize(() => (this.tourInProgress = false)));\r\n            this.tour$.subscribe();\r\n        }\r\n        return this.tour$;\r\n    }\r\n\r\n    closeTour(): void {\r\n        if (this.isTourInProgress()) this.stepService.close();\r\n    }\r\n\r\n    isTourInProgress(): boolean {\r\n        return this.tourInProgress;\r\n    }\r\n}\r\n","import { Component, Input, EventEmitter, Output } from \"@angular/core\";\r\n\r\n@Component({\r\n    selector: 'joyride-button',\r\n    templateUrl: './button.component.html',\r\n    styleUrls: ['./button.component.scss']\r\n})\r\nexport class JoyrideButtonComponent {\r\n    hover: boolean;\r\n    \r\n    @Input() \r\n    color: string;\r\n    \r\n    @Output()\r\n    clicked: EventEmitter<any> = new EventEmitter();\r\n\r\n    onClick() {\r\n        this.clicked.emit();\r\n    }\r\n}","import { Component } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'joy-close-button',\r\n    template: `<svg viewBox=\"0 0 25 25\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                <line x1=\"1\" y1=\"24\" \r\n                    x2=\"24\" y2=\"1\" \r\n                    stroke=\"black\" \r\n                    stroke-width=\"3\"/>\r\n                <line x1=\"1\" y1=\"1\" \r\n                    x2=\"24\" y2=\"24\" \r\n                    stroke=\"black\" \r\n                    stroke-width=\"3\"/>\r\n            </svg>`\r\n})\r\n\r\nexport class JoyrideCloseButtonComponent { }","\r\nimport { Component, Input, ViewEncapsulation } from \"@angular/core\";\r\n\r\n@Component({\r\n    selector: 'joyride-arrow',\r\n    templateUrl: './arrow.component.html',\r\n    styleUrls: ['./arrow.component.scss'],\r\n    encapsulation: ViewEncapsulation.None\r\n})\r\nexport class JoyrideArrowComponent {\r\n    @Input()\r\n    position: string = 'top';\r\n}","import { NgModule, ModuleWithProviders } from \"@angular/core\";\r\nimport { CommonModule } from \"@angular/common\";\r\nimport { JoyrideDirective } from './directives/joyride.directive';\r\nimport { JoyrideService } from './services/joyride.service';\r\nimport { JoyrideStepComponent } from \"./components/step/joyride-step.component\";\r\nimport { JoyrideButtonComponent } from \"./components/button/button.component\";\r\nimport { JoyrideCloseButtonComponent } from \"./components/close-button/close-button.component\";\r\nimport { JoyrideStepService } from \"./services/joyride-step.service\";\r\nimport { JoyrideBackdropService } from \"./services/joyride-backdrop.service\";\r\nimport { JoyrideArrowComponent } from \"./components/arrow/arrow.component\";\r\nimport { EventListenerService } from \"./services/event-listener.service\";\r\nimport { JoyrideStepsContainerService } from \"./services/joyride-steps-container.service\";\r\nimport { DocumentService } from \"./services/document.service\";\r\nimport { JoyrideOptionsService } from './services/joyride-options.service';\r\nimport { StepDrawerService } from './services/step-drawer.service';\r\nimport { DomRefService } from './services/dom.service';\r\nimport { LoggerService } from './services/logger.service';\r\nimport { RouterModule } from \"@angular/router\";\r\nimport { TemplatesService } from \"./services/templates.service\";\r\n\r\nexport const routerModuleForChild: ModuleWithProviders = RouterModule.forChild([]);\r\n\r\n@NgModule({\r\n    imports: [CommonModule, routerModuleForChild],\r\n    declarations: [\r\n        JoyrideDirective,\r\n        JoyrideStepComponent,\r\n        JoyrideArrowComponent,\r\n        JoyrideButtonComponent,\r\n        JoyrideCloseButtonComponent\r\n    ],\r\n    entryComponents: [JoyrideStepComponent],\r\n    exports: [\r\n        JoyrideDirective\r\n    ]\r\n})\r\nexport class JoyrideModule {\r\n    static forRoot(): ModuleWithProviders {\r\n        return {\r\n            ngModule: JoyrideModule,\r\n            providers: [\r\n                JoyrideService,\r\n                JoyrideStepService,\r\n                JoyrideStepsContainerService,\r\n                JoyrideBackdropService,\r\n                EventListenerService,\r\n                DocumentService,\r\n                JoyrideOptionsService,\r\n                StepDrawerService,\r\n                DomRefService,\r\n                LoggerService,\r\n                TemplatesService\r\n            ]\r\n        }\r\n    }\r\n    static forChild(): ModuleWithProviders {\r\n        return {\r\n            ngModule: JoyrideModule,\r\n            providers: []\r\n        }\r\n    }\r\n}\r\n"],"names":["StepActionType","this","title","ReplaySubject","text","DEFAULT_THEME_COLOR","STEP_DEFAULT_POSITION","DEFAULT_TIMEOUT_BETWEEN_STEPS","DEFAULT_TEXTS","prev","of","next","done","close","JoyrideOptionsService","options","stepsOrder","steps","stepDefaultPosition","logsEnabled","showCounter","showPrevButton","themeColor","firstStep","startWith","waitingTime","customTexts","setCustomText","hexToRgb","texts","toObservable","value","Observable","hex","replace","m","r","g","b","result","exec","parseInt","Injectable","JOYRIDE","optionService","LoggerService","message","data","areLogsEnabled","console","debug","info","warn","error","_super","Object","setPrototypeOf","_this","JoyrideError","prototype","__extends","Error","JoyrideStepDoesNotExist","JoyrideStepOutOfRange","ROUTE_SEPARATOR","stepOptions","logger","Subject","JoyrideStepsContainerService","getFirstStep","index","getStepsOrder","indexOf","undefined","currentStepIndex","getFirstStepIndex","forEach","stepId","push","id","step","stepToAdd","tempSteps","filter","name","length","stepIndexToReplace","findIndex","action","NEXT","stepName","getStepName","stepFound","stepID","includes","split","position","getStepIndex","stepHasBeenModified","map","platformId","body","documentElement","document","fakeDocument","navigator","DomRefService","isPlatformBrowser","window","fakeWindow","__param","Inject","PLATFORM_ID","TemplatesService","template","_prevButton","_nextButton","_doneButton","_counter","NO_POSITION","joyrideStepsContainer","viewContainerRef","domService","router","templateService","EventEmitter","windowRef","getNativeWindow","JoyrideStep","JoyrideDirective","prevTemplate","setPrevButton","nextTemplate","setNextButton","doneTemplate","setDoneButton","counterTemplate","setCounter","stepPosition","targetViewContainer","setAsyncFields","stepContent","stepContentParams","nextClicked","prevCliked","tourDone","route","url","substr","transformCssStyle","getComputedStyle","element","nativeElement","transform","isElementOrAncestorFixed","isElementFixed","isAncestorsFixed","parentElement","addStep","changes","subscriptions","subscribe","nodeName","sub","unsubscribe","__decorate","Input","TemplateRef","Output","Directive","selector","ViewContainerRef","Router","DOMService","setDocumentHeight","elementsFromPoint","bind","DocumentService","elementRef","getBoundingClientRect","top","left","scrollOffsets","getScrollOffsets","y","x","documentHeight","calculateDocumentHeight","getFirstScrollableParent","getNativeDocument","keywordToDiscard","x1","getElementFixedLeft","getElementAbsoluteLeft","y1","getElementFixedTop","getElementAbsoluteTop","x2","width","y2","height","elements1","elements2","getFirstElementWithoutKeyword","firstScrollableParent","scrollTo","scrollTop","scrollHeight","clientHeight","node","regex","style","prop","getPropertyValue","scrollparent","test","scroll","parentNode","documentRef","Math","max","offsetHeight","winReference","docReference","pageXOffset","pageYOffset","compatMode","scrollLeft","parents","parent","elem","elementFromPoint","pointerEvents","elements","keyword","classList","toString","shift","documentService","optionsService","rendererFactory","setRenderer","JoyrideBackdropService","renderer","createRenderer","targetAbsoluteTop","getTargetTotalTop","targetAbsoluteLeft","getTargetTotalLeft","currentBackdropContainer","createElement","addClass","setStyle","setAttribute","backdropContent","appendChild","backdropTop","lastYScroll","getBackdropColor","backdropMiddleContainer","backdropMiddleContent","leftBackdrop","lastXScroll","targetBackdrop","offsetWidth","rightBackdrop","backdropBottom","removeLastBackdrop","drawCurrentBackdrop","lastBackdropContainer","handleVerticalScroll","handleHorizontalScroll","targetVC","scrollY","scrollX","newBackdropLeftWidth","handleTargetPartialWidth","visibleTargetWidth","newBackdropTopHeight","handleTargetPartialHeight","visibleTargetHeight","removeChild","RendererFactory2","EventListenerService","scrollUnlisten","listen","evt","scrollEvent","resizeUnlisten","resizeEvent","STEP_MIN_WIDTH","STEP_MAX_WIDTH","CUSTOM_STEP_MAX_WIDTH_VW","STEP_HEIGHT","ASPECT_RATIO","DEFAULT_DISTANCE_FROM_MARGIN_TOP","DEFAULT_DISTANCE_FROM_MARGIN_LEFT","DEFAULT_DISTANCE_FROM_MARGIN_BOTTOM","DEFAULT_DISTANCE_FROM_MARGIN_RIGHT","injector","stepsContainerService","eventListenerService","ARROW_SIZE","JoyrideStepComponent","joyrideStepService","get","JoyrideStepService","getDocumentHeight","subscribeToResizeEvents","asObservable","setCustomTemplates","setCustomTexts","counter","getCounter","isCounterVisible","isPrevButtonVisible","getThemeColor","val","checkRedraw","isCustomized","stepContainer","updateStepDimensions","dimensions","getDimensionsByAspectRatio","clientWidth","adjustDimensions","stepWidth","stepHeight","drawStep","setTimeout","redrawStep","getPrevButton","getNextButton","getDoneButton","customeTexts","getCustomTexts","prevText","nextText","doneText","stepHolder","targetWidth","targetHeight","setStepStyle","getStepNumber","numberOfSteps","getStepsCount","counterData","total","customContent","ctx","customPrevButton","customNextButton","customDoneButton","customCounter","setStyleTop","setStyleBottom","setStyleRight","setStyleLeft","setStyleCenter","updatePosition","topPosition","DISTANCE_FROM_TARGET","stepAbsoluteTop","arrowTopPosition","leftPosition","stepAbsoluteLeft","arrowLeftPosition","arrowSize","adjustLeftPosition","adjustRightPosition","arrowPosition","autofixTopPosition","adjustTopPosition","adjustBottomPosition","autofixRightPosition","autofixBottomPosition","autofixLeftPosition","showArrow","currentWindowWidth","newLeftPos","deltaLeftPosition","newTopPos","deltaTopPosition","positionAlreadyFixed","aspectRatio","calcHeight","newWidth","newHeight","subscription","ViewChild","ElementRef","Injector","Renderer2","componentFactoryResolver","appRef","StepDrawerService","ref","resolveComponentFactory","create","attachView","hostView","domElem","rootNodes","instance","changeDetectorRef","detectChanges","stepInstance","refMap","detachView","destroy","ComponentFactoryResolver","ApplicationRef","SCROLLBAR_SIZE","backDropService","eventListener","stepDrawerService","initViewportPositions","subscribeToScrollEvents","winTopPosition","winBottomPosition","innerHeight","startListeningScrollEvents","currentStep","redraw","redrawTarget","getStepDefaultPosition","draw","stepsObserver","init","tryShowStep","startListeningResizeEvents","subscribeToStepsUpdates","removeCurrentStep","notifyTourIsFinished","stopListeningResizeEvents","remove","emit","PREV","stepRoute","getStepRoute","navigate","updatedStep","actionType","navigateToStepPage","timeout","getWaitingTime","showStep","scrollIfElementBeyondOtherElements","scrollIfStepAndTargetAreNotVisible","notifyStepClicked","stepInfo","number","complete","scrollWhenTargetOrStepAreHiddenBottom","scrollWhenTargetOrStepAreHiddenTop","totalTargetBottom","getMaxTargetAndStepBottomPosition","scrollBy","totalTargetTop","getMaxTargetAndStepTopPosition","min","scrollIntoView","isElementBeyondOthers","extendStatics","d","__proto__","Array","p","hasOwnProperty","__","constructor","tryCatchTarget","errorObject","e","tryCatcher","apply","arguments","tryCatch","fn","isFunction","_enable_super_gross_mode_that_will_cause_bad_things","config","Promise","useDeprecatedSynchronousErrorHandling","stack","hostReportError","err","empty","closed","isArray","isObject","UnsubscriptionError","errors","call","i","join","tslib_1.__extends","Subscription","_parent","_parents","_subscriptions","_unsubscribe","hasErrors","len","flattenUnsubscriptionErrors","concat","add","teardown","EMPTY","_addParent","tmp","subscriptionIndex","splice","reduce","errs","rxSubscriber","Symbol","for","Subscriber","destinationOrNext","syncErrorValue","syncErrorThrown","syncErrorThrowable","isStopped","destination","emptyObserver","isTrustedSubscriber","trustedSubscriber","rxSubscriberSymbol","SafeSubscriber","subscriber","_next","_error","_complete","_unsubscribeAndRecycle","_parentSubscriber","observerOrNext","context","_context","__tryOrSetError","__tryOrUnsub","wrappedComplete","obj","OuterSubscriber","notifyNext","outerValue","innerValue","outerIndex","innerIndex","innerSub","notifyError","notifyComplete","InnerSubscriber","toSubscriber","nextOrObserver","observable","noop","pipeFromArray","fns","input","_isScalar","_subscribe","lift","operator","source","sink","_trySubscribe","promiseCtor","getPromiseCtor","resolve","reject","Symbol_observable","pipe","operations","_i","toPromise","subscribeToArray","array","subscribeToPromise","promise","then","getSymbolIterator","iterator","subscribeToIterable","iterable","Symbol_iterator","item","return","subscribeToObservable","obs","TypeError","isArrayLike","isPromise","subscribeTo","subscribeToResult","outerSubscriber","AuditSubscriber","durationSelector","hasValue","throttled","duration","innerSubscription","clearThrottle","Action","scheduler","work","schedule","state","delay","AsyncAction","pending","recycleAsyncId","requestAsyncId","setInterval","flush","clearInterval","execute","_execute","errored","errorValue","actions","Scheduler","SchedulerAction","now","Date","AsyncScheduler","delegate","active","scheduled","async","isNumeric","parseFloat","isScheduler","BufferSubscriber","closingNotifier","buffer","BufferCountSubscriber","bufferSize","BufferSkipCountSubscriber","startBufferEvery","buffers","count","Context","BufferTimeSubscriber","bufferTimeSpan","bufferCreationInterval","maxBufferSize","contexts","openContext","timespanOnly","timeSpanOnlyState","closeAction","dispatchBufferTimeSpanOnly","closeState","creationState","dispatchBufferClose","dispatchBufferCreation","filledBufferContext","context_1","onBufferFull","context_2","closeContext","prevContext","arg","BufferToggleSubscriber","openings","closingSelector","closeBuffer","openBuffer","trySubscribe","BufferWhenSubscriber","subscribing","closingSubscription","CatchSubscriber","caught","err2","fromArray","NONE","CombineLatestSubscriber","resultSelector","values","observables","toRespond","unused","oldVal","_tryResultSelector","slice","emptyScheduled","scalar","args","pop","MapSubscriber","project","thisArg","MergeMapSubscriber","concurrent","Number","POSITIVE_INFINITY","hasCompleted","_tryNext","_innerSub","ish","CountSubscriber","predicate","_tryPredicate","DebounceSubscriber","durationSubscription","emitValue","DebounceTimeSubscriber","dueTime","debouncedSubscription","lastValue","clearDebounce","dispatchNext","debouncedNext","DefaultIfEmptySubscriber","defaultValue","isEmpty","throwError","dispatch","_a","Notification","kind","observe","observer","do","accept","createNext","undefinedValueNotification","createError","createComplete","completeNotification","DelaySubscriber","queue","time","notification","delay_1","_schedule","scheduleNotification","DelayMessage","DelayWhenSubscriber","delayDurationSelector","completed","delayNotifierSubscriptions","removeSubscription","tryComplete","delayNotifier","tryDelay","subscriptionIdx","notifierSubscription","SubscriptionDelayObservable","subscriptionDelay","SubscriptionDelaySubscriber","sourceSubscribed","subscribeToSource","DeMaterializeSubscriber","DistinctSubscriber","keySelector","flushes","Set","clear","_useKeySelector","_finalizeNext","key","has","DistinctUntilChangedSubscriber","compare","hasKey","Boolean","ArgumentOutOfRangeError","FilterSubscriber","TapSubscriber","_tapNext","_tapError","_tapComplete","EmptyError","TakeSubscriber","EverySubscriber","everyValueMatch","SwitchFirstSubscriber","hasSubscription","ExhaustMapSubscriber","tryNext","ExpandSubscriber","subscribeToProjection","finalize","callback","FinallyOperator","FinallySubscriber","FindValueSubscriber","yieldIndex","ObjectUnsubscribedError","SubjectSubscription","subject","observers","subscriberIndex","SubjectSubscriber","hasError","thrownError","AnonymousSubject","copy","GroupBySubscriber","elementSelector","subjectSelector","groups","attemptedToUnsubscribe","_group","Map","group","set","groupedObservable","GroupedObservable","GroupDurationSubscriber","removeGroup","delete","groupSubject","refCountSubscription","InnerRefCountSubscription","IgnoreElementsSubscriber","IsEmptySubscriber","TakeLastSubscriber","ring","idx","MapToSubscriber","MaterializeSubscriber","ScanSubscriber","accumulator","_seed","hasSeed","defineProperty","enumerable","configurable","seed","MergeScanSubscriber","acc","refCount","RefCountOperator","connectable","_refCount","refCounter","RefCountSubscriber","connection","connect","sharedConnection","_connection","ConnectableObservable","subjectFactory","_isComplete","getSubject","_subject","ConnectableSubscriber","higherOrderRefCount","ObserveOnSubscriber","scheduleMessage","ObserveOnMessage","OnErrorResumeNextSubscriber","nextSources","subscribeToNextSource","PairwiseSubscriber","hasPrev","BehaviorSubject","_value","getValue","AsyncSubject","hasNext","QueueAction","QueueScheduler","windowTime","_events","_infiniteTimeWindow","_bufferSize","_windowTime","nextInfiniteTimeWindow","nextTimeWindow","ReplayEvent","_getNow","_trimBufferThenGetEvents","eventsCount","spliceCount","RaceSubscriber","hasFirst","RepeatSubscriber","RepeatWhenSubscriber","notifier","sourceIsBeingSubscribedTo","retries","subscribeToRetries","retriesSubscription","notifications","RetrySubscriber","RetryWhenSubscriber","SampleSubscriber","SampleTimeSubscriber","period","dispatchNotification","SequenceEqualSubscriber","compareTo","comparor","_b","_oneComplete","SequenceEqualCompareToSubscriber","checkValues","a","areEqual","nextB","SingleSubscriber","seenValue","applySingleValue","singleValue","SkipSubscriber","SkipLastSubscriber","_skipCount","_count","_ring","skipCount","currentIndex","oldValue","SkipUntilSubscriber","SkipWhileSubscriber","skipping","tryCallPredicate","nextHandle","tasksByHandle","runIfPresent","handle","cb","Immediate","setImmediate","clearImmediate","AsapAction","AsapScheduler","asap","SubscribeOnObservable","delayTime","SwitchMapSubscriber","TakeUntilSubscriber","TakeWhileSubscriber","nextOrComplete","predicateResult","ThrottleSubscriber","_leading","_trailing","_hasValue","_sendValue","_throttled","send","throttle","tryDurationSelector","throttlingDone","ThrottleTimeSubscriber","leading","trailing","_hasTrailingValue","_trailingValue","TimeoutError","TimeoutWithSubscriber","absoluteTimeout","waitFor","withObservable","scheduleTimeout","dispatchTimeout","WindowSubscriber","openWindow","prevWindow","newWindow","WindowCountSubscriber","windowSize","startWindowEvery","windows","c","window_1","CountedSubject","_numberOfNextedValues","WindowTimeSubscriber","windowTimeSpan","windowCreationInterval","maxWindowSize","dispatchWindowClose","dispatchWindowCreation","dispatchWindowTimeSpanOnly","numberOfNextedValues","closeWindow","window_2","timeSpanState","WindowToggleSubscriber","openSubscription","context_3","context_4","inner","unsubscribeClosingNotification","closingNotification","WithLatestFromSubscriber","found","_tryProject","ZipSubscriber","iterators","StaticArrayIterator","StaticIterator","ZipBufferIterator","stillUnsubscribed","notifyInactive","checkIterators","shouldComplete","_tryresultSelector","nextResult","isComplete","stepService","JoyrideService","tourInProgress","setOptions","tour$","startTour","JoyrideStepInfo","isTourInProgress","JoyrideButtonComponent","clicked","JoyrideCloseButtonComponent","Component","JoyrideArrowComponent","routerModuleForChild","RouterModule","forChild","JoyrideModule","ngModule","JoyrideModule_1","providers","NgModule","imports","CommonModule","declarations","entryComponents","exports"],"mappings":"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"}